# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-04-16 15:48+Hora de verano romance\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"
"Generated-By: pygettext.py 1.5\n"


#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:3
msgid "# NVDA Add-on Development Guide"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:4
msgid "* Latest version: December 2017 for NVDA 2017.4"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:5
msgid "## Authors, Contributions, and Copyright"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:6
msgid "This guide was originally written by Joseph Lee, and is shaped by the NVDA user and developer community. We welcome your feedback and contributions."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:7
msgid "NVDA is copyright 2006-2017 NV Access Limited. Microsoft Windows, Microsoft Office, Win32 API, and other Microsoft  products are copyright Microsoft Corporation. the IAccessible package is copyright by IBM and the Linux Foundation. Python is copyright by Python Software Foundation. Other products mentioned are copyrighted by their respective copyright holders."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:8
msgid "## Introduction"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:9
msgid "Welcome to the NVDA Add-on Development Guide. This is the one-stop guide on how to develop NVDA add-ons. This guide also  explains some useful code segments from the NVDA core source code, which highlight concepts for you, as you learn to write add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:10
msgid "For more information on NVDA development, please visit the [NVDA Community Development page][1]. Be sure to go over the [NVDA Developer Guide][2] to familiarize yourself with key terms and basics on getting started with add-on development."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:11
msgid "## Audience"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:12
msgid "This guide is designed for: "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:13
msgid "* Python beginners"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:14
msgid "* beginners to NVDA"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:15
msgid "* Expert Python developers"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:16
msgid "* Expert NVDA developers"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:17
msgid "* People familiar with programming languages other than Python."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:18
msgid "* Developers of scripts for other screen readers."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:19
msgid "If you are new to NVDA add-on or core development, we recommend that you get to know Python first, as it gives the necessary programming background for understanding the rest of the guide. If you are a Python programmer but new to NVDA development, please checkout the NVDA development guide and Design Overview document, both of which can be found on the [NVDA Community Development page][1]."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:20
msgid "### Special note on Python version"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:21
msgid "NVDA and add-ons are written in Python 2, specifically 2.7. There is an active research project to port NVDA to python 3, with some add-on developers modifying their add-on source code to run on Python 2 and 3. Be sure to keep an eye on NVDA development and add-ons mailing lists, as well as relevant development documentation and notices regarding news on Python 3 and NVDA."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:22
msgid "### A special note for scripters of other screen readers"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:23
msgid "Some of the concepts described in this document are same across different screen readers, such as objects, windows, events, accessibility API and so on. However, there are important things to be aware of when writing or porting scripts:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:24
msgid "* Unlike some screen readers, NVDA does not have a formal specification or an object model as defined by documentation in other screen readers."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:25
msgid "* The code you write will run inside the same runtime environment as the screen reader itself, thus you can perform things such as obtain focused object directly, modify NVDA's functionality and even replace NVDA functions and classes with your own."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:26
msgid "* Python, and consequently, NVDA is an object-oriented system. In other words, most of your code will consist of defining classes and objects which are than picked up by NVDA at runtime."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:27
msgid "* Unlike scripting engines for some screen readers, there is no special hack involved when you wish to provide a feature that'll work in all applications."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:28
msgid "* Unlike scripting engines for some screen readers, you are not limited to libraries that come with screen readers; as a Python-based program, you can use any python module(s) that fits your needs. For example, a popular module used to interface with web applications is JSON (JavaScript Object Notation) module, which isn't bundled with older NVDA versions prior to 2017.3. You need to bundle external Python libraries yourself."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:29
msgid "## What are Add-ons?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:30
msgid "Add-ons are additional packages that extend NVDA's functionality or support for programs. This may include adding global features, enhancing support for an application, or adding support for newer braille displays or speech synthesizers. Add-ons may contain more than one module. The following is a general description of add-on module types."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:31
msgid "### Add-on Module Types"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:32
msgid "Currently, NVDA supports these add-on module types:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:33
msgid "* Global plugin: A global plugin adds features for NVDA which can be used anywhere, such as OCR capability."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:34
msgid "* App module: An app module allows enhanced support for a specific program. App modules only run as long as the program runs. They change how NVDA reacts to the windows and controls in the running application. "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:35
msgid "* Driver: A driver allows a program to talk to hardware. Currently you can write drivers for new braille displays or speech synthesizers."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:36
msgid "### Installing NVDA Add-ons"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:37
msgid "Each NVDA add-on package is a zip file with the file extension of .nvda-addon. You can install add-on modules via the Add-ons Manager in NVDA 2012.2 or later. Alternatively, you can install them from File Manager if you use NVDA 2012.3 or later."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:38
msgid "## Setting up the add-on development environment"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:39
msgid "Follow these steps to prepare your computer for writing NVDA add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:40
msgid "### Meet System requirements"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:41
msgid "To create an add-on for NVDA, please make sure your system meets the following requirements:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:42
msgid "* A version of NVDA is available on your computer (either a portable or installed version will work, but we strongly recommend that you install a copy of NVDA on your development computer). Download NVDA from the NV Access page at https://www.nvaccess.org."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:43
msgid "\t* We recommend installing the latest master development version to keep up to date with core API changes. You can download the latest snapshots at https://community.nvda-project.org/wiki/Snapshots."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:44
msgid "* Python 2.7 series, version 2.7.14 32-bit for Windows: <https://www.python.org/download/releases/2.7.14/>."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:45
msgid "* SCons 2, version 2.3.0 or later for generating add-on packages: <http://www.scons.org/>."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:46
msgid "* Markdown 2.0.1 or later for generating add-on documentation: <https://pypi.python.org/pypi/Markdown/2.0.1>."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:47
msgid "* The GNU Gettext package for Windows for message localization support. The build can be found at: <http://gnuwin32.sourceforge.net/downlinks/gettext.php>."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:48
msgid "\t* Once downloaded, copy both exe files to your add-on development folder. See the next section for a description of the add-on folder structure."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:49
msgid "* Git 1.7.9 or later if you wish to upload the add-on to a repository such as Bitbucket (optional. See below). You can use various Git clients, such as Git Bash, Cygwin's Git, and Tortoise Git."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:50
msgid "* The NVDA Community Add-on Template for ease of add-on file and folder packaging and management (optional. [Download the add-on template)][3] ."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:51
msgid "* If you are developing support for a program, speech synthesizer, or braille display, install the needed software and hardware."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:52
msgid "Note: if using Windows 10 Anniversary Update or later and wish to use Ubuntu on Windows (aka Windows Subsystem for Linux), you can use Advanced Packaging Tool (APT) to obtain SCons and Gettext. You can then use pip to download and install Markdown."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:53
msgid "### Add-on Development Folder Structure"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:54
msgid "When writing add-ons, it is recommended that you store your add-on code in separate folders, one per add-on. If you chose to download the add-on template, the folder structure will be automatically created."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:55
msgid "Once you install the needed dependencies (see above), paste the Gettext package executables into this add-on folder."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:56
msgid "### Add-on folder structure"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:57
msgid "Each add-on folder, at a minimum, must contain the following files and folders:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:58
msgid "* manifest.ini to store manifest information such as add-on name and author."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:59
msgid "* An \"addon\" subfolder with the add-on module directory underneath this subfolder (appModules, globalPlugins, synthDrivers, brailleDisplays). One or more module folders can be specified."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:60
msgid "If you are using the add-on template, the folder structure will automatically be created, so you need to create only the addon subfolder and the add-on module folder(s) and code inside this folder. See the readme file in the template folder for more information on customizing your add-on manifest using the template files."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:61
msgid "### Packaging add-ons"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:62
msgid "There are two ways of packaging add-ons:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:63
msgid "1. To package your add-on manually, zip up (compress) your add-on folder as a .zip file, then rename the file extension to .nvda-addon."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:64
msgid "2. To use the add-on template with SCons, open Command Prompt with administrator mode (Windows Vista or later) or Bash on Ubuntu on Windows (Windows 10 Anniversary Update with WSL enabled), change to your add-on folder and type `scons~."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:65
msgid "For more information on add-on management, see the management chapter in this guide."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:66
msgid "## Getting started: Hands-on examples"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:67
msgid "So are you ready to start your adventure with add-ons, but not sure as to how to bring it to life? If that is you, please go through this chapter, as it gives you basic information to get you started with add-ons and give you tips on writing code."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:68
msgid "Note: for this chapter, we will not use the actual add-on packages. Instead, we'll use plugin folders - a number of subdirectories in your NVDA user configuration folder (available from Start Menu/Screen if NVDA is installed) to store our example Python files."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:69
msgid "To edit .py files, you need a word processor which can handle .py files. The best one we recommend is Notepad++ which can be downloaded from https://notepad-plus-plus.org/download/v6.8.3.html."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:70
msgid "### How add-on code is organized"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:71
msgid "Your add-on code is stored in one or more Python files (.py file). Despite different kinds of add-ons out there, they all have similar layout."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:72
msgid "First, you start by writing an optional header for your add-on, such as your name, a brief sentence or two on what the add-on is for and so on. Although this is optional, it is recommended that you write the header as a reminder to keep track of what you are doing with your add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:73
msgid "Next, you tell NVDA the modules you need for your add-on file. This is done by writing `import module` where module is the name of the module you wish to use in your code. For example, if you want to hear tones while writing your add-on, write `import tones`. Typically you may need to import two or more modules for your specific add-on (see below on list of modules you need for the type of add-on module you are writing)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:74
msgid "after declaring the modules you need or import, you write your add-on code (defining classes, variables, methods and so on). The most important section is the add-on class code, which will determine the type of add-on module your code will be assigned to."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:75
msgid "For instance, if you wish to add support for a program, after importing appModuleHandler and other needed modules, you would write:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:76
msgid " `class appModule(appModuleHandler.AppModule):`"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:77
msgid "After that, all you are writing is Python code (see the Python documentation on how to write Python programs)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:78
msgid "### Running your add-on in this example chapter"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:79
msgid "To run your example add-ons from this chapter, open your NVDA user configuration directory (from Start Menu/Screen, look for Explore NVDA user configuration folder\" item). Then paste your .py file to the appropriate folder: appModules folder for app module examples, and globalPlugins folder for global plugins."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:80
msgid "### Example 1: Hear a tone when pressing NVDA+A"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:81
msgid "Let us start with a simple example: if you press NVDA+A, you would hear a tone for 1 second from any program. Since we want to use this everywhere, it must be a global plugin."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:82
msgid "First, open your user configuration folder, then open globalPlugins folder. Create a new .py file and give it a descriptive name such as example1.py (it is strongly recommended that when you name your global plugin file, give it a short descriptive name). Then open the newly created .py file in the word processor."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:83
msgid "The below code implements our example. Put this in your .py file as exactly as shown:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:84
msgid "\t# Add-on development first example"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:85
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:88
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:120
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:123
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:214
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:223
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:230
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:239
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:247
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:249
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:284
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:287
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:326
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:329
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:332
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:334
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:352
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:355
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:358
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:368
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:372
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:376
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:525
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:528
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:570
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:586
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:595
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:598
msgid "\t"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:86
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:527
msgid "\timport globalPluginHandler"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:87
msgid "\timport tones # We want to hear beeps."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:89
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:529
msgid "\tclass GlobalPlugin(globalPluginHandler.GlobalPlugin):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:90
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:93
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:125
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:289
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:291
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:531
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:577
msgid "\t\t"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:91
msgid "\t\tdef script_doBeep(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:92
msgid "\t\t\ttones.beep(440, 1000) # Beep a standard middle A for 1 second."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:94
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:373
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:535
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:578
msgid "\t\t__gestures={"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:95
msgid "\t\t\t\"kb:NVDA+A\":\"doBeep\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:96
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:375
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:537
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:580
msgid "\t\t}"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:97
msgid "In Python, you put comments by putting hash sign (#) at the start of the comment line."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:98
msgid "### Example 1 code explanation"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:99
msgid "Our first example let's us sound a beep for one second when we press NVDA+A. But you might be wondering what that above code means, so let's step through the code, one piece at a time."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:100
msgid "1. At the top of the file, we wrote a header which tells us that this is an example add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:101
msgid "2. Since this is a global plugin, we need to import a crucial module: global plugin handler, so we wrote `import globalPluginHandler`."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:102
msgid "3. Then we wrote `import tones` to import (load, or include) the tones module, a built-in module from NVDA. Whenever you wish to use a method from a given module, import the needed module(s)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:103
msgid "4. Next, we defined a class called GlobalPlugin. The text inside the brackets tells us where this class is coming from (more on this concept in a second). A class, in programming, describes an object, such as a person, a desk, a program and others."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:104
msgid "5. Inside the class, we wrote a method (function) called `script_doBeep`. This is an example of a script, a method that'll be run or executed when you press a command. Inside this script, we wrote `tones.beep(440, 1000)` to tell NVDA to sound a middle A tone for 1 second. In programming, a function can take arguments, or a set or parameters which tells the function what to do based on the given values (we'll meet them later). In fact, many methods you'll be writing, including our doBeep script takes one or more arguments. More on scripts later as we journey through the guide."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:105
msgid "6. Lastly, we wrote a simple dictionary (a collection) to store our command (script) bindings for our doBeep script. Here, we told NVDA to assign NVDA+A command for doBeep script."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:106
msgid "Save this file, then restart NVDA. Now whenever you press NVDA+A, you'll hear a middle A tone for 1 second. Once you are comfortable with the add-on code and how it is laid out, you can delete the newly created .py file."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:107
msgid "### I don't understand those above terms"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:108
msgid "For some, the terms \"class\", \"method\" and so on might be new. Let's go over what these terms are, as they are fundamental for add-on development:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:109
msgid "* Class: a class describes an object. It could describe anything, such as a person, a desk, an NVDA add-on and others. Classes are fundamental to NVDA and other programs - in fact, a number of programmers are skilled at coming up with classes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:110
msgid "* Method: A method is a short program or a routine that a program runs for doing something, such as generating tones, calculating huge numbers, loading NVDA add-ons and so on. Some people call them \"functions.\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:111
msgid "* Script: A script is a method which runs when the user performs commands such as pressing certain keys on a keyboard. For example, when you press NVDA+F12, NVDA runs dateTime script, located in one of the NVDA core modules named Global Commands. A script takes two arguments: where the script would be executed (usually \"self\"; more on that later) and the gesture for the script (see below)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:112
msgid "* Variable: A variable is something that can change, such as name of a person, name of the NVDA add-on we're running, version of NVDA you are using and so on. An add-on file may define one or more variables (for example, to store common constants such as strings)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:113
msgid "* Module: A module is a collection of methods and variables in a file. When we write add-ons, we are in fact writing additional modules that NVDA can use while it is running."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:114
msgid "There are other terms that we'll get to know shortly."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:115
msgid "### Example 2: Generate a tone when switching to Notepad"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:116
msgid "Most of the below code comes from NVDA Developer Guide."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:117
msgid "Not only NVDA let's you add global commands, but it also allows writing code to enhance usage of programs through app modules. An app module is also a Python file except that, this time, the name of the .py file is the name of the executable for a program. For example, an app module for Notepad would be named notepad.py."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:118
msgid "The below code, from NVDA developer Guide, gives a short example of a typical app module: play a short beep when switching to Notepad. Put the below code in notepad.py, which in turn should be placed in appModules folder in your user configuration folder in order for it to run."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:119
msgid "\t# An example app module."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:121
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:244
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:286
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:567
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:585
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:596
msgid "\timport appModuleHandler"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:122
msgid "\timport tones"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:124
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:248
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:288
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:571
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:587
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:599
msgid "\tclass AppModule(appModuleHandler.AppModule):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:126
msgid "\t\tdef event_gainFocus(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:127
msgid "\t\t\ttones.beep(256, 200)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:128
msgid "\t\t\tnextHandler()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:129
msgid "### Example 2 code explanation"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:130
msgid "We're seeing more new code here. Let's go over this, again piece by piece:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:131
msgid "1. Unlike the first example, the crucial module we need is appModuleHandler."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:132
msgid "2. The class that we are using is AppModule."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:133
msgid "3. Unlike last time, we're using events, a method run when certain events occur such as when names of controls change. Events take an object as one of its arguments, the object for which the event needs to be dealt with, or, as many people say, \"fired.\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:134
msgid "4. Inside the event method, we're also seeing a call to `nextHandler`. This method is used in event methods to tell NVDA to pass the event so it can be taken care of, such as saying the name of a control after beeping."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:135
msgid "### More new terms please"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:136
msgid "Other terms you may see include:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:137
msgid "* Event: An event is a method that'll be run when some events happen, such as when a program is on focused, when names of controls change and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:138
msgid "* Call: We say a function calls some another method when we run the second method from another method. For example, in our first example, we're calling tones.beep method from our script method."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:139
msgid "* Object: An object is an instance of a class - that is, a class coming to life when a program runs. Throughout your add-ons, as you write classes and when you run your add-ons, your classes come to life as objects, commonly abbreviated to obj. In NVDA, an object may refer to controls or parts of a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:140
msgid "* Self: In Python, the word \"self\" means current class (if we're defining one, such as when writing add-ons), or means the class for which a method is defined. For example, in a class called numbers, the add method would have self as the first argument, reminding us that add method is part of the class of numbers. In NVDA development world, self usually means the current NVDA object (see below), or in the add-on development, the instance of an add-on. Many of your methods will have self as the first argument."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:141
msgid "Just like example 1, once you're comfortable with app module code, you may wish to delete the Notepad app module code unless you want to keep hearing beeps when you switch to Notepad. The actual differences between global plugins and app modules will become more clear when we talk about them in more detail throughout this guide."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:142
msgid "### A few tips for beginners"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:143
msgid "Here are a few useful tips passed on by add-on writers:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:144
msgid "* Start with easy add-ons, such as saying a message, tones and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:145
msgid "* Write and test one method at a time."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:146
msgid "* If you are writing app modules or drivers, become familiar with programs, synthesizers or braille displays you wish to support (e.g. read documentation, try using them, etc.)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:147
msgid "* When defining commands (especially in global plugins), consult commands used in NVDA and other add-ons first before assigning a new command in your add-on to avoid command conflicts."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:148
msgid "## Useful modules from NVDA core"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:149
msgid "Throughout the life of add-on development, you'll come across some useful modules from NVDA core that would be helpful in your add-on code. This section explains them and some functions in those modules that would be useful, along with examples that utilize some of them."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:150
msgid "Note: for readers who are scripters for other screen readers, see Appendix D on equivalent functions between screen reader scripting facilities."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:151
msgid "### List of useful NVDA core modules and methods"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:152
msgid "The following lists available NVDA core modules and some useful methods and classes found in those modules:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:153
msgid "* Addon Handler (addonHandler.py): The module which implements the add-on subsystem. The addonHandler.initTranslation() method is used to initialize internationalization support for your add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:154
msgid "* NVDA basic API (api.py): A collection of core methods used throughout NVDA, such as obtaining focus and navigator object, setting focus and so on. Some of the most useful functions are:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:155
msgid "\t* `api.getFocusObject()`: Retrieves the focused control (returns the object with focus)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:156
msgid "\t* `api.getNavigatorObject()`: Fetches the current navigator object. If NVDA is set to follow system focus, the focus and navigator object will be the same, otherwise a different object is returned."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:157
msgid "\t* `api.getForegroundObject()`: Returns the foreground window of the current application (the parent of this object is the application itself)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:158
msgid "\t* These have a corresponding method to set certain object as the focus or navigator object. Note that these lets NVDA see the new focus or navigator object but does not actually change system focus."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:159
msgid "\t* `api.getDesktopObject()`: returns the shell (topmost level_ object)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:160
msgid "\t* `api.copyToClip()`: copies text to the clipboard."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:161
msgid "* App Module subsystem (appModuleHandler.py, appModules): The subsystem in charge of handling app modules (see the chapter on app modules for more information)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:162
msgid "* ARIA support (aria.py): Implements support for Accessible Rich Internet Applications (ARIA)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:163
msgid "* Base object collection (baseObject.py): Contains useful base objects such as scriptable objects (see the chapter on NVDA objects and overlay objects for more information)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:164
msgid "* Braille input and output subsystem (braille.py, brailleInput.py): Controls braille output to and input from braille displays, needed by braille display driver add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:165
msgid "* Build-in modules (builtin.py): Allows access to builtin modules when working with add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:166
msgid "* Configuration (config): Manages configuration and profiles (profiles are available in 2013.3 or later)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:167
msgid "* Controls and states collection (controlTypes.py): Includes dictionaries on control types (roles) and possible states that a control can be in."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:168
msgid "* Events (eventHandler.py): Handles various events such as gaining focus. One function in particular is useful in app modules:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:169
msgid "\t* `eventHandler.requestEvents(process ID, window class name for the control, event to be requested)`: Allows NVDA to listen to specific events for certain controls while using another app."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:170
msgid "* Extension points (extensionPoints.py): provides a way to let add-ons and other modules define and respond to specific action such as profile switches, actions in an add-on and so on. The following extension points are defined:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:171
msgid "\t* `extensionPoints.Action`; notifies when something happens e.g. profile swithces."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:172
msgid "\t* `extensionPoints.Decider`: decides whether to process something further e.g. processing keyboard input from a remote system."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:173
msgid "\t* `extensionPoints.Filter`: modifies a given text for further processing e.g. advanced speech sequences."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:174
msgid "* Global Commands collection (globalCommands.py): A list of global commands available while using NVDA (see section on script scope for more information)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:175
msgid "* Global Plugin subsystem (globalPluginHandler.py): The module needed for controlling global plugins."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:176
msgid "* NVDA GUI (gui): A collection of classes used by NVDA to display its messages graphically. Includes GUI's for NVDA menu, add-on manager and others."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:177
msgid "* Hardware port utilities (hwPortUtils.py): A set of utilities for communicating over serial and other hardware ports, useful during driver add-on development."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:178
msgid "* IAccessible support (IAccessibleHandler.py, IAccessible objects): Used for supporting Microsoft Active Accessibility (MSAA)/IAccessible controls."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:179
msgid "* Input management (inputCore.py): Manages input from the user."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:180
msgid "* Java Access Bridge support (JABHandler.py): A collection of methods used for supporting JAB subsystem used for Java applications."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:181
msgid "* Keyboard input (keyboardHandler.py): Supports entering commands from the keyboard."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:182
msgid "* Logging facility (logHandler.py): Allows a module to write logs to be viewed by a developer or a user via Log Viewer. It includes the following class:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:183
msgid "\t* `logHandler.Log`: The class which implements logging facility."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:184
msgid "* Math content presentation (MathPress packages): allows NVDA to recognize and interact with various math content and markup. NvDA ships with MathML support package and support for Math Player is included in 2015.2 or later."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:185
msgid "* Mouse support (mouseHandler.py): Supports mouse commands."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:186
msgid "* NVDA objects collection (NVDAObjects): A collection of NVDA objects or controls used in many applications and standards such as UIA (User Interface Automation). Some objects require special actions to be performed, and these are specified in behaviors module in NvDA objects package. Some of the common ones include:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:187
msgid "\t* `NVDAObjects.NVDAObject`: the base class for NVDA objects that define events, properties and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:188
msgid "\t* `NVDAObjects.IAccessible`: a collection of MSAA/IAccessible objects, such as working with SysListView32 list views and others."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:189
msgid "\t* `NVDAObjects.JAB`: a collection of classes used when interfacing with Java applications and Java Access Bridge."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:190
msgid "\t* `NVDAObjects.UIA`: various classes for objects powered by UI Automation. Since 2016, it is also the home of a collection of controls used in Microsoft Edge and objects powered by EdgeHTML rendering engine."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:191
msgid "\t* `NVDAObjects.Window`: generic windows and other custom objects such as those found in Microsoft Excel."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:192
msgid "\t* `NVDAObjects.behaviors`: a collection of behaviors for specific controls, such as edit fields with or without selection detection, terminals, tool tips, help balloons, a way to simulate table commands in various controls and others."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:193
msgid "* Review facility (review.py): assists with working with review cursor."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:194
msgid "* Scripts support (scriptHandler.py): Handles scripts, methods executed due to the user pressing keyboard commands and other input."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:195
msgid "* Speech output (speech.py): Controls speech output."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:196
msgid "* Synthesizer driver support (synthDriverHandler.py): This is the core module needed for speech synthesizer add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:197
msgid "* Widget text access (textInfos): Allows access to text for widget and documents."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:198
msgid "* Touchscreen support (touchHandler.py): Provides support for touchscreen input (installed versions only)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:199
msgid "* Tone output (tones.py): Allows the user to hear tones. The following function is defined:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:200
msgid "\t* `tones.beep(pitch in hertz, duration in milliseconds, left channel volume, right channel volume)`: Plays a tone of specified pitch for specified duration. The first two arguments are mandatory, while the other two are optional."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:201
msgid "* User interface messages (ui.py): Includes various functions for speech and/or braille output, including:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:202
msgid "\t* `ui.message(message to be spoken/brailled)`: Speaks or brailles the message. This should be a string surrounded by quotes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:203
msgid "\t* `ui.browsableMessage(message to be shown, HTML or not)`: displays some text on a web browser window. If you want to use HTML markup, set isHTML argument to True."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:204
msgid "* UIA support (UIAHandler.py, UIA objects): Used for supporting UIA (User Interface Automation) controls (Windows 7 and later)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:205
msgid "* Virtual buffers (virtualBuffers): Handles virtual buffer documents such as web sites."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:206
msgid "* Windows API wrappers: the following modules are thin wrappers around Windows API libraries. You can use the below modules or call Windows API directly via ctypes.windll.dllname (e.g. ctypes.windll.user32):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:207
msgid "\t* `winKernel`: Wraps some constants, structures and functions from kernel32.dll that are commonly encountered in NVDA."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:208
msgid "\t* `winUser`: wraps around constants, structures and functions defined in user32.dll that are used by NVDA."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:209
msgid "The modules without .py extension are directories, containing specialist modules. There are other useful methods out there in addition to the list above, but the above are the most useful ones. See the NVDA source code documentation for other methods, or see the examples below on how these methods and others are used throughout the life of an add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:210
msgid "### Example 1: am I on the right app where the focus is located?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:211
msgid "The below code checks whether the navigator object is located somewhere on the same app or not."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:212
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:285
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:568
msgid "\timport api"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:213
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:222
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:228
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:351
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:569
msgid "\timport ui"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:215
msgid "\tdef sameApp(obj=None):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:216
msgid "\t\tif obj is None:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:217
msgid "\t\t\tobj = api.getNavigatorObject()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:218
msgid "\t\treturn api.getFocusObject().appModule == obj.appModule"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:219
msgid "The `api.getNavigatorObject()` function returns the current navigator object, the object you are interested in as opposed to focused object. Each NVDA object includes `appModule` member which records on which app an object is located."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:220
msgid "### Example 2: Display a message on a browse mode document"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:221
msgid "In NVDA 2015.2 and later, it became possible to display a message on a browse mode window so people can use browse mode commands to review the message content. The below code displays \"Hello world\" on a document window."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:224
msgid "\tui.browsableMessage(\"Hello World!\", isHtml=False)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:225
msgid "The isHtml flag tells NVDA to treat the message as an HTML text."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:226
msgid "### Example 3: Announce the automation ID of a UIA object"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:227
msgid "In UI Automation, automation ID is used to identify different screen elements. The following code displays this information on a browsable window."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:229
msgid "\tfrom NVDAObjects.UIA import UIA"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:231
msgid "\tdef announceUIAId():"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:232
msgid "\t\tobj = api.getFocusObject()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:233
msgid "\t\tif isinstance(obj, UIA):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:234
msgid "\t\t\tUIAElement = obj.UIAElement"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:235
msgid "\t\t\tui.browsableMessage(UIAElement.cachedAutomationId, isHtml=True)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:236
msgid "### Example 4: Send keystrokes"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:237
msgid "You can ask NvDA to send specific keystrokes by instantiating a keyboard gesture object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:238
msgid "\timport keyboardHandler"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:240
msgid "\tdef sendApplicationsKey():"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:241
msgid "\t\tkeyboardHandler.KeyboardInputGesture.fromName(\"kb:applications\").send()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:242
msgid "### Example 5: Stop speech whenever screen content changes if dynamic content change announcement is off"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:243
msgid "The below code is a handler for a name change event that stops speech whenever screen content changes if dynamic content change announcement is off."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:245
msgid "\timport config"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:246
msgid "\timport speech"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:250
msgid "\t\tdef event_nameChange(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:251
msgid "\t\t\tif not config.conf[\"presentation\"][\"reportDynamicContentChanges\"]:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:252
msgid "\t\t\t\tspeech.cancelSpeech()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:253
msgid "This is just a sample of what various NVDA modules and functions can do in your add-on. We'll tour add-on components and meet more functions throughout this guide."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:254
msgid "## Add-on module components and development tips"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:255
msgid "An add-on module consists of a number of components. This includes handling input and output, working with different NVDA objects, reacting to events, storing configuration and more."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:256
msgid "This chapter introduces key components and concepts that are used in add-on development, such as NVDA objects, scripts, event handling and additional topics with examples."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:257
msgid "Note that the NVDA core development guide introduces the below concepts. This chapter is intended as an extension of that document. Consult the NVDA development guide for a brief introductions."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:258
msgid "Note for scripters of other screen readers: you might be familiar with some of the concepts introduced in this section. Please read this section if you want a better understanding of how some of them are used in NVDA."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:259
msgid "### Working with objects on screen"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:260
msgid "An object is an instance of a class - that is, a class coming to life while a program is running. For example, if a class called button has been defined, the button on a screen is the object of this button class."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:261
msgid "In NVDA, an object is representation of a control or parts of a program. This includes buttons, check boxes, edit fields, toolbars, sliders and even the application window. These are organized into hierarchies, or parent-child relationship where an object may contain child objects - for example, a list object in Windows Explorer may contain one or more list items, and the parent of this list might be the Windows Explorer window. The object that you're examining right now is termed \"navigator object.\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:262
msgid "The NVDA objects (or simply called objects) contains a number of useful properties or atributes. These include the object's name, its value (checked, text of the edit window, etc.), role (check box, window, embedded object, etc., location (screen coordinates) and more. NVDA objects also contain useful methods for manipulating them, such as changing the value of the object, reacting to events for the object (gains focus, value has changed, etc.) and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:263
msgid "In many situations, an NVDA object may belong to a class of related objects. For each object classes, NVDA provides ways of handling them. These classes include IAccessible, JAB, UIA and so forth. These classes and behaviors for each class of objects is defined in NVDAObjects directory in the NVDA source code, and to use them in your add-on, import the appropriate object class handler for the object you're using (e.g. if you're working with an IAccessible object, import NVDAObjects.IAccessible.)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:264
msgid "Two of these object classes merit special mention: virtual buffers and tree interceptors. A tree interceptor allows NVDA to work with a \"tree\" of objects as though they are just one object. A special case of tree interceptor is virtual buffer, which allows NVDA to work with complex documents such as PDF documents. These objects contain a special mechanism to determine whether a given keyboard command will be passed to the application or handled by NVDA (for instance, browse mode where first letter navigation is used to move between elements)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:265
msgid "### Examining object hierarchy"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:266
msgid "There are a number of ways which you can use to see the hierarchy of an object for a given program:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:267
msgid "1. Using object navigation commands (NVDA+Numpad 2/4/5/6/8) with simple review mode turned off."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:268
msgid "2. Using Python Console, use obj.next/previous/parent/firstChild/lastChild attributes. If you want to see all available properties, from Python Console, type dir(obj)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:269
msgid "If you wish to see a more detailed description about the navigator object, while the navigator object is located at the object you're interested in, press NVDA+F1 to launch log viewer and examine the developer info shown. The root of all objects in Windows is the desktop, or shell object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:270
msgid "### Focus vs. navigator object"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:271
msgid "In your add-on, you might wish to work with various objects and manipulate them. These may include changing the focused object, synchronizing navigator and focus objects, changing the role of an object and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:272
msgid "A focus object is the currently focused control. These are linked to keyboard focus - that is, it follows the highlighted control. In contrast, a navigator object is the object you're interested in. Since navigator objects can move anywhere, you can examine two objects at once: the focused object and the navigator object. For instance, you might be focused on an edit field while examining the title bar as the navigator object. We already saw an example above where we can check if we're on two different apps by checking for app modules for focus versus navigator object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:273
msgid "In your add-on, to fetch the object with focus, write `someObj = api.getFocusObject()`. The someObj can be named differently - the convention is to use the name \"obj\". To fetch the navigator object (which might be different from the focused object), use `obj = api.getNavigatorObject()`."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:274
msgid "### Other useful object-related goodies"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:275
msgid "Here are some other methods which works with NVDA objects, all located in api.py module:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:276
msgid "* If you wish to obtain the foreground object (useful if you wish to look at some child object of the foreground window), use `obj = api.getForegroundObject()`. The name of the foreground object, usually the top-level window of an application is treated as a title by NVDA and can be obtained by pressing NVDA+T."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:277
msgid "* From Python Console, to see the number of child objects that an object contains (for instance, the children, or widgets of a foreground window), type `obj.childCount`. The value 0 means that there are no more child objects."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:278
msgid "* To set some object as the new focus or navigator object, use `api.setFocusObject(obj)` or `api.setNavigatorObject(obj)`. These do not change what Windows views as focused object, as these change what NVDA thinks is the focus and navigator object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:279
msgid "* You can fetch various properties of an object by specifying obj.property where property is the attribute you wish to see (e.g. obj.value). Common properties include name, value, states, role, app module, window class name and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:280
msgid "### Example 1: Finding the value of a slider in a program"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:281
msgid "Suppose you are asked by a user to give him the value of a slider in a program using an app module. After looking at the object hierarchy and other properties, you know that the toolbar is the last child of the foreground object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:282
msgid "Here is the code to implement this feature:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:283
msgid "\t# Object example 1"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:290
msgid "\t\tsliderChildIndex = -1 # The variable to store the child index."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:292
msgid "\t\tdef getSliderValue(self):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:293
msgid "\t\t\tfg = api.getForegroundObject()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:294
msgid "\t\t\tsliderVal = fg.children[self.sliderChildIndex].value"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:295
msgid "\t\t\treturn sliderVal"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:296
msgid "In this code, the method `fg.children[index]` is used to retrieve the child with the given index (here, since we said the toolbar is the last child, the index would be minus 1, or the very last child; we could have used fg.lastChild). Alternatively, you can use `fg.getChild(-1) in certain situations (IAccessible, for example).)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:297
msgid "However, this code has an issue: what if the slider value is actually within the first child of the actual slider control? One way to fix this is to check the object's role. The modified code looks like this:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:298
msgid "\tdef getSliderValue(self):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:299
msgid "\t\tfrom controltypes import ROLE_SLIDER # It is possible to import from within a method."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:300
msgid "\t\tfg = api.getForegroundObject()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:301
msgid "\t\tslider = fg.lastChild"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:302
msgid "\t\tif slider.role == ROLE_SLIDER: return slider.firstChild.value"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:303
msgid "Thus, when we know for sure that we're dealing with the slider, the method returns the value of the slider's first child (if that is the case). Note the two equals signs for equality, as opposed to just one equals sign for assignment."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:304
msgid "There are other examples you can try to familiarize yourself with object navigation and manipulation:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:305
msgid "* Obtaining the name of an object that is located somewhere else in the program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:306
msgid "* Moving the navigator to the foreground object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:307
msgid "* Setting focus to another program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:308
msgid "* Locating the first status bar in a program with multiple status bars."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:309
msgid "For real-life examples on objects in NVDA, consult the NVDA source code or source codes of various community add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:310
msgid "### Specialist objects and overriding object properties at runtime"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:311
msgid "Sometimes, it is not enough to work with default behavior for a control. For example, some parts of a program may need custom gestures, or one may need to change the role of a window to that of a button."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:312
msgid "NVDA provides two methods for creating or manipulating specialist, or overlay objects (or classes), each suited for different needs:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:313
msgid "* `event_NVDAObject_init(self, object we're dealing with)`: If you wish to override certain attributes of a control such as its role or label (name), you can use this method to ask NVDA to take your \"input\" into account when meeting objects for the first time (or initialized). For instance, if the control has the window class name of TForm (seen on many Delphi applications), you can ask NVDA to treat this control as a standard window by assigning obj.role = ROLE_WINDOW (see control types dictionary for list of available roles)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:314
msgid "* `chooseNVDAObjectOverlayClasses(self, object, list of classes)`: This allows NVDA to use your own logic when dealing with certain objects. For example, this is useful if you wish to assign custom gestures for certain parts of a program in your app module (in fact, many app modules creates objects to deal with certain parts of a program, then uses chooseNVDAObjectOverlayClasses to select the correct object when certain conditions are met). These custom objects must be based on a solid object that we wish to deal with (mostly IAccessible is enough, thus most overlay objects inherit from, or is the child or specialist class of IAccessible objects). In certain situations, you can use this method to drop a property from an object, such as telling NVDA to not treat this object as a progress bar by removing progress bar behavior from this object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:315
msgid "Note that in case of the second method, the class(s) with the given name must be present in the file, which is/are inherited from a known base object (in Python, the syntax for the inheritence is `childClass(baseClass)`, and is usually read as, \"this child class inherits from this base class\". We'll see code like this later)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:316
msgid "### Examples of overlay classes and modified roles"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:317
msgid "Below examples illustrate the uses of the two overlay and attribute modification methods we've discussed above:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:318
msgid "An example of the first case: modifying an atribute."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:319
msgid "\t# Reassign some Delphi forms as window."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:320
msgid "\tfrom controlTypes import ROLE_WINDOW"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:321
msgid "\tdef event_NVDAObject_init(self, obj):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:322
msgid "\t\tif obj.windowClassName == \"TForm\": obj.role = ROLE_WINDOW"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:323
msgid "This means that whenever we encounter a window with the class name of \"TForm\", NVDA will treat this as a normal window."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:324
msgid "Example 2 deals with an app module which has two objects for dealing with specific parts of a program, then uses chooseNVDAObjectOverlayClasses to assign the logic for each control."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:325
msgid "\t#An example of overlay classes"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:327
msgid "\tclass enhancedEdit(IAccessible):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:328
msgid "\t\t# Some code to be run when window class name is MyEdit."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:330
msgid "\tclass MainWindow(IAccessible):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:331
msgid "\t\t# Another code, this time adding custom gestures for main window of the program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:333
msgid "\t# In the app module:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:335
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:378
msgid "\tdef chooseNVDAObjectOverlayClasses(self, obj, clsList):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:336
msgid "\t\tif obj.windowClassName == \"myEdit\": clsList.insert(0, enhancedEdit)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:337
msgid "\t\telif obj.windowClassName == \"TWindow\": clsList.insert(0, mainWindow)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:338
msgid "In both cases, the object that we wish to check must be inserted as the first element of the clsList. The effect is that these custom objects will take precedence when looking up gestures or code (behavior) for the object, and in the developer info, these custom objects will come first when MRO (Method Resolution Order) for the navigator object is displayed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:339
msgid "Note: You may need to tune these two methods to provide correct overlay classes for very specific controls (such as checking names, specific roles, etc.), otherwise you may find that two or more identical-looking controls are assigned to your custom object when in fact they are very different. Also, the event_NVDAObject_init is only available in app modules."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:340
msgid "### Input and output: scripts and UI messages"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:341
msgid "Another crucial component of add-ons is handling commands from users and displaying what the add-on is doing. These are done via scripts (input) and UI messages (output)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:342
msgid "A script is a method run when the user performs certain commands. For example, when you press NVDA+T, NVDA runs a script in global commands module called SayTitle. In Poedit, for instance, when a translator presses Control+Shift+A, NVDA will read translator comments added by the programmer to help clarify a given translatable string. this command is not a native NVDA command, but it is defined in the Poedit app module to perform this function."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:343
msgid "Typically, an add-on which accepts scripts will have a list of command:function map somewhere in the module. The simplest is a gestures (commands) dictionary, a python dictionary (typically named __gestures) which holds commands as keys and scripts as values for these keys (more than one key, or command can be bound to scripts). These dictionaries are loaded when add-on loads and is cleared when either NVDA exits or the app for the app module loses focus (that is, the user has switched to another program)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:344
msgid "Another way to bind scripts is via runtime insertion. This is done by creating another gestures dictionary apart from __gestures dictionary which holds context-sensitive gestures such as manipulating a single control. Then the developer would use inputCore.bindGesture (or inputCore.bindGestures if more than one gestures/scripts are defined) to define certain gestures for a time, then using inputCore.clearGestures then inputCore.bindGestures(__gestures) to remove the added gestures. A more elegant way, which involves scripts for specific objects, will be covered when we talk about app modules and assigning gestures to specific parts of a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:345
msgid "For most scripts, you don't have to worry about sending the command to the application. However, in case the script performs additional tasks while sending the key to the active application, you can use `gesture.send()` to send the command first before performing additional work."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:346
msgid "In a similar manner to scripts, the UI module allows you to say or braille what your add-on is doing. This is done by using `ui.message(something to say)` where `something to say` is replaced by a string for NVDA to say. Alternativley, you can call speech and braille handler methods directly if you want speech to say one thing and the braille display to show something else. We'll not go over `ui.message` here (you'll see examples of those), but what's more important is scripts, so we'll focus on that in this section."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:347
msgid "As of time of writing, NVDA supports input from the keyboard, braille displays with or without braille keyboard and touchscreens. These input types have a corresponding gesture prefix (kb for keyboard, br for braille and ts for touchscreen) which identifies the type of gesture. Output can be sent via speech and/or braille."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:348
msgid "### Example 2: A basic script dictionary and message output"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:349
msgid "In this example, we'll define two scripts called \"sayHello\" and say\"GoodBye\", then bind them into two separate gestures."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:350
msgid "\t# An example fragment for script assignment from a global plugin."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:353
msgid "\tdef script_sayHello(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:354
msgid "\t\tui.message\"Hello!\")"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:356
msgid "\tdef script_sayGoodBye(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:357
msgid "\t\tui.message(\"Good Bye!\")"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:359
msgid "\t__gestures={"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:360
msgid "\t\t\"kb:control+NVDA+1\":\"sayHello\","
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:361
msgid "\t\t\"kb:Control+NVDA+2\":\"sayGoodBye\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:362
msgid "\t}"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:363
msgid "Now when you press Control+NVDA+1, NVDA will say, \"Hello\", and when you press Control+NVDA+2, NVDA will say, \"Good bye.\" This is the basic code on receiving commands and sending messages."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:364
msgid "### Example 3: Scripts for specific objects"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:365
msgid "As in specialist objects above, scripts can be assigned to certain objects by specifying gestures dictionary for this particular object. Here is an example from an app module which defines scripts for main window of a media player program:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:366
msgid "\t# Scripts for objects for a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:367
msgid "\tfrom NVDAObjects.IAccessible import IAccessible"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:369
msgid "\tclass Player(IAccessible)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:370
msgid "\t\tdef script_saySongName(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:371
msgid "\t\t\tui.message(self.songTitle_) #Suppose if that variable has been defined."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:374
msgid "\t\t\t\"kb:NVDA+T\":\"saySongTitle\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:377
msgid "\t# And in the main app module:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:379
msgid "\t\tif obj.windowClassName == \"PlayerWindow\": clsList.insert(0, Player)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:380
msgid "There is something odd going on with this example: normally, when you press NVDA+T, NVDA says the title of the current window, but in this example, it announces the name of the song instead. This is the result of script lookup (see below) where the script for the current object is run instead of title script from global commands. This is a common way of binding new scripts at runtime."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:381
msgid "### Script lookup order and command conflicts"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:382
msgid "As your write add-ons with scripts, you need to remember the following script lookup order when trying to assign commands to scripts:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:383
msgid "1. Global plugins."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:384
msgid "2. App modules for the currently focused program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:385
msgid "3. NVDA objects we're dealing with."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:386
msgid "4. Global commands."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:387
msgid "For example, if you assign the command NVDA+Shift+Y to an app module script, NVDA will run that script from that program since no global plugin is using this command. However, if a global plugin which uses that command is installed, the script from the global plugin will be run instead of the app module script. Similarly, from the above example, when using programs other than that media player, NVDA will run a command from the global commands collection when NVDA+T is pressed; but as long as we're using this media player, NVDA+T will announce the name of the song (NVDA objects in app modules takes precedence)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:388
msgid "Because of the above rule, one should be careful when defining a script for an add-on. To help you with this, keep the following guidelines handy:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:389
msgid "1. First, consult the NVDA commands quick reference to see if the command you wish to use has been defined in global commands. You should try to minimize conflicts with built-in NVDA commands. An exception is commands for app modules where same command may be used differently from one program to another."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:390
msgid "2. Read the documentation for add-ons (especially global plugins) to see if any add-on is using this command, and if so, contact the add-on author to come up with an alternate binding."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:391
msgid "### Few other remarks on scripts"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:392
msgid "* You can use any modifiers as parts of commands for scripts (for example, Alt+NVDA+letter). However, in order to avoid command conflicts, try minimizing use of commands that programs might use such as Control+letter, Alt+Shift+letter and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:393
msgid "* When assigning keyboard commands, keyboard key labels are case insensitive."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:394
msgid "* You can define a script category to show the user where your add-on script will be used (shown in Input Gestures dialog in NVDA 2013.3 or later). There are two ways of doing this: module level via `scriptCategory` attribute from the add-on module, or designating the category for each script via `script_name.category` attribute. It is recommended that you name your script category the same as the add-on name."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:395
msgid "* You can define the input help mode message for a script by using `__doc__` attribute (commonly known as docstrings). The __doc__ attribute is also used in Input Gestures dialog to show the description for a script."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:396
msgid "* If you need to leave one or more scripts unassigned (for example, if a gesture conflicts with a global command), do not include the gesture binding for the script in the gestures dictionary. This helps minimize gesture conflicts and allows users to assign custom gestures for scripts."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:397
msgid "* If there are two objects, A and B and if B inherits from A and both contain same command for a script, you can assign \"None\" to script name in object B (subclass) to bypass a command when dealing with commands from object B. For example, if F10 is defined for both objects and F10 is not used in object B, you can assign object B's F10 command to \"None\" so F10 can be sent to the operating system. This is implemented in some NVDA core modules and in StationPlaylist Studio add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:398
msgid "### Events"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:399
msgid "You can ask NVDA to do something if something happens. For example, you can ask NVDA to say the new name for an object when it's name changes, or say the new item's value when the item gets focused. These conditions, or actions are called events."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:400
msgid "When an event occurs, NVDA does the following:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:401
msgid "1. Finds out what the event was (for example, a check box gains focus)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:402
msgid "2. Performs actions for the event (e.g. says the name and the checked state of this check box)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:403
msgid "3. Passes the event down the chain in case other objects may have actions associated with the event."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:404
msgid "Depending on where the event is defined, you'll need two or four things when defining an event. If it is declared from the add-on module, the required parts are event name, the add-on module (self), object and next handler in case the object has other events associated with it. If it is defined as part of an object, the name of the event and the object (self) is required."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:405
msgid "A typical event routine looks like this:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:406
msgid "\tdef event_eventName(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:407
msgid "\t\t# Do some action."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:408
#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:418
msgid "\t\tnextHandler()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:409
msgid "For object events, use:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:410
msgid "\tdef event_eventName(self):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:411
msgid "\t\t# Event routine."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:412
msgid "In fact, we have met an actual \"event\" before: `event_NVDAObject-Init`. This is a special event (one of many events defined in NVDA) fired when NVDA meets a new object and initializes it according to your input (see the section on overriding object properties for more information). Let's meet other events you may see while wriring your add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:413
msgid "### Example 4: Announcing the changed name of a control"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:414
msgid "The below code came from one of the add-on app modules."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:415
msgid "Below is a routine for an event which tells you the name of some text on the screen when the text changes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:416
msgid "\tdef event_nameChange(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:417
msgid "\t\tif obj.windowClassName == \"TStaticText\": ui.message(obj.name)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:419
msgid "As you can see, whenever the text object's name changes, NVDA will announce the new name to the user. The \"name change\" event is one of the many events that you can define custom actions for in your add-on (the complete list is below)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:420
msgid "Note: You can define events for any object of your choice, especially controls in a program (where you can define custom actions for events in your app module). If this is the case, you need to make sure that the control meets certain conditions you set, such as name, role and so forth to let NVDA keep an \"eye\" on that specific object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:421
msgid "### List of possible events"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:422
msgid "This is a list of common events you may define custom actions for in your add-on:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:423
msgid "* gainFocus: The user has moved the focus to a specific control, or the user has just switched to a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:424
msgid "* loseFocus: Opposite of gainFocus."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:425
msgid "* nameChange: The name of a control has changed (see above for an example)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:426
msgid "* valueChange: The value of the control such as text of a field has changed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:427
msgid "* stateChange: Useful to keep track of whether check boxes, buttons and other control's state (checked, selected, etc.) has changed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:428
msgid "* foreground: the object we're interested in has become the foreground window of the program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:429
msgid "Less common events that are used in specific situations include:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:430
msgid "* typedCharacter: the user has entered something on a keyboard."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:431
msgid "* appModule_gainFocus: user has switched to the app where an app module is defined. Common uses include adding touchscreen commands for specific apps, announcing extra info about the current state of the app and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:432
msgid "* appModule_loseFocus: opposite of appModule_gainFocus."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:433
msgid "* descriptionChange: the description for a control provided by the accessibility API has changed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:434
msgid "* suggestionsOpened: used in controls where one can type something and suggestions will be shown based on entered text. The default implementation in NVDA plays a sound to indicate appearance of suggestions."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:435
msgid "* suggestionsClosed: opposite of suggestionsOpened. The suggestions events requires NVDA 2017.3 and the object must inherit from `NVDAObjects.behaviors.EditableTextWithSuggestions` class."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:436
msgid "### Events within objects"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:437
msgid "The above section described event routines from an add-on's perspective. This is just one way of defining events. The other way is to define events from within objects, and is same as above except that it only takes one argument (self)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:438
msgid "### Other components"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:439
msgid "Besides objects, scripts and events, you can add other components in your add-on for working with specific controls. For example, you can use a textInfo module (such as NVDAObjects.NVDAObjectTextInfo) for working with text and text offsets in edit fields and other controls, or use external modules from third-party developers for specialized tasks such as windows registry access (_winreg) and others. You can also use Python's built-in modules (such as time, functools, etc.) for advanced operations."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:440
msgid "One notable component is text infos, a way to let add-ons gain access to text located on objects. You can access text, move around in it (such as via lines and words), and manipulate portions via marking ranges and offsets. For most add-ons, it isn't required to define custom text infos, as the underlying accessibility API will provide suitable information."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:441
msgid "Another useful component is mathematical text presentation library (mathPres). This is used to allow NVDA to access math content in places such as web browsers, as well as for add-ons to define custom math presentation layers and ways to access math content in various applications. So far, math content retrieval is done on text marked with MathML with MathPlayer installed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:442
msgid "If you wish to store settings for your add-on, use ConfigObj or NVDA's built-in configuration manager to store configuration files and settings. ConfigObj defines settings as a collection of dictionaries that can be updated in real time. You can also pass in validation map to allow NVDA's configuration manager (config.conf)to validate settings for your add-on and let add-on settings become profile-specific settings."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:443
msgid "Finally, you can ask NVDA to perform some routines while the add-on is loading or being terminated. This is done by defining `__init__` and `terminate` method for the add-on. Depending on the plugin type, use:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:444
msgid "* For global plugin:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:445
msgid "\tdef __init__(self):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:446
msgid "\t\tsuper(GlobalPlugin, self).__init__()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:447
msgid "\t\t# The routine to do when the global plugin loads."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:448
msgid "\t\t# Warning! You should always call super method first in order to initialize various foundations correctly."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:449
msgid "* For app modules:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:450
msgid "\tdef __init__(self, *args, **kwargs):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:451
msgid "\t\tsuper(AppModule, self).__init__(*args, **kwargs)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:452
msgid "\t\t# What NvDA should do when the app module loads."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:453
msgid "* For terminating, regardless of the add-on type:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:454
msgid "\tdef terminate(self):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:455
msgid "\t\t# Do something when the add-on terminates."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:456
msgid "\t\t# Warning! Never initialize ANY core module such as GUI in terminate method as doing so will prevent NVDA from exiting properly."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:457
msgid "### Let's build an add-on"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:458
msgid "Now we have a basic overview of components of add-ons, we're ready to build some simple add-ons. But first, let's go over the actual add-on development process, debugging tips, do's and don'ts and other tips."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:459
msgid "### Add-on planning and development tips"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:460
msgid "Over the years, the NVDA community built a number of powerful add-ons for NVDA users. Over the course of these years, the add-on writers gathered some useful tips when it comes to writing your own add-ons. Here are a number of them:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:461
msgid "* Get to know NVDA: it is important that you become familiar with NVDA commands, concepts and tips. Subscribe to NVDA users groups to learn more about NVDA and learn about how NVDA works, as you'll be extending it via your add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:462
msgid "* Get to know the product at hand: as noted earlier, it is important that you get to know the software you're writing the app module for, synthesizers and braille displays you'll be writing the driver for and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:463
msgid "* Plan ahead: if you know you'll be maintaining your add-on for a number of months or years, it is useful to have a plan and write the add-on code to prepare for future extensions. For example, working on features that you need to implement now, dividing parts of a program to objects and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:464
msgid "* Ready to debug and test your add-on: writing your add-on code is just one part of the overall add-on development. The other part is testing and debugging your add-on to make sure that users use your add-on with minimal errors. As you write your add-ons, be sure to test your code regularly."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:465
msgid "* Most importantly, have fun."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:466
msgid "### Do's and don'ts"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:467
msgid "Here are a few things you should do and not do throughout add-on development:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:468
msgid "1. Do talk with users: it is important to remember that your add-ons will be used by NVDA users around the world, so it is important to keep in touch with your users to gather bug reports and suggestions."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:469
msgid "2. Do ask for help if needed: If you're stuck, you can ask other add-on writers anytime for solutions or tips, or if you need to, ask for colaboration from other add-on developers."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:470
msgid "3. Do test your add-on on more than one computer: sometimes, a bug in one computer may help you solve problems on your add-on on your computer later."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:471
msgid "4. Don't use fancy code without understanding your intentions: a typo or forgotten indentation can become troublesome when you debug an add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:472
msgid "5. Do keep up to date with NVDA core changes: sometimes, you may find that your add-on might not work due to NVDA core code changes. Be sure to read \"changes for developers\" section in NVDA's What's New document to keep up to date with code changes that may affect your add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:473
msgid "### Frequently Asked Questions about add-on components and development"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:474
msgid "Q. When I try to obtain an object using an index, it fetches an object one after the index I wrote.  "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:475
msgid "This is the side effect of zero-based indexing (count starts at 0)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:476
msgid "Q. When importing a module, NVDA says it cannot locate the module.  "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:477
msgid "Did you type the correct name of the module? Did you extract the module files in the correct location? Try fixing the typo, look at the import path and try importing again."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:478
msgid "Q. What is difference between simple review and normal review and which one should I use?  "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:479
msgid "Simple review excludes layout objects such as windows, grouping and so on which are placed for layout purposes. Normal review includes these as well. The choice of using simple review versus normal review depends on your situation."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:480
msgid "Q. The command for my app module does not work in my app module; instead, NVDA does something else.  "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:481
msgid "Check if a global plugin which uses the command is installed. First, remove the global plugin and try again."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:482
msgid "Q. How can I use Win32 API in my add-on or object?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:483
msgid "There is a document written by an add-on developer which talks about using Win32 API in your add-on. Select [this link][4] to view this document."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:484
msgid "Q. How can I create dialogs in my add-on?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:485
msgid "You need to import two modules: GUI (import gui) and WXPython (import wx)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:486
msgid "Q. Can I create functions and assign variables outside the module classes?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:487
msgid "Yes. This is useful if you need to reference them from inside the add-on class. For example, you may have a function that's defined outside your class that you'll need to use from more than one method in a global plugin class."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:488
msgid "Q. I want to save user settings for my add-on. Can this be done?"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:489
msgid "Yes. You'll need to use ConfigObj library (configObj) to manage configuration. Some add-ons (such as OCR) which uses configuration files store their configuration as an ini file in NVDA's user configuration folder. For global plugins, you can load and save user configuration from the add-on when the add-on is created (__init__) or finished (terminate), respectively. You cannot do this easily with app modules. Also, you'll need to provide a facility (commands, dialogs, etc.) where users can configure add-on settings."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:490
msgid "Q. I have a script which calls a function that runs for a long time, and I cannot run NVDA commands when my script runs."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:491
msgid "One way to fix this is using threads (separate, independent  operations in a program) via Python's threading module. In order to do this, create a method which you know will run for a long time, then from the script which calls this method, create a new thread (see Python's threading module documentation) that'll be in charge of running this method. This way other NVDA commands can be performed while the add-on method does its work (see Google Speech Recognition module for an example code)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:492
msgid "Q. I would like to port a module written in Python 3 syntax for use as an NVDA add-on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:493
msgid "This cannot be done easily. One handy module for this purpose is six, which allows running Python 2 and 3 code. NvDA itself uses Python 2 as WXPython uses Python 2, and until WXPython is rewritten to support Python 3, you cannot run Python 3 code in NVDA."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:494
msgid "We did not include programming or Python-related FAQ's, as there are sites which answers questions about Python such as coding style. Consult these documents if you have issues with Python code."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:495
msgid "Now that we have covered basic add-on components, let's learn about how to package what you know in your add-on modules themselves: global plugins, app modules and drivers."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:496
msgid "## Introduction to global plugins"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:497
msgid "A global plugin adds features available everywhere. For example, if there is a control that will be used in many applications, then you can write a global plugin to handle them throughout NVDA. Another example is adding additional features to NVDA that can be used in all programs, such as OCR capability, place marker management and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:498
msgid "A global plugin is a Python source code (.py) file with the name of your plugin. For example, if you're adding support for rich edit fields in many applications, you can name your plugin as richEditSupport.py. When naming them, try be brief so you can see what your plugin does."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:499
msgid "### Typical development plan for global plugins"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:500
msgid "Typically, a global plugin is developed thus:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:501
msgid "1. You or someone suggests a feature or support for a particular control across different programs."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:502
msgid "2. You plan your global plugin (see the section on when to write or not write global plugins)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:503
msgid "3. You write your global plugin and test it. Once it is done and tested, you release the plugin."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:504
msgid "Since global plugins are Python files, you can use the full power of python in your add-on code. Also, since global plugins have access to full power of NVDA code such as events, scripts and objects, you can use the concepts you learned from previous sections."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:505
msgid "### The global plugin code"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:506
msgid "As shown earlier, the procedure for writing global plugins is same as writing any Python program, except that you import globalPluginHandler and put your add-on code in a class called `GlobalPlugin` which inherits from `globalPluginHandler.GlobalPlugin` (see the example in the firse intro chapter). If you need to use third-party modules, you need to place the package in the same folder as the global plugin file and import the external module(s). Then define objects (usually overlay objects), methods and so on in your code."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:507
msgid "### When to write or not write global plugins"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:508
msgid "Since global plugins are used everywhere, you might be tempted to write support for a single application using global plugin alone. However, this is not the case. There are other guidelines to keep in mind when deciding whether to write a global plugin or not:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:509
msgid "You might consider writing a global plugin if:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:510
msgid "1. You or a user wishes to use a certain feature everywhere."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:511
msgid "2. You need to support same controls across different applications, provided that the control behaves the same in these programs."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:512
msgid "You should not write a global plugin if:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:513
msgid "1. If you wish to enhance support for a single application."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:514
msgid "2. You are writing support for speech synthesizers or braille displays."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:515
msgid "### Few more things to remember about global plugins"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:516
msgid "* When you write scripts in your global plugin, the commands you assign to them will take precedence (looked up first). Therefore it is important to consult the NVDA user guide and help for other add-ons to minimize command conflicts."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:517
msgid "* Each global plugin must be placed in globalPlugins directory in your add-on folder structure."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:518
msgid "* It is possible to use more than one Python file in your global plugin. If this is the case, you need to put them in a folder (name must be the name of the plugin) inside globalPlugins folder, with the main plugin file named __init__.py."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:519
msgid "* If you need to do something when the global plugin is loaded (such as loading the user configuration), you need to write an __init__ method in your plugin class. In this method, you need to call the __init__ method in the super (globalPluginHandler.GlobalPlugin) first before doing other startup work. Also, if you need to do something when the global plugin ends, define terminate method."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:520
msgid "Let's go through some examples and exercises."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:521
msgid "### Example 1: Writing computer braille using QWERTY keyboard"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:522
msgid "You are meeting with a client who uses Duxbury braille translator (a popular braille document production program). This client is working with another user of NVDA who wishes to write computer braille from his computer keyboard everywhere. Based on this, you decide to write a global plugin, and found a module that allows the computer keyboard to act like a braille keyboard using a function."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:523
msgid "The global plugin, named brailleWrite.py, would look like this:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:524
msgid "\t# An example global plugin."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:526
msgid "\timport qtbrl # The braille entry module."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:530
msgid "\t\tbrlentry = False # Braille entry is not active."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:532
msgid "\t\tdef script_toggleBrailleEntry(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:533
msgid "\t\t\tself.brlentry = True if not self.brlentry else False # Toggle braille entry mode."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:534
msgid "\t\tscript_toggleBrailleEntry.__doc__=\"Toggles braille entry on or off.\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:536
msgid "\t\t\t\"kb:NVDA+X\":\"toggleBrailleEntry\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:538
msgid "With this background in mind, try some of the short exercises below."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:539
msgid "### Exercises"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:540
msgid "1. Write a global plugin named nvdaVersion.py to say the current NVDA version when NVDA+Shift+V is pressed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:541
msgid "2. A user wants to hear the time announced every minute. Using the clock on the system tray, write a global plugin to announce when the time changes (hint: you need to use an event and check the role of the clock object)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:542
msgid "## Introduction to app modules"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:543
msgid "An app module enhances support for a particular program. For example, you can write an app module which adds convenience commands for reading various parts of the screen, or you can define how a particular control should behave in a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:544
msgid "An app module is a Python (.py) file with the name corresponding to the executable name of a program. For example, an app module for Winamp is named winamp.py since Winamp's executable name is winamp.exe."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:545
msgid "NVDA itself comes with several app modules, such as Winamp, Adobe Reader, Microsoft Office programs and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:546
msgid "### Differences between app modules and global plugins"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:547
msgid "At first glance, app modules may look the same as any global plugin. However, app modules have additional properties that global plugins lack, including:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:548
msgid "* Instead of `globalPluginHandler`, you need to import `appModuleHandler`. The class to implement is `AppModule(appModuleHandler.AppModule)`."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:549
msgid "* App modules are stored in appModules folder in your add-on directory structure and is named the same as the executable name of the program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:550
msgid "* You can ask NVDA to enter sleep mode in a program where NVDA will not speak or braille anything while using the program, and any keyboard commands you press will be handled by the program directly. This is done by setting `sleepMode` attribute in the AppModule class to True."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:551
msgid "* The `event_NVDAObject_init` routine is only available in app modules."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:552
msgid "* You can ask NVDA to keep an eye on an object to handle events for them even if the user is using another app."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:553
msgid "### App module development process and strategies"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:554
msgid "A typical app module is developed thus:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:555
msgid "1. You or a user requests enhanced support for a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:556
msgid "2. If possible, contact the app vendor (programmer) to ask accessibility improvements for the program from their end."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:557
msgid "3. With or without cooperation from app vendor, you would examine how the program works and areas on the screen that needs to be read out."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:558
msgid "4. Write and test the app module (with users) until the app module is ready for release."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:559
msgid "As you write app modules, try these tips:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:560
msgid "1. Use objects to represent parts of a program. This is done in two steps: define the control for parts of a program via objects (inheriting from some object such as IAccessible), then use `chooseNVDAObjectOverlayClasses` routine to tell NVDA to work with your custom object when working with that control. See overlay classes section for tips."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:561
msgid "2. If possible, test your app module using two or more versions of the program to make sure your app module works with those versions."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:562
msgid "3. You should not incorporate all desired features in version 1.0 - leave some of them for a future release."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:563
msgid "### Example 2: Simple app module in Notepad"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:564
msgid "Suppose you wish to find out which line you're editing in Notepad. Assuming that Notepad will show status bar at all times, you wish to assign a key combination to read the current line number."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:565
msgid "The app module for Notepad would look like this:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:566
msgid "\t# The example app module for Notepad, notepad.py."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:572
msgid "\t\tdef script_sayLineNumber(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:573
msgid "\t\t\t# Suppose line number is in the form \"  ln 1\"."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:574
msgid "\t\t\tlineNumList = api.getStatusBar().name.split()"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:575
msgid "\t\t\tlineNum = lineNumLisst[2]+linenumList[3]"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:576
msgid "\t\t\tui.message(lineNum)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:579
msgid "\t\t\t\"kb:NVDA+S\":\"sayLineNumber\""
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:581
msgid "So whenever you run Notepad, when you press NVDA+S, NVDA will say line number."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:582
msgid "### Example 3: Silencing NVDA in Openbook"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:583
msgid "Openbook is a scanning and reading program from Freedom scientific. Since Openbook provides speech, you can tell NVDA to enter sleep mode while Openbook (openbook.exe) is running using the below app module:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:584
msgid "\t# Silencing NVDA in openbook, openbook.py."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:588
msgid "\t\tsleepMode = True"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:589
msgid "With that single line of code, NVDA will enter sleep mode in that program (you should do this only if the program provides speech and/or braille support on its own)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:590
msgid "### Example 4: Announcing control property changes while using another app"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:591
msgid "You can ask NVDA to handle specific events while focused on another app. This is done by calling eventHandler.requestEvents in app module's __init__ method. In order to invoke this, you need process ID (PID) for the application, window class name for the object and the name of the event to be handled."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:592
msgid "The below code allows NVDA to announce value changes while focused on another application."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:593
msgid "\t# The example app module for a messenger app."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:594
msgid "\t# The object we wish to track has window class name of \"MessengerWindow\"."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:597
msgid "\timport eventHandler"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:600
msgid "\t\tdef __init__(self, *args, **kwargs):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:601
msgid "\t\t\tsuper(AppModule, self).__init__(*args, **kwards)"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:602
msgid "\t\t\teventHandler.requestEvents(self.processID, \"MessengerWindow\", \"valueChange\")"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:603
msgid "Once defined, even if focused in another app, new messages (values) will be announced."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:604
msgid "### Useful app module properties and methods"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:605
msgid "`sleepMode` and `processID` are just two of many attributes that app modules have. Other useful properties and methods used in app modules include the following:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:606
msgid "* appName: the name of the app (usually the name of the executable)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:607
msgid "* productName: Records the actual product name for the app."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:608
msgid "* productVersion: Records the version of the app."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:609
msgid "* is64BitProcess: if true, the app is a 64-bit process (only true if you're using a 64-bit app under 64-bit Windows versions)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:610
msgid "* dumpOnCrash: if you are debugging apps that crashes often, you can call this function to let NVDA save a crash dump of this app in the temp files directory so you can retrieve it later."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:611
msgid "And other properties. Type dir(obj.appModule) from Python Console for the complete list."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:612
msgid "### Other remarks on app modules"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:613
msgid "Here are other remarks regarding app modules:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:614
msgid "* If you find that different versions of the program are laid out differently e.g. locations for controls are different, then you can write code which can handle these cases. There are a number of options you can choose from: adding some constants in your app module to handle different object locations, writing code for these controls (one per version) in custom objects which will be chosen in overlay class method and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:615
msgid "* If possible, try working with services that the app provides, such as COM (Component Object Model) methods (for example, Outlook app module), API's the app provides (such as Winamp) and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:616
msgid "* To support an application that works the same as another program (especially if you're writing app module for a 64-bit version of a 32-bit program for which you wrote an app module for), use the following code fragment (called aliasing):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:617
msgid "\tfrom appName import *"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:618
msgid "where appName is the name of the app module and * (asterisk or star) means import everything. For an example of this, look at NVDA's app modules for Miranda32 and Miranda64."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:619
msgid "* If you wish to extend an app module that comes with NVDA, use the following code fragment (this is called overriding the built-in module):"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:620
msgid "\tfrom nvdaBuiltin.appModules.appName import *"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:621
msgid "Where appName is the app module you wish to extend. For example, if you wish to support different controls in Windows calculator (calc.py), use:  "
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:622
msgid "\tfrom nvdaBuiltin.appModules.calc import *"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:623
msgid "* Many app modules (both built-in and third-party ones) uses app names as part of the name for a constant (a value that doesn't change). For example, in NVDA's Powerpoint module (powerpnt.py), many constants starts with \"PP\". Similarly, in Station Playlist Studio app module, many constants in the app module file (splstudio.py) starts with \"SPL\". This is used to remind you where this constants are used."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:624
msgid "## Drivers"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:625
msgid "A driver allows a software such as NvDA to communicate with hardware or use functionality provided by another software. Typically, when people speak of drivers, they usually refer to a program installed on a computer that allows software to communicate with a specific hardware, such as video cards, keyboards and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:626
msgid "In NVDA, drivers refer to modules that NVDA can use to communicate with a speech synthesizer or a braille display. For instance, you can write a braille display driver that sends braille output to your braille display, or ask your synthesizer to switch languages and provide configurable settings."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:627
msgid "### Driver components"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:628
msgid "All drivers (regardless of target device or software to be supported) imports appropriate modules such as `synthDriverHandler`. For most drivers, majority of the driver code deals with communicating with the target device or software, and all drivers must define the driver class (synthDriverHandler.SynthDriver or braille.BrailleDisplayDriver)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:629
msgid "All driver classes, at a minimum, must contain:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:630
msgid "* Driver identifier: a camel-case string such as \"oneCore\" that uniquely identifies a given driver."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:631
msgid "* Friendly name: the name that'll appear under synthesizer or braille settings dialogs."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:632
msgid "* Availability flag: a class method named `check` that tells NVDA that the driver is ready for use."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:633
msgid "* Connection manager: a set of routines that instructs NVDA as to how to locate a given synthesizer or a braille display."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:634
msgid "* Output handler: a function that'll perform the actual output processing. For synthesizers, `speak` method must be present; for braille displays, `display` method is needed."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:635
msgid "For speech synthesizers, they need to have:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:636
msgid "* Synth settings ring options: a list of synthesizer settings users can adjust via synth settings ring."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:637
msgid "For braille displays:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:638
msgid "* Input handlers: if input from the braille display is desirable, the driver author must implement resonders for commands such as braille keys, routing buttons and additional hardware."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:639
msgid "* Command set: a map that identifies NVDA command assignments for various display hardware buttons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:640
msgid "### Few important things to remember before, during and after driver development"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:641
msgid "* Before writing a driver, make sure you have the needed software and/or hardware."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:642
msgid "* Be sure to study protocols and API's used by a speech synthesizer or a braille display (this is more so for braille displays which may implement different protocols)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:643
msgid "* Make sure you know how to communicate with your equipment - ports, USB ID's, Bluetooth addresses, serial port settings and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:644
msgid "* Work with another person who happens to use the equipment or software you are writing driver(s) for."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:645
msgid "### Typical driver development steps"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:646
msgid "When writing drivers, you may wish to follow the recommended steps for app module development (planning, talking to vendors, user test, etc.). However, since drivers require intimate knowledge of hardware and/or software, you should spend more time on testing your driver. This is more so if you are writing a driver for a braille display which can send arbitrary commands (braille commands, routing buttons, etc.)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:647
msgid "## Sharing your add-on and experience with others"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:648
msgid "Once you've finished developing your add-ons, you might want to share your code with others. Along the way, you might contribute your know-how so others may benefit from your experiences."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:649
msgid "This chapter is designed to give some guidance on add-on release and maintenance, as well as connecting with your add-on users and other NVDA core and add-on developers around the world."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:650
msgid "### The NVDA Add-ons list"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:651
msgid "If you want to keep in touch with your add-on users or want to learn from or contribute your add-on to others, please subscribe to [NVDA add-ons list][4]. This is a low traffic list devoted to discussing current and future add-ons, as well as to review other add-ons created by members of the community or have your add-on reviewed by other add-on developers around the world."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:652
msgid "### The NVDA Community Add-ons web site and code repository"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:653
msgid "To download or learn more about various add-ons created by NVDA users, visit [NVDA Community Add-ons web site][5]. You can browse currently available add-ons, view add-ons under development and read add-on development guidelines."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:654
msgid "For developers wishing to read the code that powers various add-ons, you can search for add-on repositories stored on GitHub. The NVDA community add-on developers use [Git][6] for version control."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:655
msgid "Some of the useful and educational add-on repositories are:"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:656
msgid "* [Add-on template](https://github.com/nvdaaddons/addonTemplate): this is the source code repository for the community add-on template."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:657
msgid "* [Place markers by Noelia Martinez](https://github.com/nvdaes/placeMarkers): adds place marker functionality and provides a good example on using text infos."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:658
msgid "* [Windows 10 App Essentials by Joseph Lee](https://github.com/josephsl/wintenApps): provides improved support for Windows 10 and various universal apps, considered a classic in how global plugins and app modules work together and includes examples of overlay classes and control behaviors that derives from UI Automation objects."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:659
msgid "* [Read Feeds by Noelia Martinez](https://github.com/nvdaes/readFeeds): eases discovery of feeds on various websites and includes a simple example of storing and validating add-on settings."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:660
msgid "* [NVDA Remote Support by Christopher Toth and Tyler Spivey](https://github.com/nvdaremote/nvdaremote): a popular add-on used for remote troubleshooting and technical support, provides examples of how various external Python libraries are used."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:661
msgid "* [StationPlaylist Studio by Joseph Lee](https://github.com/josephsl/stationPlaylist): improves usage of StationPlaylist Studio, provides interesting examples on overlay classes and app API, use of threads, and add-on dialogs and other user interfaces."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:662
msgid "## Miscellaneous information"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:663
msgid "Please add additional material to this guide. We at NVDA Add-on Team welcome contributions from other add-on developers and users around the world."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:664
msgid "## Appendicies"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:665
msgid "### Appendix A: add-on terms dictionary"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:666
msgid "The below terms are used throughout this development guide as well as in the add-ons community to refer to add-ons, development processes and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:667
msgid "* Add-on: an extension for a program. In NVDA world, an add-on refers to additional packages users can install to extend NVDA's functionality, improve support for an app, or add new speech synthesizers or braille displays."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:668
msgid "* Application: synonymous with program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:669
msgid "* App module: a module that adds or improves support for a program."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:670
msgid "* API: Application Programming Interface."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:671
msgid "* Base class: parent class of an object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:672
msgid "* Braille display: a hardware or software that outputs text via tactile braille output and/or allows users to enter text via a braille keyboard or other input mechanisms."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:673
msgid "* Built-in module: a module that comes with NVDA that add-ons can optionally override or extend."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:674
msgid "* Caret: cursor shown on screen, usually seen when editing text or navigating documents."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:675
msgid "* Class: definition of an object."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:676
msgid "* Event: a routine called when certain things happen such as character input, changes to text on screen, a checkbox being checked and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:677
msgid "* Function: a piece of code that performs something given one or more input parameters and optionally returns something."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:678
msgid "* Gesture: a piece of input such as key presses, touchscreen flicks, braille keys and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:679
msgid "* Global plugin: a module that adds features everywhere."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:680
msgid "* Module: collection of variables, functions, classes and others inside a file."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:681
msgid "* Object: a class definition coming to life."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:682
msgid "* Script: a function that is attached (assigned) to a gesture."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:683
msgid "* Speech synthesizer: a software or hardware that converts text and various speech commands sent to it into voice output."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:684
msgid "* Variable: a temporary placeholder for some data."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:685
msgid "### Appendix B: Programming and Python concepts every add-on developer needs to know"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:686
msgid "The below list summarizes concepts all add-on developers will need to know when writing add-ons."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:687
msgid "* API: a set of documentation and code samples used to let a program or hardware interface with other software or hardware."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:688
msgid "* Base class: a class that provides base methods, attributes and properties for other objects to inherit and extend. Synonymous with superclass and parent class."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:689
msgid "* Child class: a class that derives its power from one or more base classes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:690
msgid "* Class: definition of objects, including methods, attributes and expected behaviors. All Python classes and attributes are public; they can \"ecome private\" through use of naming conventions such as prefixing a variable name with underscores (_)."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:691
msgid "* Code block: collection of code."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:692
msgid "* Compiling: translating a high-level programming language into a low-level language suitable for machine execution."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:693
msgid "* Event-driven programming: a programming paradigm based on following, reacting to and handling events."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:694
msgid "* Exception: one or more runtime circumstances that prevent normal operation of a program such as being denied access to a resource, name usage problem in code and other cases."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:695
msgid "* GUI: Graphical User Interface."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:696
msgid "* Handle: an opaque reference to a resource such as a file, TCP socket, window and so on."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:697
msgid "* Has versus is relationship: former refering to attributes of a single class, the latter refering to inherited classes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:698
msgid "* Indentation-based syntax: use of indentations such as tabs to denote code blocks."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:699
msgid "* Inheritance: ability for one or more parent classes to provide base methods and attributes for child classes to override or extend as the need arises."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:700
msgid "* Interpreting: running a program written in a high-level language without compiling it first."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:701
msgid "* Object: runtime instance of one or more classes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:702
msgid "* Object hierarchy: how screen elements are organized via parent-child (container-contained) relationship."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:703
msgid "* Object-oriented programming: a programming paradigm that defines solutions to problems or represent real-life things via classes and objects."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:704
msgid "* Scope: where variables, functions, classes and objects are defined in code."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:705
msgid "### Appendix C: Add-on type comparison"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:706
msgid "The following table compares various add-on types and when to use them."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:707
msgid "| Task or feature | Global plugin | App module | Driver |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:708
msgid "| ------- | --------- | -------- | -------- |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:709
msgid "| Can be used everywhere | Yes | No | Yes |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:710
msgid "| Naming restrictions | No (limited by Windows file naming conventions) | Must be name of the executable | No (limited by Windows file naming conventions) |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:711
msgid "| Retrieve various controls, including focused control | Yes | Yes | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:712
msgid "| Commands can be used everywhere | Yes | No | Braille display drivers only if defined |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:713
msgid "| Handle events such as focus changes | Yes | Yes | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:714
msgid "| Define custom objects to represent controls | Yes | Yes | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:715
msgid "| Define custom actions to be performed when the module loads and unloads | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:716
msgid "| Can modify object attributes at runtime | No | Yes | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:717
msgid "| Modify speech and other output routines and presentation experience (i.e. speech.cancelSpeech, braille.handler.update, etc.) | Yes | yes | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:718
msgid "| Include custom settings | Yes | Yes | Speech synthesizers only |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:719
msgid "| Can patch NVDA functions, classes and modules at will | Yes | Not advised | No |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:720
msgid "| Subject to configuration profile switches | No | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:721
msgid "| Can call external libraries written in C and other languages and bundled as DLL's | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:722
msgid "### Appendix D: notes and references for scripters of other screen readers"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:723
msgid "If you write scripts for screen readers such as JAWS for Windows or Window-Eyes, be sure to go over this section as it introduces you to common tasks you can do with NVDA and other notes."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:724
msgid "| Task | NVDA or Python function/class/module | Notes |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:725
msgid "| -------- | -------- | -------- |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:726
msgid "| Cancel speech | speech.cancelSpeech() | Stops speech. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:727
msgid "| Speak something | speech.speakMessage(message) or as part of ui.message(message) | the ui.message function also performs braille output. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:728
msgid "| Braille something | braille.handler.message(message) or ui.message(message) | Same as above. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:729
msgid "| Show an HTML window | ui.browseableMessage(message, title, isHTML = True) | Mimics virtual viewer except it'll be shown on screen. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:730
msgid "| Retrieve focused object | something = api.getFocusObject() | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:731
msgid "| Retrieve foreground window | foreground = api.getForegroundObject() |  |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:732
msgid "| Title of the active window (if present) | foreground.name | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:733
msgid "| Find out what object is navigator object | obj = api.getNavigatorObject() | This may or may not be the focused control. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:734
msgid "| Retrieve window handle for a given object | hwnd = obj.windowHandle | Obtain object via api.get*Object() functions. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:735
msgid "| Check the name of the window class | obj.windowClassName == somename | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:736
msgid "| Making sure the parent object has the correct window control ID | if obj.parent.windowControlID == something: statement | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:737
msgid "| The parent object does not provide what I want, but the grandparent does | something = obj.parent.parent.attribute | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:738
msgid "| The label of a list item is the name of its first child object | obj.name = obj.firstChild.name | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:739
msgid "| I want the control label of the focused object and description of the previous object to be announced when I press NVDA+Tab | In reportFocus(self): obj.name += \" \" + obj.previous.description | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:740
msgid "| Announce state changes if and only if the next object is the toolbar I'm looking for | In event_stateChange(self): toolbar = obj.next; if toolbar.role == controlTypes.ROLE_TOOLBAR and toolbar.attribute = whatYouAreLookingFor and additional conditions ...: statement | For better readability, place each statement on separate lines with correct indents applied. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:741
msgid "| Announcing the name of an object on screen (provided that object navigation can be used) | obj = api.getForegroundObject().route...; ui.message(obj.name) | Try placing each statement on its own line with correct indents applied. Route refers to obj.next/previous/parent/firstChild/lastChild/children[index]/getChild(index) and so on. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:742
msgid "| Check if the object's role is what you want | obj.role == controlTypes.ROLE_* | ROLE_* can be any role you are looking for. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:743
msgid "| Looking for a specific text in the object's name | sometext in obj.name | This is a typical string membership task. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:744
msgid "| Does the control's label start with a specific text | obj.name.startswith(sometext) | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:745
msgid "| Length of a text field with easily retrievable value | len(obj.value) | This works if the value of the field can be found. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:746
msgid "| Is a checkbox checked | controlTypes.STATE_CHECKED in obj.states | obj.states is a set. First, verify that the role is a checkbox. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:747
msgid "| How many items are in a list | someList.childCount | Provided that the list provides correct underlying implementation to obtain item count. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:748
msgid "| Where the object is located on screen | obj.location | This returns a tuple of four elements, namely x and y coordinates of the top-left corner of the object, as well as length and width. For example, on the Shelel (desktop) object with screne resolution of 1920 by 1080 pixels, the return value will be (0, 0, 1920, 1080. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:749
msgid "| Is this an MSAA control | isinstance(obj, NVDAObjects.IAccessible.IAccessible) | A typical implementation is to import IAccessible from NVDAObjects.IAccessible and doing isinstance(obj, IAccessible). |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:750
msgid "| Position of a MSAA list item | item.IAccessibleChildID | Provided that this is properly implemented. The default for contorls other than list items, treeview items and what not is 0. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:751
msgid "| Automation ID for a UIA element | obj.UIAElement.cachedAutomationID | First, check if the object is a UIA contorl. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:752
msgid "| Framework used to generate this UIA object | obj.UIAElement.cachedFrameworkID | The GUI framework used to program this object. Commonly encountered frameworks are Direct UI, Windows Presentation Foundation (WPF) controls with UIA enabled, XAML (eXtensible Application Programming Language) and Microsoft Edge. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:753
msgid "| Executable name of any object | obj.appModule.appName | appModule is the attribute of any object that can be represented within an app such as focused control. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:754
msgid "| Send keystrokes | gesture.send() | This is to be called from a script with the desired keystroke bound to it. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:755
msgid "| Handling multiple presses of a keystroke | scriptHandler.getLastScriptRepeatCount() | 0 means the command was pressed once. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:756
msgid "| I want to assign Control+Alt+number row to a script | In initOverlayClass(self): for key in range(10): self.bindGesture(\"control+alt+%s\"%(key), \"somescript\") | For Python 2, use xrange instead. For ease of readability, indent each statement on separate lines. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:757
msgid "| providing input help message | script_somescript.__doc__ | Effectivley, a script's docstring is treated as its input help message. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:758
msgid "| Handle name changes | event_nameChange(self, obj, nextHandler) | The body should consist of what should be done, ending with a call -to nextHandler() function. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:759
msgid "| Live region change announcements | event_liveRegionChange(self, obj, nextHandler) | By default, new text will be spoken and/or brailled. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:760
msgid "| Instantly transform a window into a dialog | In chooseNVDAObjectOverlayClasses(self, obj, clsList): if you found the window you want: clsList.insert(0, NVDAObjects.Behaviors.Dialog) | Be sure to identify this window that is really a dialog. If done correctly, contesnts of this \"dialog\" will be announced automatically. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:761
msgid "| I'm working with a terminal window | Inherit from NVDAObjects.behaviors.Terminal | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:762
msgid "| I want to add table navigation commands for an object that is not shown as a table yet | Inherit from NVDAObjects.behaviors.RowWithFakeNavigation | This class defines input help mode message and a base implementation for table navigation commands (Control+Alt+arrows). \\"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:763
msgid "| I need pointers for providing improved support for a Java application | NVDAObjects.JAB and JABHandler module | Java Access Bridge should be installed. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:764
msgid "| Adding support for an app that has similar functionality as another app | Import contents of the source app module via from appModuleName import * | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:765
msgid "| Play a tone | tones.beep(hertz, duration) | Duration in milliseconds. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:766
msgid "| Play a tone on the left speaker | tones.beep(hertz, duration, leftVolume=100, rightVolume=0) | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:767
msgid "| Play a wave file | nvwave.playWaveFile(path) | For example, nvwave.playWaveFile(r\"test.wav\") |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:768
msgid "| Obtain text info for a given object | obj.TextInfo | Note the uppercase \"T\". |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:769
msgid "| Check if keyboard echo (typed characters) is on | config.conf[\"keyboard\"][\"speakTypedCharacters\"] | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:770
msgid "| turn speak command keys on without opening a settings dialog | config.conf[\"keyboard\"][\"speakCommandKeys\"] = True | The user should toggle this on via keyboard settings dialog. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:771
msgid "| Is focus mode/forms mode active | obj.treeInterceptor.passThrough | If True, focus/forms mode is on while using browse mode documents. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:772
msgid "| Is touchscreen support available | touchHandler.handler is not None | If it is not None, touch support is active and available. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:773
msgid "| Get NVDA version | versionInfo.version | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:774
msgid "| Windows version | sys.getwindowsversion | This returns a tuple of five elements: major version, minor version, build number, platform, and service pack version. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:775
msgid "| Is 64-bit Windows | os.environ[\"PROCESSOR_ARCHITEW6432\"] in (\"AMD64\", \"ARM64\") or os.path.exists(r\"C:\\Program Files (X86) | The environment variable method is more reliable. Starting from 2017.4, both AMD64 or ARM64 must be checked, especially when supporting Windows 10 on ARM. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:776
msgid "| Registry access | _winreg module | Changed to \"winreg\" in Python 3. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:777
msgid "| Open a website with the default web browser | os.startfile(URL) | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:778
msgid "| Download headers for a file on the web | resource = urllib.urlopen(URL) | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:779
msgid "| Work with JSON data | json module | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:780
msgid "| Allocate some memory somewhere | ctypes.windll.kernel32.VirtualAllocEx() | The faster way to do this is winKernel.virtualAllocEx function. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:781
msgid "| Send a message to another process | ctypes.windll.user32.SendMessageW() | The shorter way is winUser.sendMessage() function."
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:782
msgid "| Current time in seconds | time.time() | This returns seconds elapsed from January 1, 1970 at midnight. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:783
msgid "| Create a message box | gui.messageBox | A thin wrapper around wx.MessageBox class. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:784
msgid "| Create a custom dialog | wx.Dialog | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:785
msgid "| Run multiple background tasks at once | threading.Thread | In reality, due to internal issues, Python will run one thread after another. This approach is useful if you want to run a background task while making NVDA remain responsive. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:786
msgid "| Run something periodically | wx.PyTimer or threading.Timer | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:787
msgid "| Tally occurrence of text in a document | collections.Counter | Be sure to have a list of words from a text file before running a tally on it. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:788
msgid "| Create a dynamic array | list object | Python's list object ([]) is a dynamic array. \\"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:789
msgid "| Work with associative arrays | dict object | Python's dictionary ({}) object is another name for associative array, sometimes called a map. |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:790
msgid "| Open, parse, and save config files | config module or configobj module | |"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:791
msgid "[1]: https://community.nvda-project.org/wiki/Developme"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:792
msgid "[2]: https://www.nvaccess.org/files/nvda/documentation/developerGuide.html"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:793
msgid "[3]: https://bitbucket.org/nvdaaddonteam/addontemplate/get/master.zip"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:794
msgid "[4]: http://www.zlotowicz.pl/nvda/winapi.mdwn"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:795
msgid "[5]: https://addons.nvda-project.org"
msgstr ""

#: ..\python_docs\NVDA_Add-on_Development_Guide-2017.4.py:796
msgid "[6]: https://www.git-scm.com/josephsl/stationPlaylist"
msgstr ""

