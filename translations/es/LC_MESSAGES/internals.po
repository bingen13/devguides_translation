# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2018-01-16 17:05+Hora estándar romance\n"
"PO-Revision-Date: 2018-01-29 18:53+0100\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"
"X-Generator: Poedit 2.0.6\n"
"Last-Translator: José Manuel Delicado <jmdaweb@hotmail.com>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Language: es\n"

#: ..\python_docs\internals.py:3
msgid "# NVDA feature internals"
msgstr "# Características internas de NVDA"

#: ..\python_docs\internals.py:4
msgid ""
"This article is designed to give users and developers a tour of internals of "
"various features of NVDA. Thus, it is important to have some knowledge of "
"NVDA itself, Python, C++ and programming concepts to follow this article."
msgstr ""
"Este artículo está diseñado para ofrecer a los usuarios y desarrolladores un "
"recorrido por el interior de algunas características de NVDA. Por tanto, es "
"importante tener algunos conocimientos de Python, C++, conceptos generales "
"de programación y NVDA en sí mismo para seguirlo."

#: ..\python_docs\internals.py:5
msgid ""
"Note: This article is directly based on (and is an enhanced version of) the "
"design overview document found in NVDA Community website. Parts of this "
"article are based on NVDA User Guide."
msgstr ""
"Nota: este artículo está basado en el documento de descripción del diseño "
"que se encuentra en un sitio web, y es una versión mejorada del mismo. Parte "
"de los contenidos de este documento provienen de la guía de usuario."

#: ..\python_docs\internals.py:6 ..\python_docs\internals.py:8
msgid "----"
msgstr "----"

#: ..\python_docs\internals.py:7
msgid "[[PageOutline(2-4,,inline)]]"
msgstr "[[PageOutline(2-4,,inline)]]"

#: ..\python_docs\internals.py:9
msgid "## Introduction"
msgstr "## Introducción"

#: ..\python_docs\internals.py:10
msgid "### About NVDA"
msgstr "### Acerca de NVDA"

#: ..\python_docs\internals.py:11
msgid ""
"NVDA (Nonvisual Desktop Access) is a free, open-source, community-driven "
"screen reader for Microsoft Windows. This modular, highly extensible screen "
"reader provides all the features expected from screen readers, such as "
"accepting keyboard input to perform various tasks, displaying a rich set of "
"configuration options, responding to events and so on."
msgstr ""
"NVDA (acceso no visual a ordenadores de escritorio (Non Visual Desktop "
"Access)) es un lector de pantalla gratuito, de código abierto y dirigido por "
"la comunidad para Microsoft Windows. Este lector de pantalla modular y "
"altamente extensible ofrece todas las funciones que se espera de un lector "
"de pantalla, tales como aceptar entrada por teclado para realizar ciertas "
"tareas, mostrar un rico y variado conjunto de opciones de configuración, "
"responder a eventos, etc."

#: ..\python_docs\internals.py:12
msgid "### Audience"
msgstr "### Audiencia"

#: ..\python_docs\internals.py:13
msgid ""
"As this is an article on feature internals, we will assume that you meet the "
"following prerequisites:"
msgstr ""
"Ya que este es un artículo que habla de características internas, se asumirá "
"que cumples los siguientes requisitos previos:"

#: ..\python_docs\internals.py:14
msgid "- You are a user of NVDA and curious about how things work."
msgstr "- Eres un usuario de NVDA y tienes curiosidad por saber cómo funciona."

#: ..\python_docs\internals.py:15
msgid ""
"- You have some experience with programming and are familiar with C++ and "
"Python."
msgstr ""
"- Tienes alguna experiencia programando y conocimientos en C++ y Python."

#: ..\python_docs\internals.py:16
msgid ""
"- You would like to contribute your expertise but don't know where to start "
"and how NVDA performs its job."
msgstr ""
"- Quieres contribuir con tus conocimientos pero no sabes por dónde empezar "
"ni cómo hace su trabajo NVDA."

#: ..\python_docs\internals.py:17
msgid ""
"- You are a new or a seasoned NVDA add-on writer and like to dive deeper "
"into NVDA internals."
msgstr ""
"- Eres nuevo o tienes experiencia escribiendo complementos y quieres conocer "
"el funcionamiento interno de NVDA."

#: ..\python_docs\internals.py:18
msgid "### Article structure"
msgstr "### Estructura del artículo"

#: ..\python_docs\internals.py:19
msgid ""
"It might be pointless to talk about internals of a complex software system "
"such as NVDA without having something we can follow. As such, we'll start by "
"letting you see how to obtain NVDA source code and the software packages "
"involved in doing this and building NVDA for the first time."
msgstr ""
"Sería inútil hablar de cuestiones internas de un complejo sistema de "
"software como NVDA sin tener algo que podamos seguir. Por tanto, vamos a "
"empezar por ver cómo obtener el código fuente de NVDA y los paquetes de "
"software involucrados, y la construcción de NVDA por primera vez."

#: ..\python_docs\internals.py:20
msgid ""
"After you download the source code, you might be interested in seeing the "
"contents of the source code folder and the modules which holds NVDA "
"together. In addition to learning more about various NVDA components and a "
"high-level overview of runtime life of NVDA, you'll get a chance to learn "
"why NVDA uses two programming languages for various tasks."
msgstr ""
"Después de descargar el código fuente, podrías estar interesado en ver el "
"contenido de las carpetas de su interior y la relación entre los módulos que "
"conforman NVDA. Además de aprender más sobre los distintos componentes de "
"NVDA y una descripción a alto nivel de su vida en tiempo de ejecución, "
"tendrás la oportunidad de saber por qué NVDA usa dos lenguajes de "
"programación."

#: ..\python_docs\internals.py:21
msgid ""
"Next, we'll visit routines that will let NVDA start on your computer "
"(installer and launcher), including the trick NVDA employs to detect that it "
"is installed on a computer or running from a USB flash drive. Following "
"that, we'll visit core.main, the function responsible for starting and "
"exiting NVDA and things it does in between."
msgstr ""
"A continuación, visitaremos los procedimientos que permiten que NVDA se "
"inicie en tu equipo (instalador y lanzador) incluyendo aquellos que se usan "
"para saber si NVDA está instalado o se ejecuta desde una unidad USB. Después "
"de eso, visitaremos core.main, la función responsable de iniciar NVDA, salir "
"de él y procesar todo lo que ocurre entre estos dos sucesos."

#: ..\python_docs\internals.py:22
msgid ""
"A significant portion of the article will focus on the life of NVDA and "
"things it does to let thousands of blind people use computers. We'll visit "
"what scripts and events are, how accessibility API's are handled, how "
"overlay classes and objects come to life, a tour of browse mode "
"functionality and get a chance to interview various app modules, speech "
"synthesizers and braille display driver modules. We'll then visit add-on "
"subsystem and discuss how various add-ons use various NVDA functionality."
msgstr ""
"Una parte significativa del artículo se enfocará en la vida de NVDA y qué es "
"lo que hace para permitir el acceso a los ordenadores a miles de personas "
"ciegas. Durante nuestro recorrido sabremos qué son los scripts y los "
"eventos, cómo se manejan las apis de accesibilidad, cómo vienen a la vida "
"los objetos y clases superpuestos, una visita al funcionamiento del modo "
"exploración, y tendremos una oportunidad de entrevistar a distintos módulos "
"de aplicación, sintetizadores de voz y controladores braille. Después de eso "
"hablaremos del subsistema de complementos y debatiremos sobre cómo estos "
"usan y mejoran la funcionalidad de NVDA."

#: ..\python_docs\internals.py:23
msgid ""
"Following our discussion of important NVDA routines, we'll take a look at "
"NVDA's user interface and how user settings are managed. We'll also tour "
"what happens when NVDA is told to check for updates, how NVDA changes its "
"behavior when running from secure screens, Ease of Access integration and "
"other miscellaneous services."
msgstr ""
"Siguiendo con nuestra discusión sobre las rutinas importantes de NVDA, "
"echaremos un vistazo a su interfaz de usuario y cómo se administra la "
"configuración. También sabremos qué pasa cuando NVDA busca actualizaciones, "
"cómo cambia su comportamiento en pantallas seguras, su integración con el "
"servicio de facilidad de uso del sistema y otros servicios adicionales."

#: ..\python_docs\internals.py:24
msgid ""
"Lastly, we'll talk about how you can make a feature idea come to life. We'll "
"briefly talk about coding style, submitting patches for review and will "
"conclude with development process."
msgstr ""
"Finalmente, te explicaremos cómo hacer realidad una idea. Hablaremos "
"brevemente del estilo del código, cómo enviar parches para que se revisen y "
"concluiremos con el proceso de desarrollo."

#: ..\python_docs\internals.py:25
msgid "## Where to obtain NVDA source code and compile NVDA"
msgstr "## Dónde obtener el código fuente y cómo compilar NVDA"

#: ..\python_docs\internals.py:26
msgid ""
"If you would like to learn NVDA's internals, it is important to have NVDA "
"source code handy. Like many open-source projects, NVDA uses Git for source "
"code management. For more information on obtaining source code, see "
"AccessingAndRunningSourceCode article."
msgstr ""
"Si quieres aprender cómo funciona NVDA por dentro, es importante tener a "
"mano su código fuente. Como muchos proyectos de código abierto, NVDA usa Git "
"para administrar el código. Para más información sobre cómo obtener el "
"código fuente, visita el artículo correspondiente de nuestra documentación "
"para desarrolladores."

#: ..\python_docs\internals.py:27
msgid "### Building NVDA"
msgstr "### Construcción de NVDA"

#: ..\python_docs\internals.py:28
msgid ""
"There are times when you would like to see NVDA in action. To help you with "
"this and in case you'd like to test a new feature idea, you should build "
"NVDA from source. Source code compilation steps are managed by SCons, and "
"details on how to build NVDA from source can be found in readme.md found in "
"the root directory of the NVDA source code."
msgstr ""
"Hay ocasiones en las que te gustaría ver a NVDA en acción. Para ayudarte en "
"esto y en caso de que quieras probar una nueva característica, deberías "
"construir NVDA desde el código. La herramienta SCons administra los pasos de "
"compilación del código fuente, y se pueden encontrar detalles sobre cómo "
"construir NVDA en el archivo readme.md que hay en la raíz del código fuente, "
"o traducidos en nuestra web."

#: ..\python_docs\internals.py:29
msgid "## NVDA components and source code layout"
msgstr "## Componentes de NVDA y disposición del código fuente"

#: ..\python_docs\internals.py:30
msgid ""
"When you open the folder containing the source code, you may have noticed "
"that it is composed of various directories besides the \"source\" directory. "
"Let's examine the folder structure, and after that, we'll tour various "
"components that holds NVDA together."
msgstr ""
"Cuando abras la carpeta que contiene el código fuente, te darás cuenta de "
"que hay varios directorios además de \"source\". Examinemos la estructura de "
"las carpetas, y después de eso, haremos un recorrido por distintos "
"componentes que conforman NVDA."

#: ..\python_docs\internals.py:31
msgid "### Source code folder structure"
msgstr "### Estructura de la carpeta del código fuente"

#: ..\python_docs\internals.py:32
msgid "The source code package comprises following folders and files:"
msgstr ""
"El paquete de código fuente consta de las siguientes carpetas y archivos:"

#: ..\python_docs\internals.py:33
msgid ""
"- build: Created when NVDA is built from source and is used as a staging "
"area for compiled code."
msgstr ""
"- build: se crea al construir NVDA desde el código fuente y se usa como área "
"intermedia para el código compilado."

#: ..\python_docs\internals.py:34
msgid "- extras: Contains NVDA Controller Client package."
msgstr "- extras: contiene el paquete del cliente para el controlador de NVDA."

#: ..\python_docs\internals.py:35
msgid ""
"- include: Major dependencies needed by NVDA, such as IAccessible2 library, "
"are stored here."
msgstr ""
"- include: la mayoría de las dependencias que NVDA necesita, como por "
"ejemplo la biblioteca IACcessible2, se almacenan aquí."

#: ..\python_docs\internals.py:36
msgid "- launcher: Holds the MSI for NVDA's launcher."
msgstr "- launcher: contiene el código del lanzador de NVDA."

#: ..\python_docs\internals.py:37
msgid ""
"- misc-deps: The miscellaneous dependencies folder houses other packages "
"required to build NVDA such as various Python packages."
msgstr ""
"- misc-deps: contiene paquetes necesarios para construir NVDA, entre ellos "
"paquetes Python."

#: ..\python_docs\internals.py:38
msgid ""
"- nvdaHelper: Contains the C++ portion of NVDA used in various situations."
msgstr ""
"- nvdaHelper: contiene la parte de código en C++ de NVDA usada en distintas "
"situaciones."

#: ..\python_docs\internals.py:39
msgid ""
"- output: The resulting packages from various build tasks are stored here."
msgstr ""
"- output: los paquetes resultantes de las tareas de construcción se "
"almacenan aquí."

#: ..\python_docs\internals.py:40
msgid "- site_scons: Other packages built by SCons are stored here."
msgstr "- site_scons: otros paquetes construidos por SCons se almacenan aquí."

#: ..\python_docs\internals.py:41
msgid ""
"- source: This is where Python portion of NVDA lives. We'll talk about "
"contents of this directory throughout this article."
msgstr ""
"- source: aquí es donde vive el código Python de NVDA. Hablaremos del "
"contenido de este directorio a lo largo de este artículo."

#: ..\python_docs\internals.py:42
msgid "- uninstaller: Routines used by NVDA's uninstaller is stored here."
msgstr ""
"- uninstaller: almacena los procedimientos que usa el desinstalador de NVDA."

#: ..\python_docs\internals.py:43
msgid "- user_docs: Documentation files for NVDA are stored in this folder."
msgstr ""
"- user_docs: aquí se almacenan los archivos con la documentación de usuario "
"de NVDA."

#: ..\python_docs\internals.py:44
msgid "### NVDA components overview"
msgstr "### Descripción de los componentes de NVDA"

#: ..\python_docs\internals.py:45
msgid ""
"NVDA relies on various components to perform its job, such as supporting "
"various accessibility API's, understanidng keyboard commands, sending output "
"to a braille display and more. Here is a complete list of components used by "
"NVDA:"
msgstr ""
"NVDA se apoya en varios componentes para realizar su trabajo (dar soporte a "
"varias apis de accesibilidad, entender órdenes de teclado, enviar la salida "
"a una pantalla braille, etc.). Aquí se encuentra una lista completa de los "
"componentes de NVDA:"

#: ..\python_docs\internals.py:46
msgid ""
"- Installer: This module is the first module encountered when using NVDA for "
"the very first time."
msgstr ""
"- Instalador: este es el primer módulo que nos encontramos al usar NVDA por "
"primera vez."

#: ..\python_docs\internals.py:47
msgid ""
"- Launcher (nvda.pyw, nvda.exe if using binary builds): Used to start NVDA. "
"This module is responsible for checking command-line arguments and performs "
"initial startup tasks."
msgstr ""
"- Lanzador (nvda.pyw, nvda.exe en versiones binarias): se usa para iniciar "
"NVDA. Este módulo es el encargado de comprobar los argumentos de la línea de "
"órdenes y realizar distintas tareas de inicialización."

#: ..\python_docs\internals.py:48
msgid ""
"- NVDA service: This is used when NVDA runs as a service, such as when using "
"NVDA in secure screens. A related module is used to register NVDA with Ease "
"of Access (Windows Vista and later)."
msgstr ""
"- Servicio de NVDA: este se usa cuando NVDA se ejecuta como servicio, por "
"ejemplo al usarlo en pantallas seguras. Existe un módulo relacionado que "
"registra NVDA con el servicio de accesibilidad (Windows Vista y posterior)."

#: ..\python_docs\internals.py:49
msgid ""
"- Core: Performs bulk of NVDA's startup routine, coordinates how NVDA should "
"exit and involved in NVDA's life from start to finish."
msgstr ""
"- Núcleo: se encarga de todo lo relativo al inicio de NVDA, coordina cómo "
"debe cerrarse y está implicado en la vida de NVDA desde el principio hasta "
"el fin."

#: ..\python_docs\internals.py:50
msgid ""
"- Event processor: Routines in event handler and queue handler are used to "
"process events, queue events and perform related actions."
msgstr ""
"- Procesador de eventos: las instrucciones en el manejador de eventos y en "
"el procesador de cola se usan para procesar eventos, meterlos en la cola y "
"realizar acciones relacionadas."

#: ..\python_docs\internals.py:51
msgid ""
"- Accessibility API support: NVDA comes with handlers for MSAA (Microsoft "
"Active Accessibility)/IAccessible, IAccessible2, Java Access Bridge (JAB) "
"and UI Automation (UIA). Together with various overlay classes, API handlers "
"allow NVDA to present uniform experience across different API's."
msgstr ""
"- Soporte para apis de accesibilidad: NVDA viene con manejadores para MSAA "
"(Microsoft Active Accessibility)/IAccessible, IAccessible2, Java Access "
"Bridge (JAB) y UI Automation (UIA). Junto con varias clases de "
"superposición, los manejadores de apis permiten a NVDA presentar una "
"experiencia uniforme entre distintas apis."

#: ..\python_docs\internals.py:52
msgid ""
"- Text navigation and access: Various methods for handling different types "
"of text widgets are provided in text infos package."
msgstr ""
"- Acceso y navegación por texto: se ofrecen varios métodos para trabajar con "
"distintos widgets de texto en el paquete text infos."

#: ..\python_docs\internals.py:53
msgid ""
"- App modules: NVDA comes with several app modules to let you use NVDA in "
"various apps. Coordinating app module support is app module handler, and its "
"duties include managing app module initialization and termination and "
"keeping track of which app modules are active."
msgstr ""
"- Módulos de aplicación: NVDA viene con varios módulos que te permiten "
"usarlo en distintas aplicaciones. El coordinador del soporte de módulos de "
"aplicación es el manejador de módulos de aplicación, también llamado app "
"module handler, y entre sus tareas se encuentran administrar el inicio y "
"finalización de módulos de aplicación, y llevar un registro con los módulos "
"que están activos."

#: ..\python_docs\internals.py:54
msgid ""
"- Global plugins: A global plugin adds interesting functionality to be used "
"by NVDA users, and there is a manager that keeps an eye on global plugins: "
"global plugin handler."
msgstr ""
"- Extensiones globales: una extensión global añade funciones muy "
"interesantes para los usuarios de NVDA, y hay un administrador que no les "
"quita ojo: el global plugin handler o manejador de extensiones globales."

#: ..\python_docs\internals.py:55
msgid ""
"- Add-on subsystem: You can write or use add-ons to enhance NVDA's "
"functionality. Coordinating various NVDA add-ons is add-on handler, which is "
"invoked when installing and removing add-ons and throughout the life of an "
"add-on."
msgstr ""
"- Subsistema de complementos: puedes programar o utilizar complementos para "
"extender la funcionalidad de NVDA. El manejador de complementos "
"(addonHandler) es el encargado de coordinarlos, y reacciona al instalarlos, "
"desinstalarlos y durante la vida de cada complemento."

#: ..\python_docs\internals.py:56
msgid ""
"- Browse mode management: Routines housed in virtual buffers package and "
"browse mode module allow you to navigate complex documents such as PDF "
"documents and websites."
msgstr ""
"- Administración del modo exploración: el código almacenado en el paquete "
"virtualBuffers y en el módulo browseMode te permite navegar por documentos "
"complejos, tales como sitios web o documentos pdf."

#: ..\python_docs\internals.py:57
msgid ""
"- Input support: The input core and its subordinates handle various input "
"scenarios. This include a key press from a keyboard, flick on a touchscreen, "
"tracking mouse movement and recording actions associated with a button on a "
"braille display."
msgstr ""
"- Soporte de entrada: el módulo inputCore y aquellos relacionados con él "
"controlan distintos escenarios de entrada. Estos incluyen una pulsación de "
"teclado, un movimiento en una pantalla táctil, el rastreo del movimiento del "
"ratón y la pulsación de un botón en una pantalla braille."

#: ..\python_docs\internals.py:58
msgid ""
"- Output routines: NVDA can be told to announce something via speech, "
"braille, tones, wave file playback or combination of these."
msgstr ""
"- Componentes de salida: se le puede pedir a NVDA que anuncie algo a través "
"de voz, braille, tonos, la reproducción de un archivo de sonido o una "
"combinación de todo esto."

#: ..\python_docs\internals.py:59
msgid ""
"- Speech and synthesizers: These two subsystems allow NVDA to speak things "
"on screen via a user-defined speech synthesizer."
msgstr ""
"- Voz y sintetizadores: estos dos subsistemas permiten a NVDA verbalizar lo "
"que hay en pantalla a través de un sintetizador de voz definido por el "
"usuario."

#: ..\python_docs\internals.py:60
msgid ""
"- Braille display management: This complex subsystem allows NVDA to "
"communicate with various braille displays to send braille text or receive "
"and interpret input from them."
msgstr ""
"- Administración de pantallas braille: este complejo subsistema permite que "
"NVDA se comunique con distintas pantallas braille para enviarles texto o "
"recibir e interpretar la entrada que se realice desde ellas."

#: ..\python_docs\internals.py:61
msgid ""
"- Message announcer: NVDA can announce various information via speech and/or "
"braille using a function in the \"ui\" module."
msgstr ""
"- Anunciado de mensajes: NVDA puede anunciar información por síntesis de voz "
"o braille usando una función disponible en el módulo \"ui\"."

#: ..\python_docs\internals.py:62
msgid ""
"- Graphical user interface: NVDA can show various dialogs, windows and so "
"on, all housed in the \"gui\" package."
msgstr ""
"- Interfaz gráfica de usuario: NVDA puede mostrar múltiples diálogos y "
"ventanas, todos ellos alojados en el paquete \"gui\"."

#: ..\python_docs\internals.py:63
msgid ""
"- Configuration management: The config package not only houses the default "
"configuration for NVDA, but also acts as a clerk responsible for managing "
"user configuration such as switching between configuration profiles."
msgstr ""
"- Administración de la configuración: el paquete config no sólo aloja la "
"configuración por defecto de NVDA, sino que también se usa para administrar "
"la configuración de usuario y alternar entre distintos perfiles."

#: ..\python_docs\internals.py:64
msgid ""
"- Localization support: Various modules are involved when supporting NVDA "
"localization, including language handler and translation files for NVDA "
"interfaces in different languages."
msgstr ""
"- Soporte de idiomas: hay varios módulos implicados en la traducción de "
"NVDA, incluidos languageHandler y los archivos de traducción de la interfaz "
"de NVDA en distintos idiomas."

#: ..\python_docs\internals.py:65
msgid ""
"- NVDA helper: this module performs two things: allows NVDA's Python "
"routines to call C++ routines and used to let NVDA communicate with other "
"programs via code injection and other advanced techniques."
msgstr ""
"- NVDA helper: este módulo realiza dos acciones: permite al código Python "
"comunicarse con código C++, y permite que NVDA se comunique con otros "
"programas mediante inyección de código y otras técnicas avanzadas."

#: ..\python_docs\internals.py:66
msgid ""
"- Windows API wrappers: NVDA comes with wrapper modules for some Windows API "
"functions, housed in different modules named after Windows API libraries "
"such as user32.dll wrapped in winUser.py."
msgstr ""
"- Soporte para la API de Windows: NVDA viene con módulos que abstraen "
"algunas funciones de la api de Windows, alojadas en módulos tales como "
"winUser.py, que contiene funciones de la biblioteca user32.dll."

#: ..\python_docs\internals.py:67
msgid ""
"We will examine these modules in detail throughout this article (the rest of "
"this article is based on the Design Overview article). But first, let's "
"learn more about NVDA's architecture, starting with some important "
"definitions."
msgstr ""
"Examinaremos en detalle estos módulos a lo largo de este artículo. El resto "
"del artículo está basado en el de descripción del diseño. Pero primero "
"aprendamos algo más sobre la arquitectura de NVDA, comenzando con algunas "
"definiciones importantes."

#: ..\python_docs\internals.py:68
msgid "## Terminology"
msgstr "## Terminología"

#: ..\python_docs\internals.py:69
msgid "### Abbreviations"
msgstr "### Abreviaturas"

#: ..\python_docs\internals.py:70
msgid " * API: Application programming interface"
msgstr " * API: interfaz de programación de aplicaciones"

#: ..\python_docs\internals.py:71
msgid " * GUI: Graphical user interface"
msgstr " * GUI: interfaz gráfica de usuario"

#: ..\python_docs\internals.py:72
msgid " * OS: Operating system"
msgstr " * SO: sistema operativo"

#: ..\python_docs\internals.py:73
msgid " * DLL: Dynamic Link Library"
msgstr " * DLL: biblioteca de vínculos dinámicos"

#: ..\python_docs\internals.py:74
msgid " "
msgstr " "

#: ..\python_docs\internals.py:75
msgid "### Definitions"
msgstr "### Definiciones"

#: ..\python_docs\internals.py:76
msgid ""
" * Caret: The system cursor; i.e. the cursor generally moved when you use "
"the normal cursor keys."
msgstr ""
" * Caret: el cursor del sistema; por ejemplo, el cursor que se mueve "
"generalmente cuando pulsas las flechas y el tabulador."

#: ..\python_docs\internals.py:77
msgid " * Focus: The highlighted region of screen where the system sets focus."
msgstr ""
" * Foco: la región resaltada de la pantalla donde el sistema establece el "
"foco."

#: ..\python_docs\internals.py:78
msgid ""
" * Script: A function which is executed in response to input from the user "
"such  as key presses from the keyboard, manipulating braille display "
"controls and taps on touchscreens. Also known as a command."
msgstr ""
" * Script: función que se ejecuta en respuesta a la entrada de usuario: "
"pulsaciones de teclado, manipulación de controles en pantallas braille o "
"toques en pantallas táctiles. El script también puede llamarse comando u "
"orden."

#: ..\python_docs\internals.py:79
msgid " * Gesture: A piece of input such as a keyboard command."
msgstr " * Gesto: unidad mínima de entrada. Por ejemplo, una orden de teclado."

#: ..\python_docs\internals.py:80
msgid " * Event: A routine to be used when certain conditions occur."
msgstr ""
" * Evento: código que debe ejecutarse cuando se dan ciertas condiciones."

#: ..\python_docs\internals.py:81
msgid ""
" * Widget: An individual component in a GUI with which a user can interact; "
"e.g. a button, an editable text field, a list box, etc. Also known as a "
"control or object."
msgstr ""
" * Widget: un componente individual en una GUI con el que el usuario puede "
"ineractuar; por ejemplo un botón, un campo de texto editable, un cuadro de "
"lista, etc. También es conocido como control u objeto."

#: ..\python_docs\internals.py:82
msgid "## General"
msgstr "## General"

#: ..\python_docs\internals.py:83
msgid "### Programming Languages"
msgstr "### Lenguajes de programación"

#: ..\python_docs\internals.py:84
msgid ""
"NVDA is primarily written in the [Python programming language](http://www."
"python.org/), which allows for rapid development among other benefits. Code "
"that needs to be [#In-processCode injected into other processes] is written "
"in C++ for high performance."
msgstr ""
"NVDA ha sido desarrollado principalmente con el [lenguaje de programación "
"Python](http://www.python.org/), que permite un desarrollo rápido entre "
"otras ventajas. El código que se inyecta en otros procesos está escrito en C+"
"+ para aumentar el rendimiento."

#: ..\python_docs\internals.py:85
msgid "Note: Because of dependencies, NVDA is written using Python 2.7."
msgstr "Nota: por cuestión de dependencias, NVDA utiliza Python 2.7."

#: ..\python_docs\internals.py:86
msgid "### Accessibility APIs"
msgstr "### Apis de accesibilidad"

#: ..\python_docs\internals.py:87
msgid ""
"In order to make graphical widgets accessible to assistive technologies, "
"operating systems and applications can use special purpose accessibility "
"APIs. These APIs provide information about the widget such as its name, type/"
"role (button, check box, editable text field, etc.), description, value, "
"states (checked, unavailable, invisible, etc.) and keyboard shortcut. "
"Accessibility APIs also provide events to allow assistive technologies to "
"monitor changes, such as when the focus changes, properties of an object "
"(such as name, description, value, and state) change, etc. Rich "
"accessibility APIs provide additional information, including the ability to "
"access detailed information about and track the cursor in editable text "
"controls, and table information such as row and column coordinates. NVDA "
"relies heavily on accessibility APIs to gather information. Several "
"accessibility APIs are used, including Microsoft Active Accessibility (MSAA) "
"(also known as IAccessible), [IAccessible2](http://www.linuxfoundation.org/"
"en/Accessibility/IAccessible2), Java Access Bridge and UI Automation."
msgstr ""
"Para hacer accesibles los widgets gráficos a las tecnologías de asistencia, "
"las aplicaciones y los sistemas operativos pueden usar apis específicas de "
"accesibilidad. Estas apis ofrecen información sobre el widget tal como su "
"nombre, tipo/rol (botón, casilla de verificación, campo de texto editable, "
"etc.), descripción, valor, estados (marcado, no disponible, invisible, etc.) "
"y atajo de teclado. Las apis de accesibilidad también ofrecen eventos para "
"permitir a las tecnologías de asistencia monitorizar cambios, tales como los "
"cambios de foco, de propiedades de un objeto (tales como nombre, "
"descripción, valor y estado), etc. Las apis de accesibilidad enriquecida "
"ofrecen información adicional, incluyendo la capacidad de acceder a detalles "
"de los campos de texto editables y seguir la posición del cursor, o conocer "
"en una tabla las coordenadas de fila y columna. NVDA se apoya en las apis de "
"accesibilidad para recopilar información. Se usan varias apis de "
"accesibilidad, incluyendo Microsoft Active Accessibility (MSAA, también "
"llamada IAccessible), [IAccessible2](http://www.linuxfoundation.org/en/"
"Accessibility/IAccessible2), Java Access Bridge y UI Automation."

#: ..\python_docs\internals.py:88
msgid "### Native APIs"
msgstr "### Apis nativas"

#: ..\python_docs\internals.py:89
msgid ""
"Some widgets do not expose sufficient information via accessibility APIs to "
"make them fully accessible. For example, MSAA, which is the accessibility "
"API used by most standard Windows controls, does not provide the ability to "
"obtain the location of the cursor or retrieve individual units of text in "
"editable text fields. However, some widgets provide their own native APIs "
"(not specific to accessibility) which can be used to obtain this "
"information. NVDA makes use of these APIs where possible; e.g. in standard "
"edit controls."
msgstr ""
"Algunos widgets no exponen información suficiente a las apis de "
"accesibilidad para ser completamente accesibles. Por ejemplo, MSAA, que es "
"la api de accesibilidad usada por la mayoría de controles estándar, no "
"ofrece la posibilidad de obtener la ubicación del cursor o recuperar "
"unidades individuales de texto en campos de texto editable. Sin embargo, "
"algunos widgets ofrecen sus propias apis nativas (no específicas para "
"accesibilidad) que pueden usarse para obtener esta información. NVDA hace "
"uso de estas apis cuando es posible; por ejemplo en campos de edición "
"estándar."

#: ..\python_docs\internals.py:90
msgid "### Operating System Functions"
msgstr "### Funciones del sistema operativo"

#: ..\python_docs\internals.py:91
msgid ""
"Aside from accessibility and native APIs, Windows provides many functions "
"which can be used to obtain information and perform tasks. Information that "
"can be obtained includes the class name of a window, the current foreground "
"window and system battery status. Tasks that can be performed include moving/"
"clicking the mouse and sending key presses."
msgstr ""
"Además de apis nativas y de accesibilidad, Windows ofrece muchas funciones "
"que pueden usarse para obtener información y realizar tareas. La información "
"que puede obtenerse incluye el nombre de clase de una ventana, la ventana "
"actual en primer plano o el estado de la batería del sistema. Entre las "
"tareas que pueden hacerse están mover el ratón o hacer clic con él y enviar "
"pulsaciones de teclado."

#: ..\python_docs\internals.py:92
msgid "## NVDA Components"
msgstr "## Componentes de NVDA"

#: ..\python_docs\internals.py:93
msgid ""
"NVDA is built with an extensible, modular, object oriented, abstract design. "
"It is divided into several distinct components."
msgstr ""
"NVDA ha sido construido con un diseño extensible, modular, abstracto y "
"orientado a objetos. Está dividido en muchos componentes distintos."

#: ..\python_docs\internals.py:94
msgid "### Launcher"
msgstr "### Lanzador"

#: ..\python_docs\internals.py:95
msgid ""
"The launcher is the module which the user executes to start NVDA. It is "
"contained in the file `nvda.pyw` (`nvda.exe` or variations for binary "
"builds). It handles command line arguments, performs some basic "
"initialisation and starts the [#Core core] (unless NVDA is already running "
"or a command line option specifies otherwise)."
msgstr ""
"El lanzador es el módulo que el usuario ejecuta para iniciar NVDA. Se "
"encuentra en el archivo `nvda.pyw` (`nvda.exe` o variantes en versiones "
"binarias). Este módulo procesa los argumentos de la línea de órdenes, "
"realiza una inicialización básica e inicia el núcleo (a menos que NVDA ya "
"esté ejecutándose o una opción de la línea de órdenes especifique lo "
"contrario)."

#: ..\python_docs\internals.py:96
msgid "### Core"
msgstr "### Núcleo"

#: ..\python_docs\internals.py:97
msgid ""
"The core (in the function `core.main`) loads the configuration, initialises "
"all other components and then enters the main loop."
msgstr ""
"El núcleo (en la función `core.main`) carga la configuración, inicializa "
"todos los demás componentes y entra en el bucle principal."

#: ..\python_docs\internals.py:98
msgid "The initialization steps in `core.main` are thus:"
msgstr "Por lo tanto, los pasos de inicialización en `core.main` son:"

#: ..\python_docs\internals.py:99
msgid ""
"1. Obtains the configuration file path and the name for the initial "
"configuration file unless overridden from the command line."
msgstr ""
"1. Se obtiene la ruta al archivo de configuración y el nombre del archivo de "
"configuración inicial, a menos que ya se especifique en la línea de órdenes."

#: ..\python_docs\internals.py:100
msgid ""
"2. Initializes configuration management subsystem (`config.initialize`)."
msgstr ""
"2. Se inicializa el subsistema de administración de configuración (`config."
"initialize`)."

#: ..\python_docs\internals.py:101
msgid ""
"3. Unless silenced by the user, NVDA's startup sound is played unless "
"minimal initialization option is specified in the command line."
msgstr ""
"3. A menos que el usuario lo silencie, se reproduce el sonido de inicio de "
"NVDA si la opción de inicialización mínima no se especifica en la línea de "
"órdenes."

#: ..\python_docs\internals.py:102
msgid "4. Obtains following information:"
msgstr "4. Se obtiene la siguiente información:"

#: ..\python_docs\internals.py:103
msgid ""
"* Log level as defined by the user unless a predefined log level is "
"specified in the command line."
msgstr ""
"* Nivel de registro tal y como lo ha definido el usuario, a no ser que se "
"especifique en la línea de órdenes un nivel de registro predefinido."

#: ..\python_docs\internals.py:104
msgid ""
"* Language (either a specific language or the language used by the Windows "
"operating system)."
msgstr "* Idioma (ya sea específico o el que usa Windows por defecto)."

#: ..\python_docs\internals.py:105
msgid "* Version information for NVDA, Python, Windows and COMTypes package."
msgstr ""
"* Información de versión de NVDA, Python, Windows y el paquete ComTypes."

#: ..\python_docs\internals.py:106
msgid ""
"5. Loads add-ons (by default, they live in addons folder in user "
"configuration folder). One of the jobs of this routine is to see if the user "
"told NVDA to disable add-ons."
msgstr ""
"5. Se cargan los complementos (por defecto, se encuentran en la carpeta "
"addons en el directorio de configuración de usuario). Uno de los trabajos "
"que se hacen en esta parte es comprobar si el usuario ha indicado que se "
"desactiven los complementos."

#: ..\python_docs\internals.py:107
msgid ""
"6. Next, NVDA continues by initializing app module handler, NvDA Helper and "
"speech components including speech dictionaries."
msgstr ""
"6. A continuación, NVDA inicializa el manejador de módulos de aplicación, "
"NVDA Helper y los componentes de voz incluyendo los diccionarios."

#: ..\python_docs\internals.py:108
msgid ""
"7. If it took NVDA five seconds or more to initialize components, this fact "
"is recorded and the user will hear, \"Loading NVDA, please wait\"."
msgstr ""
"7. Si la inicialización de componentes tarda más de cinco segundos, se "
"registra este hecho y se verbaliza la frase \"Cargando NVDA. Espera por favor"
"\"."

#: ..\python_docs\internals.py:109
msgid ""
"8. Next, wxPython, braille support (including braille input module), display "
"model and GUI subsystem are prepared."
msgstr ""
"8. Después WXPython, el soporte braille (incluyendo el módulo de entrada "
"braille), el modelo de pantalla y el subsistema gráfico se preparan."

#: ..\python_docs\internals.py:110
msgid ""
"9. Localization support preparation is next, preparing NVDA to display its "
"interface in the configured language."
msgstr ""
"9. El soporte de idiomas va después, preparando a NVDA para que muestre su "
"interfaz en el idioma adecuado."

#: ..\python_docs\internals.py:111
msgid ""
"10. The NVDA API module is initialized, including setting initial focus, "
"mouse and other objects."
msgstr ""
"10. Se inicializa el módulo api de NVDA. Aquí se incluye el establecimiento "
"inicial del foco, el ratón y otros objetos."

#: ..\python_docs\internals.py:112
msgid ""
"11. NvDA then initializes various modules for accessibility API's. In case "
"of Java Access Bridge (JAB) and UI Automation (UIA), relevant checks are "
"performed at this time (for example, making sure the user is running Windows "
"7 or later when initializing UIA support)."
msgstr ""
"11. NVDA inicializa módulos para distintas apis de accesibilidad. En el caso "
"de Java Access Bridge (JAB) o UI Automation (UIA), se realizan varias "
"comprobaciones en este paso (por ejemplo, se comprueba que el usuario tiene "
"Windows 7 o posterior antes de iniciar el soporte UIA)."

#: ..\python_docs\internals.py:113
msgid ""
"12. Next, input support modules are initialized, including the input core "
"itself and modules supporting input from keyboards, mice and touchscreens "
"(if one is installed on a computer running Windows 8 and later)."
msgstr ""
"12. Se inicializan los módulos de soporte de entrada, incluyendo el módulo "
"inputCore y los módulos que soportan la entrada desde teclados, ratones y "
"pantallas táctiles (si el ordenador tiene Windows 8 o posterior y alguna "
"pantalla instalada)."

#: ..\python_docs\internals.py:114
msgid ""
"13. Lastly, global plugin handler and global plugins are initialized. With "
"this step complete, basic NVDA features such as GUI support are ready for "
"action."
msgstr ""
"13. Finalmente, se inicializa el manejador de extensiones globales y las "
"propias extensiones. Con este paso completado, las características básicas "
"de NVDA como por ejemplo el soporte GUI están listas para la acción."

#: ..\python_docs\internals.py:115
msgid ""
"14. Depending on command line options, configuration values and "
"circumstances such as installing silently, NVDA will perform appropriate "
"action such as displaying the welcome dialog, performing automatic update "
"check and so on."
msgstr ""
"14. Dependiendo de las opciones de la línea de órdenes, valores de "
"configuración y circunstancias como la instalación silenciosa, NVDA "
"realizará las acciones adecuadas: mostrar el diálogo de bienvenida, "
"comprobar automáticamente si hay actualizaciones, etc."

#: ..\python_docs\internals.py:116
msgid ""
"The main loop keeps looping until NVDA is instructed to exit. IN each "
"iteration/tick, the core pumps the [#APIHandlers API] and [#InputHandlers "
"input] handlers, [#RegisteredGenerators registered generators] and the main "
"queue. All events, scripts, etc. are indirectly queued to this main queue by "
"API and input handlers, so pumping the main queue causes these to be "
"executed. The main loop is what \"drives\" NVDA or makes it \"tick\"."
msgstr ""
"El bucle principal se mantiene iterando hasta que NVDA recibe la orden de "
"salir. En cada iteración o ciclo, el núcleo llama a los manejadores de api y "
"entrada, a los generadores registrados y a la cola principal. Todos los "
"eventos, scripts, etc. llegan indirectamente a la cola principal a través de "
"los manejadores de api y entrada, por lo que al llamar a esta cola hacemos "
"que se ejecuten. El bucle principal es lo que le da vida a NVDA."

#: ..\python_docs\internals.py:117
msgid ""
"Once NVDA is instructed to exit, the core terminates all other components, "
"saves the configuration if appropriate and then exits. The details steps are "
"as follows:"
msgstr ""
"Una vez NVDA recibe la orden de salir, el núcleo hace finalizar a todos los "
"demás componentes, guarda la configuración si debe hacerlo y después sale. "
"Los pasos detallados son los siguientes:"

#: ..\python_docs\internals.py:118
msgid "1. If update check is in progress, tells update check to quit."
msgstr ""
"1. Si la comprobación de actualizaciones está en proceso, se le ordena "
"terminar."

#: ..\python_docs\internals.py:119
msgid ""
"2. NVDA then terminates watchdog (NVDA core monitor), global plugin support "
"(along with global plugins if any), GUI subsystem and saves user settings if "
"told to do so."
msgstr ""
"2. Se finaliza watchdog (el monitor del núcleo), el soporte de extensiones "
"globales (junto con las extensiones si hay alguna), el subsistema gráfico y "
"se guarda la configuración de usuario si hay que hacerlo."

#: ..\python_docs\internals.py:120
msgid ""
"3. If focus is located on a control, NVDA is instructed to call lose focus "
"event on this control."
msgstr ""
"3. Si el foco está ubicado en un control, NVDA llama al evento loseFocus en "
"este control."

#: ..\python_docs\internals.py:121
msgid ""
"4. NVDA continues by terminating various subsystems, starting with tree "
"interceptor handler, accessibility API support, app module handler and "
"various app modules, input handlers, speech and braille support and add-on "
"handler."
msgstr ""
"4. NVDA finaliza varios subsistemas, empezando por el manejador de "
"interceptores de árbol, el soporte de apis de accesibilidad, manejador de "
"módulos de aplicación y sus módulos cargados, manejadores de entrada, "
"soporte de voz y braille, y manejador de complementos."

#: ..\python_docs\internals.py:122
msgid ""
"5. Lastly, unless explicitly silenced, NVDA shutdown sound is played, and "
"the message window is destroyed."
msgstr ""
"5. Finalmente, a menos que haya sido silenciado explícitamente, se reproduce "
"el sonido de cierre de NVDA y se destruye la ventana de mensajes."

#: ..\python_docs\internals.py:123
msgid "#### Event and Script Handling"
msgstr "#### Procesamiento de scripts y entrada"

#: ..\python_docs\internals.py:124
msgid ""
"Rather than queuing scripts and events directly to the main queue, this is "
"abstracted using the `eventHandler` and `scriptHandler` modules. Input and "
"API handlers use these modules to queue or directly execute scripts and "
"events."
msgstr ""
"En vez de poner los eventos y los scripts directamente en la cola, esto se "
"abstrae mediante los módulos `eventHandler` y `scriptHandler`. Los "
"manejadores de api y entrada usan estos módulos para poner en la cola o "
"ejecutar directamente estos eventos y scripts."

#: ..\python_docs\internals.py:125
msgid "#### Registered Generators"
msgstr "#### Generadores registrados"

#: ..\python_docs\internals.py:126
msgid ""
"Some tasks need to run in the background without causing NVDA to block "
"(freeze) while waiting for them to complete. They need to execute code "
"regularly, but at no specific time interval. NVDA allows Python generator "
"functions to be registered for this purpose. Once registered, the generator "
"will be pumped once for each iteration/tick of the main loop. Examples of "
"this include the say all and speak spelling functionality. They are "
"registered using `queueHandler.registerGeneratorObject`."
msgstr ""
"Algunas tareas necesitan ejecutarse en segundo plano sin causar que NVDA se "
"bloquee (cuelgue) mientras espera a que estas tareas se completen. Necesitan "
"ejecutar código regularmente, pero no en un intervalo de tiempo concreto. "
"NVDA permite registrar funciones generadoras de Python con este propósito. "
"Una vez registradas, se ejecutarán una vez en cada ciclo o iteración del "
"bucle principal. Algunos ejemplos de esto son las funciones de verbalizar "
"todo o deletrear. Se registran llamando a `queueHandler."
"registerGeneratorObject`."

#: ..\python_docs\internals.py:127
msgid "### Input Handlers"
msgstr "### Manejadores de entrada"

#: ..\python_docs\internals.py:128
msgid ""
"The input handlers handle input from various sources. Currently, there are "
"three main input handler modules: `keyboardHandler`, `mouseHandler` and "
"`touchHandler`. [#OutputDrivers Braille display drivers] can also handle "
"input. These handlers listen for input and generate appropriate "
"[#InputGestures input gestures] and events."
msgstr ""
"Los manejadores de entrada gestionan la entrada desde distintas fuentes. "
"Actualmente, hay tres módulos principales de entrada: `keyboardHandler`, "
"`mouseHandler` y `touchHandler`. Los controladores de pantallas braille "
"también pueden procesar la entrada. Estos manejadores escuchan la entrada y "
"generan gestos de entrada y eventos según corresponda."

#: ..\python_docs\internals.py:129
msgid "### Input Gestures"
msgstr "### Gestos de entrada"

#: ..\python_docs\internals.py:130
msgid ""
"An input gesture is an abstract representation of a single piece of input "
"from the user; e.g. a key press. All input gestures derive from the base "
"`inputCore.InputGesture` class. This allows all input to be handled in a "
"consistent, unified way. For example, any input gesture can be bound to any "
"script, both in code and by the user."
msgstr ""
"Un gesto de entrada es una representación abstracta de una unidad mínima de "
"entrada por parte del usuario; por ejemplo, la pulsación de una tecla. Todos "
"los gestos de entrada heredan de la clase base `inputCore.InputGesture`. "
"Esto permite procesar toda la entrada de una manera consistente y unificada. "
"Por ejemplo, cualquier gesto de entrada puede asociarse a cualquier script, "
"tanto mediante código como por el propio usuario."

#: ..\python_docs\internals.py:131
msgid "### API Handlers"
msgstr "### Manejadores de api"

#: ..\python_docs\internals.py:132
msgid ""
"These handle initialisation, listening for events and termination for "
"specific accessibility and native APIs. They also contain utility functions "
"useful for working with their API. When an event is received for a widget, "
"an appropriate [#NVDAObjects NVDA object] is fetched or constructed and an "
"event is then queued for that NVDA object. Together with [#NVDAObjects NVDA "
"objects], they abstract the handling of queries and events for specific APIs "
"so that the bulk of NVDA need not be concerned with specific APIs. To "
"introduce support for a new API, a developer just creates another API "
"handler and appropriate NVDA objects without needing to change the majority "
"of the code. API handler modules include `IAccessibleHandler` for MSAA/"
"IAccessible and IAccessible2, `JABHandler` for Java Access Bridge and "
"`UIAHandler` for UI Automation."
msgstr ""
"Los manejadores de api administran la inicialización, finalización y escucha "
"de eventos en apis nativas y específicas de accesibilidad. También contienen "
"funciones útiles para trabajar con su api. Cuando se recibe un evento para "
"un widget, se construye o recupera un objeto NVDA adecuado y el evento se "
"mete en la cola para ese objeto. Además de los objetos NVDA, también "
"abstraen el manejo de eventos y consultas para apis específicas, por lo que "
"el resto de módulos no necesitan conocer los detalles internos de cada api. "
"Para introducir soporte para una nueva api, el desarrollador simplemente "
"crea otro manejador de api y objetos NVDA adecuados sin necesidad de cambiar "
"la mayoría del código. Los módulos manejadores de api incluyen "
"`IAccessibleHandler` para MSAA/IAccessible e IAccessible2, `JABHandler` para "
"Java Access Bridge y `UIAHandler` para UI Automation."

#: ..\python_docs\internals.py:133
msgid "### Output Modules"
msgstr "### Módulos de salida"

#: ..\python_docs\internals.py:134
msgid ""
"Separate modules encapsulate the handling of output functionality. "
"Currently, there are two main output modules: `speech` and `braille`. There "
"is also the `tones` module, which is used to output tones/beeps, and "
"`nvWave` module used to play wave files indicating specific events."
msgstr ""
"Distintos módulos encapsulan el manejo de la funcionalidad de salida. Hay "
"actualmente dos módulos principales: `speech` y `braille`. También está el "
"módulo `tones`, que se usa para reproducir tonos o pitidos, y el módulo "
"`nvWave`, usado para reproducir archivos de sonido wav ante ciertos eventos."

#: ..\python_docs\internals.py:135
msgid ""
"For most cases, speech and braille will output similar texts. To facilitate "
"this, a dedicated user interface (ui) module is provided to speak and/or "
"braille a message. This function (`ui.message`) calls `speech.speakMessage` "
"and `braille.handler.message` functions."
msgstr ""
"En la mayoría de casos, la síntesis de voz y el braille emitirán el mismo "
"texto de salida. Para facilitar esta tarea, se ofrece un módulo con una "
"interfaz de usuario dedicada (ui) para enviar un mensaje por voz y/o "
"braille. La función `ui.message` llama a las funciones `speech.speakMessage` "
"y `braille.handler.message`."

#: ..\python_docs\internals.py:136
msgid "### Output Drivers"
msgstr "### Controladores de salida"

#: ..\python_docs\internals.py:137
msgid ""
"Synth drivers are drivers to allow NVDA to utilise particular speech "
"synthesisers. They are derived from the `synthDriverHandler.SynthDriver` "
"base class."
msgstr ""
"Los controladores de sintetizador permiten que NVDA utilice distintos "
"sintetizadores de voz. Heredan de la clase base `synthDriverHandler."
"SynthDriver`."

#: ..\python_docs\internals.py:138
msgid ""
"Braille display drivers are drivers to allow NVDA to utilise particular "
"braille displays. They are derived from the `braille.BrailleDisplayDriver` "
"base class."
msgstr ""
"Los controladores de pantallas braille permiten que NVDA utilice modelos "
"específicos de estos dispositivos. Heredan de la clase base `braille."
"BrailleDisplayDriver`."

#: ..\python_docs\internals.py:139
msgid "### NVDA Objects"
msgstr "### Objetos NVDA"

#: ..\python_docs\internals.py:140
msgid ""
"An NVDA object (NVDAObject) is an abstract representation of a single widget "
"in NVDA. All NVDA objects derive from the base `NVDAObjects.NVDAObject` "
"class. Methods and properties are used to query information about, handle "
"events from and execute actions on the widget represented by the NVDA object "
"in an abstract way. This means that the bulk of NVDA need not be concerned "
"with specific accessibility or native APIs, but can instead work with a "
"single, abstract representation. This allows for the seemless support and "
"integration of many vastly different APIs."
msgstr ""
"Un objeto NVDA (NVDAObject) es una representación abstracta de un widget "
"único en NVDA. Todos los objetos NVDA heredan de la clase base `NVDAObjects."
"NVDAObject`. Los métodos y propiedades se usan para consultar información, "
"capturar eventos o ejecutar acciones en el widget  representado por el "
"objeto NVDA de una forma abstracta. Esto significa que la implementación de "
"NVDA no tiene que estar atada a apis nativas o de accesibilidad, sino que "
"puede trabajar con una representación única y abstracta. Esto permite "
"integrar y dar soporte a muchas apis diferentes."

#: ..\python_docs\internals.py:141
msgid ""
"It is here that the full power of object oriented programming is used. Many "
"methods are implemented on the base `NVDAObject` class and only need to be "
"overridden if specific functionality is required. Similarly, if a particular "
"widget is non-standard, problematic, provides additional information using "
"other mechanisms, etc., it can simply subclass another NVDA object and "
"override methods as appropriate."
msgstr ""
"Aquí es donde se usa todo el potencial de la programación orientada a "
"objetos. Muchos métodos se implementan en la clase base `NVDAObject`, y sólo "
"es necesario redefinirlos si se requiere funcionalidad específica. De forma "
"similar, si un widget en particular no es estándar, problemático, ofrece "
"información usando otros mecanismos, etc., simplemente se hace una subclase "
"de NVDAObject y se sobreescriben los métodos que correspondan."

#: ..\python_docs\internals.py:142
msgid ""
"NVDA objects that might be used in any application are contained in the "
"NVDAObjects package. [#AppModules App modules] may also define NVDA objects "
"specific to an application."
msgstr ""
"Los objetos NVDA que podrían usarse en cualquier aplicación se encuentran en "
"el paquete NVDAObjects. Los módulos de aplicación también pueden definir "
"objetos NVDA específicos para una aplicación."

#: ..\python_docs\internals.py:143
msgid "### Text Ranges"
msgstr "### Rangos de texto"

#: ..\python_docs\internals.py:144
msgid ""
"When working with editable text controls, NVDA needs to be able to obtain "
"information about the text in the widget. Aside from just retrieving the "
"entire text, proper navigation requires retrieval of specific units of text "
"(e.g. paragraphs, lines, words and characters), as well as the ability to "
"find and set the location of the caret and selection. Also, if the widget "
"supports formatting, NVDA should be able to retrieve text attributes such as "
"font name, size, bold, italic, underline and whether there is a spelling "
"error. Each API provides a different way of querying and manipulating text. "
"Just as NVDA objects provide an abstract representation of a widget, "
"TextInfo objects provide an abstract representation of a range of text. "
"These objects are derived from the `textInfos.TextInfo` base class."
msgstr ""
"Al trabajar con controles de texto editable, NVDA debe ser capaz de obtener "
"información sobre el texto en el widget. En vez de recuperar todo el texto "
"simplemente, para una navegación adecuada se necesitan recuperar unidades "
"específicas de texto (párrafos, líneas, palabras y letras), así como la "
"habilidad de buscar y establecer la ubicación del caret y la selección. "
"También, si el widget soporta formato, NVDA debería ser capaz de recuperar "
"atributos del texto tales como nombre de la fuente, tamaño, negrita, "
"cursiva, subrayado y si hay un error ortográfico. Cada api tiene su forma "
"particular de consultar y manipular texto. Al igual que los objetos NVDA "
"ofrecen una representación abstracta de un widget, los objetos TextInfo "
"ofrecen una representación abstracta de un rango de texto. Estos objetos "
"heredan de la clase base `textInfos.TextInfo`."

#: ..\python_docs\internals.py:145
msgid "### Global Commands"
msgstr "### Órdenes globales"

#: ..\python_docs\internals.py:146
msgid ""
"The global commands object (`globalCommands.GlobalCommands`) contains built-"
"in global scripts; i.e. they can be executed everywhere. For example, the "
"review, report current focus and date/time scripts are all located in global "
"commands."
msgstr ""
"El objeto de órdenes globales (`globalCommands.GlobalCommands`) contiene "
"scripts integrados; pueden ejecutarse en todas partes. Por ejemplo, los "
"scripts de revisar, verbalizar objeto bajo el foco o anunciar la hora y la "
"fecha están todos ubicados ahí."

#: ..\python_docs\internals.py:147
msgid "### Plugins"
msgstr "### Extensiones"

#: ..\python_docs\internals.py:148
msgid ""
"NvDA allows third-parties to extend NvDA's functionality through plugins and "
"add-ons. These may define custom NVDA objects for specific applications, add "
"global features and add support for new braille displays and speech "
"synthesizers. There are three plugin types: appModules, globalPlugins and "
"drivers, with drivers further divided between speech synthesizer and braille "
"display support."
msgstr ""
"NVDA permite a terceros extender su funcionalidad mediante extensiones y "
"complementos. Estos pueden definir objetos NVDA específicos para ciertas "
"aplicaciones, agregar características globales o añadir soporte para nuevas "
"pantallas braille y sintetizadores de voz. Hay tres tipos de extensiones: "
"módulos de aplicación, extensiones globales y controladores, donde estos "
"últimos se dividen en a su vez en sintetizadores de voz y soporte para "
"pantallas braille."

#: ..\python_docs\internals.py:149
msgid "#### App Modules"
msgstr "#### Módulos de aplicación"

#: ..\python_docs\internals.py:150
msgid ""
"Generally, most widgets may appear in any application and an [#NVDAObjects "
"NVDA object] should therefore be included in the main `NVDAObjects` package. "
"However, there are sometimes cases where a widget is implemented "
"specifically for one application, as well as cases where a single event must "
"be overridden or a script must be provided only in one application. An app "
"module provides support specific to an application for these cases."
msgstr ""
"Generalmente, la mayoría de widgets pueden aparecer en una aplicación y por "
"tanto se debería incluir un nuevo objeto NVDA en el paquete principal "
"`NVDAObjects`. Sin embargo, algunas veces se dan casos en los que se "
"implementa un widget específicamente para una aplicación, como también hay "
"casos donde debe sobreescribirse un único evento u ofrecerse un script sólo "
"en una aplicación. Un módulo de aplicación da soporte específico para una "
"aplicación en estos casos."

#: ..\python_docs\internals.py:151
msgid ""
"An app module is derived from the `appModuleHandler.AppModule` base class. "
"App modules receive events for all [#NVDAObjects NVDA objects] in the "
"application and can bind scripts which can be executed anywhere in that "
"application. They can also implement their own NVDA objects for use within "
"the application."
msgstr ""
"Un módulo de aplicación hereda de la clase base `appModuleHandler."
"AppModule`. Los módulos de aplicación reciben eventos para todos los objetos "
"NVDA que hay en la aplicación y pueden asociar scripts que pueden ejecutarse "
"en cualquier zona de esa aplicación. También pueden implementar sus propios "
"objetos NVDA para usarlos en el contexto de la aplicación."

#: ..\python_docs\internals.py:152
msgid "#### Global Plugins"
msgstr "#### Extensiones globales"

#: ..\python_docs\internals.py:153
msgid ""
"Aside from application specific customisation using [#AppModules app "
"modules], it is also possible to extend NVDA on a global level. For example, "
"new global commands can be added, behaviour can be changed and new GUI "
"toolkits can be supported. This can be done using global plugins."
msgstr ""
"Además de la personalización específica de aplicaciones usando módulos de "
"aplicación, es posible extender NVDA a nivel global. Por ejemplo, pueden "
"añadirse nuevas órdenes globales, cambios de comportamiento, soporte para "
"nuevos motores gráficos, etc. Esto puede hacerse con extensiones globales."

#: ..\python_docs\internals.py:154
msgid ""
"A global plugin is derived from the `globalPluginHandler.GlobalPlugin` base "
"class. Similar to [#GlobalCommands global commands], they can bind scripts "
"which can be executed everywhere. They can also implement their own global "
"[#NVDAObjects NVDA Objects]."
msgstr ""
"Una extensión global hereda de la clase base `globalPluginHandler."
"GlobalPlugin`. De forma similar a las órdenes globales, pueden asociar "
"scripts que pueden ejecutarse en todas partes. También pueden implementar "
"sus propios objetos NVDA."

#: ..\python_docs\internals.py:155
msgid "### Tree Interceptors"
msgstr "### Interceptores de árbol"

#: ..\python_docs\internals.py:156
msgid ""
"Sometimes, it is necessary to intercept events and scripts for an entire "
"hierarchy (or tree) of [#NVDAObjects NVDA objects]. For example, this is "
"necessary to seemlessly handle complex documents which consist of many "
"objects. This can be done using a tree interceptor."
msgstr ""
"En ocasiones, es necesario interceptar eventos y scripts para una jerarquía "
"entera (o árbol) de objetos NVDA. Por ejemplo, esto es necesario para "
"trabajar con documentos complejos que están formados por muchos objetos. "
"Esto puede hacerse usando un interceptor de árbol."

#: ..\python_docs\internals.py:157
msgid ""
"A tree interceptor (TreeInterceptor) is derived from the "
"`treeInterceptorHandler.TreeInterceptor` base class. It receives events and "
"scripts for all [#NVDAObjects NVDA objects] beneath and including the root "
"NVDA object. Tree interceptors are created when a TreeInterceptor class is "
"returned from the `treeInterceptorClass` property of an NVDA object."
msgstr ""
"Un interceptor de árbol (TreeInterceptor) hereda de la clase base "
"`treeInterceptorHandler.TreeInterceptor`. Recibe scripts y eventos para "
"todos los objetos NVDA que incluye, también para el objeto raíz. Los "
"interceptores de árbol se crean cuando se devuelve la clase TreeInterceptor "
"en la propiedad `treeInterceptorClass` de un objeto NVDA."

#: ..\python_docs\internals.py:158
msgid "### Virtual Buffers"
msgstr "### Buffers virtuales"

#: ..\python_docs\internals.py:159
msgid ""
"Complex documents such as web pages are very often not flat; i.e. "
"information does not simply run from top to bottom. Because of this, complex "
"document browsers often do not provide a way to navigate documents using the "
"caret, and even when they do, it is often problematic. Therefore, screen "
"readers need to create their own flat representation of a document from the "
"object hierarchy provided by the browser and allow the user to navigate this "
"flat representation. NVDA calls these virtual buffers. Due to the extreme "
"slowness of performing large numbers of [#Out-of-processCode out-of-process] "
"queries, NVDA creates these with the help of [#In-processCode in-process "
"code]."
msgstr ""
"Los documentos complejos tales como páginas web con mucha frecuencia no son "
"planos; la información no va de arriba hacia abajo. Por este motivo, los "
"exploradores de documentos complejos no ofrecen frecuentemente una manera de "
"navegar por ellos usando el caret, e incluso cuando lo hacen, suele dar "
"problemas. Por tanto, los lectores de pantalla necesitan crear una "
"representación plana de un documento a partir de la jerarquía de objetos "
"ofrecida por el navegador, y permitir al usuario navegar por esta "
"representación plana. NVDA llama a esto buffers virtuales. Debido a la "
"extrema lentitud al hacer un gran número de consultas fuera de proceso, NVDA "
"los crea con la ayuda de código dentro del proceso."

#: ..\python_docs\internals.py:160
msgid ""
"A virtual buffer (VirtualBuffer) in NVDA is derived from the `virtualBuffers."
"VirtualBuffer` base class and is a type of [#TreeInterceptors tree "
"interceptor]."
msgstr ""
"Un buffer virtual (VirtualBuffer) en NVDA hereda de la clase base "
"`virtualBuffers.VirtualBuffer` y es un tipo de interceptor de árbol."

#: ..\python_docs\internals.py:161
msgid "### GUI"
msgstr "### GUI"

#: ..\python_docs\internals.py:162
msgid ""
"NVDA has its own graphical user interface to allow for easy configuration "
"and other user interaction. This code is primarily contained in the `gui` "
"package. [wxPython](http://www.wxpython.org/) is used as the GUI toolkit."
msgstr ""
"NVDA dispone de su propia interfaz gráfica para facilitar el proceso de "
"configuración y otras interacciones del usuario. Su código está "
"principalmente dentro del paquete `gui`. Se usa [wxPython](http://www."
"wxpython.org/) como motor gráfico."

#: ..\python_docs\internals.py:163
msgid "## Special Object Functions"
msgstr "## Funciones especiales de objetos"

#: ..\python_docs\internals.py:164
msgid "### Events"
msgstr "### Eventos"

#: ..\python_docs\internals.py:165
msgid ""
"NVDA object, app module and virtual buffer instances can all contain special "
"methods which handle events for NVDA Objects. These methods are all named "
"beginning with \"event_\"; e.g. `event_gainFocus` and `event_nameChange`. "
"These events are generally executed by a call to `eventHandler."
"executeEvent`, which is in turn generally called resultant to events queued "
"by [#APIHandlers API Handlers]. Most events do not take any additional "
"arguments. App modules and virtual buffers are passed a handler function "
"which should be called if the event should be handled by the next handler; e."
"g. the object itself."
msgstr ""
"Todas las instancias de NVDAObject, AppModule y VirtualBuffer pueden "
"contener métodos especiales que capturan eventos para objetos NVDA. Todos "
"estos métodos se nombran empezando por \"event_\"; por ejemplo "
"`event_gainFocus` y `event_nameChange`. Estos eventos son generalmente "
"ejecutados en una llamada a `eventHandler.executeEvent`, realizada "
"generalmente en los eventos en cola puestos por los manejadores de api. La "
"mayoría de eventos no necesitan argumentos adicionales. Los módulos de "
"aplicación y buffers virtuales reciben una función manejadora a la que "
"debería llamarse si queremos que el evento capturado sea procesado por el "
"siguiente manejador de eventos; por ejemplo, el objeto en sí mismo."

#: ..\python_docs\internals.py:166
msgid "### Scripts"
msgstr "### Scripts"

#: ..\python_docs\internals.py:167
msgid ""
"NVDA object, app module and virtual buffer instances can all contain special "
"methods called scripts which are executed in response to [#InputGestures "
"input gestures] from the user. These methods are all named beginning with "
"\"script_\"; e.g. `script_reportCurrentFocus` and `script_dateTime`. Script "
"methods are passed the input gesture that triggered them."
msgstr ""
"Todas las instancias de NVDAObject, AppModule y VirtualBuffer pueden "
"contener métodos especiales llamados scripts, que se ejecutan como respuesta "
"a gestos de entrada por parte del usuario. Todos estos métodos se nombran "
"comenzando con \"script_\"; por ejemplo `script_reportCurrentFocus` y "
"`script_dateTime`. Los métodos de tipo script reciben como argumento el "
"gesto de entrada que los llamó."

#: ..\python_docs\internals.py:168
msgid ""
"Input gestures are bound to scripts in the class using a `__gestures` dict. "
"They can also be bound at runtime using `bindGesture`. These are inherited "
"from `baseObject.ScriptableObject`."
msgstr ""
"Los gestos de entrada se asocian a los scripts en la clase usando un "
"diccionario llamado `__gestures`. También pueden asociarse en tiempo de "
"ejecución llamando a `bindGesture`. Estos métodos se heredan de la clase "
"`baseObject.ScriptableObject`."

#: ..\python_docs\internals.py:169
msgid "## Inter-process Communication"
msgstr "## Comunicación interproceso"

#: ..\python_docs\internals.py:170
msgid ""
"In general terms, every running application or service on a computer, "
"including NVDA, is a separate process. No process can access data in another "
"process except via special operating system mechanisms. This is called inter-"
"process communication (IPC)."
msgstr ""
"En términos generales, cada aplicación o servicio en un ordenador, "
"incluyendo NVDA, constituye un proceso independiente. Ningún proceso puede "
"acceder a datos de otro proceso salvo si usa mecanismos especiales del "
"sistema operativo. Esto se llama comunicación interproceso (IPC)."

#: ..\python_docs\internals.py:171
msgid "### Out-of-process Code"
msgstr "### Código fuera del proceso"

#: ..\python_docs\internals.py:172
msgid ""
"NVDA functions primarily out-of-process. That is, events and queries for "
"information from other processes must be marshalled (communicated) between "
"NVDA and the process in question using IPC. This is many times slower than "
"queries and events managed in the same process. However, for the majority of "
"screen reader functionality, this performance hit is insignificant."
msgstr ""
"NVDA funciona principalmente fuera de los procesos. Esto significa que los "
"eventos y consultas de información de otros procesos deben fluir por un "
"canal de comunicaciones entre NVDA y el proceso en cuestión usando IPC. "
"Muchas veces esto es más lento que las consultas y eventos administradas en "
"el propio proceso. Sin embargo, para la mayoría de funciones del lector de "
"pantalla, la pérdida de rendimiento es insignificante."

#: ..\python_docs\internals.py:173
msgid "### In-process Code"
msgstr "### Código dentro del proceso"

#: ..\python_docs\internals.py:174
msgid ""
"When large numbers of queries need to be made in one hit, working [#Out-of-"
"processCode out-of-process] is far too slow. A noteworthy example is "
"rendering a web page into a flat representation, as is done by "
"[#VirtualBuffers virtual buffers]. In these cases, code can be \"injected\" "
"into the remote process. Because this code is running in the same process, "
"queries and events are much faster, as they do not have to be marshalled "
"between processes, which means that large numbers of queries are quite fast. "
"NVDA can then perform single out-of-process queries for relevant information."
msgstr ""
"Cuando es necesario hacer un gran número de consultas de golpe, trabajar "
"fuera del proceso es demasiado lento. Un ejemplo típico es el renderizado de "
"una página web en una representación plana, tal y como hacen los buffers "
"virtuales. En estos casos, el código puede \"inyectarse\" en el proceso "
"remoto. Como el código inyectado está en el proceso en cuestión, las "
"consultas y eventos son mucho más rápidos, ya que no hay que usar "
"comunicación interproceso. Esto significa que se pueden hacer muchas "
"consultas de golpe más rápido. NVDA puede realizar entonces consultas únicas "
"desde fuera del proceso y obtener información relevante."

#: ..\python_docs\internals.py:175
msgid ""
"In-process code must be small and light-weight, as it is being injected into "
"other processes. It must also be as fast as possible to allow for maximum "
"performance. Python is unsuitable for this task. All of NVDA's in-process "
"code is written in C++, which allows for maximum performance and minimal "
"overhead."
msgstr ""
"El código dentro del proceso debe ser pequeño y ligero, ya que se inyecta en "
"otros procesos. También debe ser tan rápido como sea posible para garantizar "
"el máximo rendimiento. Python no es adecuado para esta tarea. Todo el código "
"de NVDA que se inyecta en los procesos está escrito en C++, que garantiza un "
"rendimiento máximo y sobrecarga mínima."
