# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2018-02-10 11:53+Hora estándar romance\n"
"PO-Revision-Date: 2018-02-21 16:04+0100\n"
"Last-Translator: José Manuel Delicado Alcolea <josemanuel.delicado@urjc.es>\n"
"Language-Team: \n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"
"X-Generator: Poedit 2.0.6\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ..\python_docs\w10addoninternals.py:3
msgid "# NVDA Add-on internals: Windows 10 App Essentials"
msgstr "# Complementos de NVDA vistos por dentro: Windows 10 App Essentials"

#: ..\python_docs\w10addoninternals.py:4
msgid "Author: Joseph Lee"
msgstr "Autor: Joseph Lee"

#: ..\python_docs\w10addoninternals.py:5
msgid "Revision: December 2017"
msgstr "Revisión: diciembre de 2017"

#: ..\python_docs\w10addoninternals.py:6
msgid "## Introduction"
msgstr "## Introducción"

#: ..\python_docs\w10addoninternals.py:7
msgid ""
"Supporting new technologies can be fun and challenging, especially a new "
"operating system version that changes how people perform certain tasks and "
"introduces new ways of keeping up with changes. This is more so when it "
"comes to letting screen readers support new operating systems such as "
"Windows 10, which brings new ways of interacting with a computer, new set of "
"apps and technologies, and accessibility improvements and challenges. NVDA "
"includes solid support for Windows 10, including Microsoft Edge, the new "
"Start menu, navigation in universal apps and so on, all made possible thanks "
"to collaboration between users, Microsoft, NV Access and others, part of "
"which involves the add-on we will meet in this article."
msgstr ""
"Dar soporte a nuevas tecnologías puede ser un reto divertido, especialmente "
"si hablamos de la nueva versión de un sistema operativo que cambia el modo "
"que tiene la gente de realizar ciertas tareas y presenta nuevas formas de "
"mantenerse al día. Este reto es aún mayor cuando se centra en dar soporte a "
"los lectores de pantalla para que funcionen en nuevos sistemas operativos "
"tales como Windows 10, que trae nuevas formas de interactuar con el "
"ordenador, un nuevo conjunto de aplicaciones y tecnologías, y mejoras y "
"retos de accesibilidad. NVDA viene con un soporte sólido para Windows 10, "
"incluyendo Microsoft Edge, el nuevo menú de inicio, navegación en "
"aplicaciones universales y mucho más, todo hecho posible gracias a la "
"colaboración entre los usuarios, Microsoft, NV Access y otros. Parte de este "
"soporte se da gracias al complemento que encontraremos en este artículo."

#: ..\python_docs\w10addoninternals.py:8
msgid ""
"In NVDA Add-on Internals: Windows 10 App Essentials, we'll look at how this "
"add-on came about, how it works, and go over recommendations from the add-on "
"author (me) regarding accessibility practices. You'll also glimpse how UI "
"Automation works at a high level, how features start out as an add-on "
"component and end up as an NVDA feature and so on."
msgstr ""
"En Complementos de NVDA vistos por dentro: Windows 10 App Essentials, "
"veremos cómo se creó este complemento, cómo funciona, y algunas "
"recomendaciones de su autor (yo) relacionadas con prácticas de "
"accesibilidad. También estudiaremos cómo funciona UI Automation a alto "
"nivel, cómo algunas funciones empiezan en forma de complemento y acaban "
"integradas en NVDA, y mucho más."

#: ..\python_docs\w10addoninternals.py:9
msgid ""
"To download the add-on, visit https://addons.nvda-project.org/addons/"
"wintenApps.en.html. The source code for this add-on can be found at https://"
"github.com/josephsl/wintenApps. As Windows 10 and universal apps are UI "
"Automation universes, it is essential that you know some things about UIA, "
"which are covered later."
msgstr ""
"Para descargar este complemento, visita la sección correspondiente, que "
"encontrarás en el menú superior de nuestra web. El código fuente puede "
"encontrarse en https://github.com/josephsl/wintenApps. Ya que Windows 10 y "
"las aplicaciones universales pertenecen al mundo de UI Automation, es "
"esencial que sepas algunas cosas sobre UIA, que se cubren más adelante."

#: ..\python_docs\w10addoninternals.py:10
msgid ""
"Disclaimer: Despite the article text and knowledge that's contained within, "
"I (Joseph Lee, the add-on author) do not work for NV Access nor Microsoft."
msgstr ""
"Descargo de responsabilidad: a pesar del texto del artículo y los "
"conocimientos que contiene, yo (Joseph Lee, el creador del complemento) no "
"trabajo para NV Access ni Microsoft."

#: ..\python_docs\w10addoninternals.py:11
msgid ""
"Copyright: Microsoft Windows, Windows 10, Windows API, UI Automation, "
"Microsoft Edge, Universal Windows Platform (UWP) and related technologies "
"are copyright Microsoft Corporation. NVDA is copyright NV Access."
msgstr ""
"Derechos de copia: Microsoft Windows, Windows 10, Windows API, UI "
"Automation, Microsoft Edge, Universal Windows Platform (UWP) y otras "
"tecnologías relacionadas tienen copyright de Microsoft Corporation. NVDA "
"tiene copyright de NV Access."

#: ..\python_docs\w10addoninternals.py:12
msgid "## Introducing Windows 10"
msgstr "## Presentación de Windows 10"

#: ..\python_docs\w10addoninternals.py:13
msgid ""
"Windows 10 is the \"last major\" version of Windows for the foreseeable "
"future. It introduces a completely new way of keeping track of changes "
"through Windows Insider Program and Windows as a Service (WaaS, a fancy term "
"for continuous delivery), new application development framework, unification "
"strategy in terms of user experience across devices and a new web browser. "
"In addition, it features the return of an older style of Start menu, virtual "
"desktops, Action Center to centralize notifications, a way to run command-"
"line Linux utilities, and revamped Narrator that continues to receive "
"refinements."
msgstr ""

#: ..\python_docs\w10addoninternals.py:14
msgid ""
"Windows 10 made its maiden flight in October 2014. Back then, it was called "
"Windows Technical Preview, and after several weeks, it was renamed to "
"Windows Insider Program. Between October 2014 and July 2015 when Windows 10 "
"Version 1507 (build 10240) shipped, more than five million users became "
"Insiders, testing new builds and apps, submitting feedback and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:15
msgid ""
"I call the October 2014 preview (build 9841) a maiden flight for several "
"reasons. First, this is the first time where Microsoft did show interest in "
"user-level feedback. Although betas existed for earlier versions such as "
"Windows 7 and 8.1, Windows 10 is the first attempt from Microsoft at "
"connecting with users and taking comments seriously. Second, build 9841 (the "
"first Insider Preview build) hailed the start of Windows as a Service, a "
"completely different approach to upgrading Windows where Microsoft wanted to "
"provide two things: continuous delivery and feedback loop, and a unified "
"configuration that works well with most devices. There were setbacks, such "
"as privacy concerns due to telemetry, but for the most part, Windows 10 was "
"received positively."
msgstr ""

#: ..\python_docs\w10addoninternals.py:16
msgid ""
"There is another, more personal reason for calling October 2014 release a "
"maiden flight: I became one of the first Windows Insiders, and due to my "
"work on NVDA, I have decided to make sure screen reader users were treated "
"with respect. This included sending accessibility-related feedback, getting "
"other screen reader users onboard as Insiders, and releasing NVDA try builds "
"that resolved important issues for Windows Insiders. This culminated in the "
"release of Windows 10 App Essentials add-on in November 2015 (in time for "
"Windows 10 Version 1511/build 10586 release) that provided basic support for "
"Insider Hub (now Feedback Hub) and other workarounds, which translated to "
"superb user experience for NVDA users when it comes to using Windows 10 and "
"various universal apps. My work on championing accessibility continues "
"today, especially when it comes to making sure third-party universal apps "
"are usable by many."
msgstr ""

#: ..\python_docs\w10addoninternals.py:17
msgid "## Purposes of Windows 10 App Essentials"
msgstr ""

#: ..\python_docs\w10addoninternals.py:18
msgid "Windows 10 App Essentials add-on is built on top of four pillars:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:19
msgid ""
"* New features support: part of making sure screen reader users were treated "
"with respect was showcasing new Windows 10 features early through this NVDA "
"add-on. These include support for really old versions of Feedback Hub app, "
"emoji panel in Fall Creators Update and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:20
msgid ""
"* Essential features and announcements: Until early 2017, NVDA did not "
"announce important information such as status of Windows Update "
"installations in Settings app. This is about to change (see notes on live "
"region change event for details)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:21
msgid ""
"* UI Automation and accessibility workarounds: every day, new features and "
"bug fixes are added to various universal apps or Windows 10 itself. At the "
"same time, there is at least one app where accessibility, particularly UI "
"Automation, gets broken. Some of the add-on code is devoted to providing "
"workarounds for odd UIA implementations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:22
msgid ""
"* Demonstrating commitment to accessibility advocacy: some accessibility "
"champions, including I, have recently stressed that accessibility is "
"important in app designs, and that developers should take accessibility "
"feedback seriously. Through workarounds and features, the add-on provides a "
"way to demonstrate this commitment and advocacy."
msgstr ""

#: ..\python_docs\w10addoninternals.py:23
msgid "## Add-on contents"
msgstr ""

#: ..\python_docs\w10addoninternals.py:24
msgid ""
"The Windows 10 App Essentials add-on consists of a global plugin and app "
"modules for various universal apps that comes with Windows 10. The Windows "
"10 Objects (shortened to WinTenObjs), the global plugin portion of this add-"
"on, provides foundations such as overlay classes for frequently encountered "
"controls in Windows 10 an universal apps, UIA event tracking and logger, as "
"well as the add-on update facility. Details of how the add-on updater works "
"is covered in the article on StationPlaylist Studio add-on, as both add-ons "
"use the same update facility."
msgstr ""

#: ..\python_docs\w10addoninternals.py:25
msgid ""
"In regards to app modules, these were included to either provide workarounds "
"or enhance the user experience. For example, the app module for Settings app "
"(systemsettings) allows NVDA to announce Windows Update download and "
"installation progress, and app module for UWP frame host "
"(shellexperiencehost) includes a workaround for menu expanded status problem "
"in Start menu. We'll meet some of these app modules in subsequent sections."
msgstr ""

#: ..\python_docs\w10addoninternals.py:26
msgid "### A note on feature parity with NVDA screen reader"
msgstr ""

#: ..\python_docs\w10addoninternals.py:27
msgid ""
"Some features discussed in this article (such as suggestion sound playback "
"and live region change event handler) were integrated into recent NVDA "
"releases. I will point out some of these, as well as provide how these were "
"integrated, including planning involved and some tips on modifying add-on "
"features to fit into NVDA's code base."
msgstr ""

#: ..\python_docs\w10addoninternals.py:28
msgid "## Fun with UI Automation"
msgstr ""

#: ..\python_docs\w10addoninternals.py:29
msgid ""
"Before we dive into how the add-on works, it is helpful to understand what "
"UIA is and wy it is important. Only then the rest of the article makes "
"sense, as Windows 10 and universal apps are UIA universes."
msgstr ""

#: ..\python_docs\w10addoninternals.py:30
msgid ""
"UI Automation (UIA), released in 2007, is an accessibility API based on "
"Component Object Model (COM) that allows assistive technologies and other "
"programs to communicate with each other regarding accessibility information "
"about a control. In some respects, this API is a replacement for Microsoft "
"Active Accessibility (MSAA), sometimes called IAccessible that was released "
"in the 1990's. Being a COM-based API set, it allows programs and objects to "
"expose essential information regardless of programming language in use as "
"long as an object exposes documented routines that other programs can use."
msgstr ""

#: ..\python_docs\w10addoninternals.py:31
msgid ""
"In UIA world, an object on screen is termed an \"element\". Just like any "
"accessibility API's, UIA exposes various elements to assistive technologies, "
"which are termed \"clients\", with programs with the set elements termed "
"\"servers\". These elements are organized into a UI tree, with the Windows "
"Shell (desktop) object being the root, with tree being pruned and new leafs "
"springing constantly whenever apps are started and closed, elements are "
"created and destroyed, controls are shown and hidden on screen and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:32
msgid ""
"Although UIA is meant to replace MSAA due to modernized accessibility "
"information that can be gathered, screen reader vendors such as NV Access "
"publishes workarounds for poor or odd UIA implementations. One such case is "
"UIA issues in older versions of Microsoft Office, such as label problem in "
"various combo boxes. Certain areas in Windows 10 and universal apps still "
"has UIA issues, such as odd or badly applied control labels, generic XAML "
"(eXtensible Application Markup Language)/UI labels, expected events not "
"being fired and so on. This is one of the reasons for creating Windows 10 "
"App Essentials add-on: to provide workarounds for issues like these."
msgstr ""

#: ..\python_docs\w10addoninternals.py:33
msgid "### Automation ID and other interfaces and properties"
msgstr ""

#: ..\python_docs\w10addoninternals.py:34
msgid ""
"A key piece of information UIA exposes (or attempts to gather) is automation "
"ID, a string that uniquely identifies an element. For example, some search "
"fields expose \"SearchEditBox\" as automation ID, which allows screen "
"readers such as NVDA to detect these controls. Although most controls do "
"expose unique automation ID's, some uses generic or auto-generated "
"automation ID's (such as update history in Settings app)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:35
msgid "Other useful information exposed by UIA elements are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:36
msgid ""
"* Class name: the class name for this control, a string that denotes the "
"class of this element (not to be confused with automation ID that uniquely "
"identifies an element)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:37
msgid ""
"* Framework: the underlying framework used to create a given control such as "
"XAML, Direct UI and others."
msgstr ""

#: ..\python_docs\w10addoninternals.py:38
msgid ""
"* Localized control type: a role type text that should be spoken by screen "
"readers in different languages."
msgstr ""

#: ..\python_docs\w10addoninternals.py:39
msgid ""
"* Controller for: a list (array) of controls that this element manipulates "
"when performing actions such as search suggestions (explained below)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:40
msgid "### UIA events"
msgstr ""

#: ..\python_docs\w10addoninternals.py:41
msgid ""
"In addition to standard events expected from accessibility API's such as "
"focus manipulation and object property (such as name and state) changes, UIA "
"comes with some interesting events, including controller for, live region "
"changed and many others. Due to performance reasons, NVDA ignores certain "
"events such as structure change and others. How NVDA and Windows 10 App "
"Essentials deals with certain UIA events is covered later in this article."
msgstr ""

#: ..\python_docs\w10addoninternals.py:42
msgid "### UIA-related additions, fixes and workarounds"
msgstr ""

#: ..\python_docs\w10addoninternals.py:43
msgid ""
"The Windows 10 App Essentials add-on includes the following additions, fixes "
"and workarounds for UIA issues and control problems:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:44
msgid ""
"* Search suggestions: NVDA now plays a sound to indicate appearance of "
"search suggestions. More on this below."
msgstr ""

#: ..\python_docs\w10addoninternals.py:45
msgid ""
"* Live region change announcements in various apps. In the global plugin "
"portion, a way to define and track this event is included."
msgstr ""

#: ..\python_docs\w10addoninternals.py:46
msgid ""
"* Floating suggestions such as Emoji panel in Fall Creators Update and "
"hardware keyboard suggestions in Redstone 4."
msgstr ""

#: ..\python_docs\w10addoninternals.py:47
msgid ""
"* Providing more meaningful labels for certain controls such as update "
"history in Settings/Update and Security/Windows Update."
msgstr ""

#: ..\python_docs\w10addoninternals.py:48
msgid ""
"We'll meet various UIA controls and workarounds throughout this article."
msgstr ""

#: ..\python_docs\w10addoninternals.py:49
msgid "## Windows 10 Objects"
msgstr ""

#: ..\python_docs\w10addoninternals.py:50
msgid ""
"Windows 10 App Essentials add-on comes with Windows 10 Objects, a global "
"plugin that contains definitions of common controls encountered in Windows "
"10 and various universal apps. These include search suggestion handling, "
"looping selectors for time pickers and so on. It also includes configuration "
"and update facility for the add-on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:51
msgid "### Source code layout"
msgstr ""

#: ..\python_docs\w10addoninternals.py:52
msgid "The global plugin consists of the following:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:53
msgid "* winTenObjs/__init__.py: the base global plugin."
msgstr ""

#: ..\python_docs\w10addoninternals.py:54
msgid ""
"* winTenObjs/w10config.py: configuration and updates. As of June 2017, the "
"only thing configurable from Windows 10 App Essentials settings dialog is "
"update facility, which includes whether update check should be performed "
"automatically, update check interval and channel."
msgstr ""

#: ..\python_docs\w10addoninternals.py:55
msgid "The main global plugin file is laid out thus:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:56
msgid "1. Usual add-on header such as copyright information."
msgstr ""

#: ..\python_docs\w10addoninternals.py:57
msgid ""
"2. UIA constants not included in NVDA, including property ID's such as "
"controller for event. Most are now part of NVDA itself."
msgstr ""

#: ..\python_docs\w10addoninternals.py:58
msgid ""
"3. Classes defining various Windows 10 and universal app controls, including "
"search suggestions, looping selectors and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:59
msgid ""
"4. The actual global plugin class, consisting of overlay class finder and "
"tracking routines for various UIA events (only available if NVDA is "
"restarted with debug logging enabled)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:60
msgid "### Startup and shutdown"
msgstr ""

#: ..\python_docs\w10addoninternals.py:61
msgid "When the add-on loads, it performs three things:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:62
msgid ""
"1. Enables tracking of missing UIA events. For example, until May 2017, "
"controller for event (an event fired by a control that depends on another "
"control such as an edit field with search suggestions) wasn't available in "
"NVDA screen reader, but search suggestion announcement was made possible as "
"this add-on added this event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:63
msgid ""
"2. Adds user interface elements for this add-on, specifically add-on "
"settings."
msgstr ""

#: ..\python_docs\w10addoninternals.py:64
msgid "3. Checks for add-on updates if told to do so."
msgstr ""

#: ..\python_docs\w10addoninternals.py:65
msgid ""
"The only thing done at shutdown is terminating the update check facility and "
"removing user interface elements."
msgstr ""

#: ..\python_docs\w10addoninternals.py:66
msgid "### Notable Windows 10 objects and features"
msgstr ""

#: ..\python_docs\w10addoninternals.py:67
msgid "#### Sounds to indicate appearance of search suggestions"
msgstr ""

#: ..\python_docs\w10addoninternals.py:68
msgid ""
"In some edit fields such as search box in Start menu, a list of suggestions "
"will appear while entering text. for newer implementations, UIA controller "
"for event is raised if this happens, with different screen readers reacting "
"differently. For example, when typing something into Start search box while "
"using Narrator, Narrator will play a sound to indicate appearance of "
"suggestions, while old NVDA releases will announce top suggestion."
msgstr ""

#: ..\python_docs\w10addoninternals.py:69
msgid ""
"Because I felt it would be best to let users be notified when suggestions "
"appear and disappear (and in some respects, follow Narrator's footsteps), I "
"have implemented code to handle search suggestions. This is divided into "
"four components:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:70
msgid ""
"* One or more classes used to identify edit fields that does raise UIA "
"controller for event and ways to identify them. The reason for using several "
"classes for the same object is due to compatibility reasons, as older NVDA "
"releases does not come with a search field class. These classes include two "
"events related to controller for event:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:71
msgid "\t* `event_suggestionsOpened`: called when suggestions appear."
msgstr ""

#: ..\python_docs\w10addoninternals.py:72
msgid ""
"\t* `event_suggestionsClosed`: called when suggestions disappear. There are "
"controls that does not raise this, including Edge's address omnibar."
msgstr ""

#: ..\python_docs\w10addoninternals.py:73
msgid "* A class representing the suggestion items themselves."
msgstr ""

#: ..\python_docs\w10addoninternals.py:74
msgid "* A set of sounds to indicate appearance/disappearance of suggestions."
msgstr ""

#: ..\python_docs\w10addoninternals.py:75
msgid ""
"* A compatibility layer for old and upcoming NVDA releases as noted above."
msgstr ""

#: ..\python_docs\w10addoninternals.py:76
msgid ""
"In addition, in some cases, it is helpful to announce how many suggestions "
"have appeared, thus a routine has been added to announce this. With this "
"added, the complete picture is as follows:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:77
msgid "1. User types text into a search field."
msgstr ""

#: ..\python_docs\w10addoninternals.py:78
msgid ""
"2. NVDA will notice controller for event and will look for suggestions list. "
"If such a list is found, NVDA will play the suggestion sound by raising "
"suggestions opened event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:79
msgid ""
"3. If suggestions are found, it'll announce the top suggestion or suggestion "
"count. The former is for Start menu, while the latter is for other edit "
"fields."
msgstr ""

#: ..\python_docs\w10addoninternals.py:80
msgid ""
"4. One can then use up or down arrow keys to move through suggestions, then "
"press Enter to select or Escape to close suggestions list. When closing "
"suggestions list, NVDA will play suggestions close sound."
msgstr ""

#: ..\python_docs\w10addoninternals.py:81
msgid ""
"Since NVDA 2017.3, suggestion announcement (not the count) is part of the "
"screen reader."
msgstr ""

#: ..\python_docs\w10addoninternals.py:82
msgid "#### Tracking UIA events for controls"
msgstr ""

#: ..\python_docs\w10addoninternals.py:83
msgid ""
"The Windows 10 Objects global plugin also has ability to track UIA events "
"for controls and log info  about them, executed via `uiaDebugLogging` "
"function that takes an object and the event name. This function records the "
"following if NVDA is started with debug logging enabled:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:84
msgid "* Object name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:85
msgid "* Name of the event being logged."
msgstr ""

#: ..\python_docs\w10addoninternals.py:86
msgid "* App where the control can be found (specifically, the app module)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:87
msgid "* Automation ID."
msgstr ""

#: ..\python_docs\w10addoninternals.py:88
msgid "* UIA class name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:89
msgid ""
"* For controller for event, the list of objects the given control depends on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:90
msgid "#### Looping selectors"
msgstr ""

#: ..\python_docs\w10addoninternals.py:91
msgid ""
"A looping selector is a combo box-like control where the selection loops "
"around. This is employed in places such as Alarms and Clock, Settings/Update "
"and Security/Windows Update/active hours and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:92
msgid ""
"In older Windows 10 and universal app releases, when changing selector "
"values, item selected UIA event wasn't fired. To get around this, the add-on "
"will examine states for each item and announce if an item has selected "
"state. This isn't the case for newer implementations, but for backward "
"compatibility, the old routines are kept."
msgstr ""

#: ..\python_docs\w10addoninternals.py:93
msgid "#### Live region change events"
msgstr ""

#: ..\python_docs\w10addoninternals.py:94
msgid ""
"Some controls are live regions - that is, a control whose content denotes "
"live text, such as progress of something, alerts and so on. Because of odd "
"live region change event implementations, older NVDA releases does not "
"support this event natively, but NVDA 2017.3 and later includes a trivial "
"implementation where NVDA will announce the live region text i.e. object "
"name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:95
msgid ""
"The Windows 10 Objects goes one step further by recording instances of this "
"event and providing workarounds for specific cases. These include announcing "
"correct text for Edge alerts (see below), preventing repeat announcements in "
"some apps and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:96
msgid "## App modules for universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:97
msgid ""
"In addition to Windows 10 Objects global plugin, the add-on comes with app "
"modules designed to provide extra support for various universal apps that "
"comes with Windows 10. These modules include enhancers and/or fixers, "
"broadly divided into five categories:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:98
msgid "1. Adding extra features."
msgstr ""

#: ..\python_docs\w10addoninternals.py:99
msgid "2. Supporting new technologies."
msgstr ""

#: ..\python_docs\w10addoninternals.py:100
msgid ""
"3. Announcing (or, more recently, suppressing extraneous announcement of) "
"information in various situations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:101
msgid "4. Workarounds for UIA issues."
msgstr ""

#: ..\python_docs\w10addoninternals.py:102
msgid ""
"5. Respond to changes in apps, and in at least three occasions, adding "
"aliases due to renamed executable names."
msgstr ""

#: ..\python_docs\w10addoninternals.py:103
msgid "The modules and enhancers/fixers applied are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:104
msgid "* Calculator: selectively announce calculator display."
msgstr ""

#: ..\python_docs\w10addoninternals.py:105
msgid "* Calendar: suppress read-only state announcement in various controls."
msgstr ""

#: ..\python_docs\w10addoninternals.py:106
msgid ""
"* Cortana/Start menu: suppress double announcement of suggestion result item "
"in some cases, staying silent when user is dictating to Cortana."
msgstr ""

#: ..\python_docs\w10addoninternals.py:107
msgid ""
"* Mail: table navigation commands in message list, suppress read-only "
"announcement in email content, app alias for hxmail.exe and hxoutlook.exe "
"(the latter for updates released in May 2017)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:108
msgid ""
"* Maps: play location coordinates for map items, suppress repeated live "
"region announcements, aliases to support old and new Maps releases (the old "
"alias, maps_windows, is gone)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:109
msgid ""
"* Microsoft Edge: announce correct alert text, supports both the overall "
"Microsoft Edge process and the content process (microsoftedgecp.exe)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:110
msgid ""
"* Modern keyboard: support for emoji panel and hardware input suggestions."
msgstr ""

#: ..\python_docs\w10addoninternals.py:111
msgid "* MSN Weather: use up or down arrow keys to read forecast information."
msgstr ""

#: ..\python_docs\w10addoninternals.py:112
msgid ""
"* Settings: selectively announce various status information, provide correct "
"labels for certain controls."
msgstr ""

#: ..\python_docs\w10addoninternals.py:113
msgid ""
"* Shell Experience Host: work around some UIA state information mismatch."
msgstr ""

#: ..\python_docs\w10addoninternals.py:114
msgid ""
"* Skype (modern): commands to move to various Skype controls, commands to "
"read recent messages, suppress extraneous text from new messages."
msgstr ""

#: ..\python_docs\w10addoninternals.py:115
msgid ""
"* Store: announce needed information when live region changed event is fired "
"by some controls, aliases to support old and new Store versions (the old "
"alias, winstore_mobile, is no more)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:116
msgid "### Adding useful features in apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:117
msgid ""
"The following app modules add functionality unique to NVDA and/or commands "
"that are used to improve user experience when using apps:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:118
msgid ""
"* Maps (maps.py): when using object navigation to examine a map, a tone will "
"be played to indicate where things are located on the map. This is achieved "
"by defining a custom handler for `event_becomeNavigatorObject` that'll take "
"the coordinates of the object (in pixels) and play a tone, essentially "
"emulating mouse coordinate beeps in NVDA. The app module also allows users "
"to hear new locations when using street view to navigate the map, and this "
"is done through handlers for live region changed event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:119
msgid ""
"* Mail (hxmail.py): when focused on messages list, one can use table "
"navigation commands (Control+Alt+arrow keys) to review message headers. This "
"is possible thanks to two things: headers are child objects of the message "
"item, and because of this, `NVDAObjects.behaviors.RowWithFakeNavigation` "
"class can be employed to add this functionality."
msgstr ""

#: ..\python_docs\w10addoninternals.py:120
msgid ""
"* MSN Weather (microsoft_msn_weather.py): this app module, contributed by "
"Derek Riemer, allows users to use up and down arrow keys to read forecast "
"information, achieved by calling corresponding review cursor movement "
"commands to move by line."
msgstr ""

#: ..\python_docs\w10addoninternals.py:121
msgid ""
"* Skype (skype_app.py): this app module responds to name change events, "
"useful for announcing new messages, as well as defining routines for Control"
"+NVDA+number row to announce recent messages. How NVDA filters texts from "
"messages is discussed below in UIA workarounds section."
msgstr ""

#: ..\python_docs\w10addoninternals.py:122
msgid "### A note on modern keyboard"
msgstr ""

#: ..\python_docs\w10addoninternals.py:123
msgid ""
"Modern keyboard "
"(windowsinternal_composableshell_experiences_textinput_inputapp.py) is the "
"name of the app that provides various features, including emoji panel and "
"hardware input suggestions. This is not exactly an app, but more towards a "
"floating overlay, much akin to touch keyboard on touchscreen devices. "
"Powering these is a redesigned touch keyboard where XAML-based touch panel "
"(with its own process) is used."
msgstr ""

#: ..\python_docs\w10addoninternals.py:124
msgid ""
"In Windows 10 Insider Preview build 16215 and later, it is possible for "
"users to browse and select emojis to insert in an edit field. This is done "
"by pressing Windows+period (.) or Windows+semicolon (;). A floating panel of "
"emoji categories and emojis will appear. One can then use arrow keys to move "
"through emojis or Tab and Shift+Tab to cycle through categories. In build "
"16226, one can type emoji descriptions to narrow the emoji field."
msgstr ""

#: ..\python_docs\w10addoninternals.py:125
msgid ""
"When this panel opens, a menu open event is fired by the emoji panel, an "
"event NVDA does not detect for performance reasons. As items are selected, "
"an item selected event is fired, to which NVDA responds by walking the panel "
"in a tree-like fashion in order to locate the item selected. The actual "
"announcement of emoji characters depends on synthesizers; currently, only "
"recent SAPI5 and OneCore (aka SAPI Mobile) voices ships with definitions of "
"emoji characters."
msgstr ""

#: ..\python_docs\w10addoninternals.py:126
msgid ""
"Similar to emoji panel, in build 17025 and later, modern keyboard can also "
"provide input suggestions. This is done by checking a new option in Settings/"
"Devices/Typing, and activated when one presses up arrow while typing (only "
"United States English keyboard layout is supported). Just like emoji panel, "
"a floating window appears, and in this case, one can press left or right "
"arrow to navigate between suggestions and press Enter to accept the offered "
"item."
msgstr ""

#: ..\python_docs\w10addoninternals.py:127
msgid "### What to announce, what not to announce"
msgstr ""

#: ..\python_docs\w10addoninternals.py:128
msgid ""
"It is sometimes helpful to let users know what's going on by announcing "
"various status information, while at other times it is equally important to "
"not announce extraneous messages. The former was the case for majority of "
"app modules below in the past, but since mid-2017, reverse is happening more "
"frequently."
msgstr ""

#: ..\python_docs\w10addoninternals.py:129
msgid "The app modules in question are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:130
msgid ""
"* Calculator (calculator.py): while entering calculations, entered "
"expression will be announced via name change handler. Because this may "
"interfere with typed character announcement in NVDA, the calculator display "
"will be announced only when actual results appear or when the display is "
"cleared."
msgstr ""

#: ..\python_docs\w10addoninternals.py:131
msgid ""
"* Cortana (searchui.py): Cortana uses name change events and specific "
"automation ID's to convey text messages. Name change event is also employed "
"when Cortana tries to understand the text a user is dictating, which in old "
"releases of the add-on meant NVDA would announce gibberish, subsequently "
"resolved in recent add-on releases."
msgstr ""

#: ..\python_docs\w10addoninternals.py:132
msgid ""
"* Settings (systemsettings.py): NVDA will announce messages such as Windows "
"Update notifications, and this is done through live region changed event "
"(name change event in older add-on releases0/"
msgstr ""

#: ..\python_docs\w10addoninternals.py:133
msgid ""
"* Store (winstore_app.py): just like Settings app, status messages are "
"announced, this time dealing with product downloads such as apps and "
"multimedia content."
msgstr ""

#: ..\python_docs\w10addoninternals.py:134
msgid "### Hunting for UIA implementation issues"
msgstr ""

#: ..\python_docs\w10addoninternals.py:135
msgid ""
"As noted above, some controls ship with odd or bad UIA implementations, and "
"universal apps are no exception (at least for app modules that ships with "
"the add-on). Because of this, the following app modules include workarounds "
"for various UIA problems:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:136
msgid ""
"* Calendar (hxcalendarappimm.py) and Mail (hxmail.py): some edit fields, "
"such as appointment title and others are shown as read-only when they are "
"not, and removing this state from states set for these controls resolved "
"this problem."
msgstr ""

#: ..\python_docs\w10addoninternals.py:137
msgid ""
"* Cortana: some search suggestions expose same text for name and "
"description, which results in repeats for suggestion result text. This was "
"corrected by comparing name and description and nullifying the description "
"(obj.description = None)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:138
msgid ""
"* Maps: despite no changes to the app, live region changed event is fired by "
"map title control, so NvDA includes a way to suppress repetitions."
msgstr ""

#: ..\python_docs\w10addoninternals.py:139
msgid ""
"* Microsoft Edge (microsoftedge.py and microsoftedgecp.py): for some alerts, "
"the name of the control that fires live region changed event has the name of "
"\"alert\", with the actual text as the last child, thus NVDA will look for "
"actual alert text when announcing alerts."
msgstr ""

#: ..\python_docs\w10addoninternals.py:140
msgid ""
"* Settings and Store: for some controls (such as wehn downloading content "
"from Store), a specific status control fires live region changed event. "
"Unfortunately, the text for them are generic (for example, \"downloading "
"some percent\" as opposed to announcing the product one is downloading), "
"thus NVDA will locate information such as product names when this happens to "
"make this easier to follow. Also, in Settings app, some controls in older "
"versions of this app have no label, thus NVDA is told to look for labels to "
"traversing sibling (next/previous) objects."
msgstr ""

#: ..\python_docs\w10addoninternals.py:141
msgid ""
"* Shell Experience Host (shellexperiencehost.py): for some submenus, NVDA "
"does not know that it is a submenu, thus worked around by teachying NVDA to "
"recognize the proper role and state for these."
msgstr ""

#: ..\python_docs\w10addoninternals.py:142
msgid ""
"* Skype: a typical Skype message includes author name, message channel, the "
"message content, sent date and so on. This is due to list view item "
"implementations where it gathers names of children. Unfortunately, the "
"reverse isn't true: although some items do expose the needed message author "
"and content, some only exposes content when looking at child objects. Thus a "
"regular expression is provided to remove extraneous information until a "
"suitable workaround is found."
msgstr ""

#: ..\python_docs\w10addoninternals.py:143
msgid "### A tale on app module and executable names"
msgstr ""

#: ..\python_docs\w10addoninternals.py:144
msgid ""
"One of the side-effects of continuous delivery is appearance of "
"unanticipated changes. This is more so when a workaround for an app broke "
"simply because the name of the executable or the app has changed. In "
"addition, some apps shipped with an executable whose name broke Python's "
"module name and import routines."
msgstr ""

#: ..\python_docs\w10addoninternals.py:145
msgid "The specific issues encountered were:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:146
msgid ""
"* Mail, Maps and Store: executable names have changed in recent months. For "
"example, in May 2017, workarounds in place for Mail app broke when Microsoft "
"renamed hxmail to hxoutlook. Microsoft Edge is a special case of this "
"because it requires use of two app modules: microsoftedge.exe for web "
"browser management, and microsoftedgecp.exe (content process) for displaying "
"content in a more securie way. Due to this, aliasing (a new app module "
"importing everything from an old version) is common."
msgstr ""

#: ..\python_docs\w10addoninternals.py:147
msgid ""
"* MSN Weather, Store, modern keyboard and others: some executable names have "
"a dot (.) in the middle, which breaks app module import routines. This is "
"countered by replacing dots with underscores (_). For example, for Skype, "
"the actual executable name is skype.app.exe, while the app module for this "
"app is named skype_app.py. This fix is now part of recent NVDA releases."
msgstr ""

#: ..\python_docs\w10addoninternals.py:148
msgid "## Few remarks"
msgstr ""

#: ..\python_docs\w10addoninternals.py:149
msgid "### UIA performance"
msgstr ""

#: ..\python_docs\w10addoninternals.py:150
msgid ""
"Numerous issues were filed on NVDA's GitHub page regarding UIA performnace "
"issues. These include issues in early days of Edge support where navigating "
"the document was slow (resolved in NVDA 2017.2), list view issues in File "
"Explorer while using a program with high CPU usage (GoldWave, for example) "
"and so on. While some are specific to NVDA, others are reproducible while "
"using Narrator, hence NV Access and Microsoft are actively collaborating on "
"identifying and writing fixes for performance and control implementation "
"problems (such as some of the ones listed above)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:151
msgid ""
"### Narrator is the new reference in screen reading in Windows 10 and "
"universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:152
msgid ""
"Until a few years ago, any screen reader wishing to support an app or add "
"features would look up to JAWS for Windows for guidance. This is no longer "
"the case with Windows 10 and universal apps, as Narrator provides a useful "
"yardstick (at least a base implementation other screen reader vendors should "
"respond to) when it comes to reading text on screen, feature set for "
"supporting universal apps, and investigate UIA issues. Some of the features "
"discussed above, such as search suggestion notification, were inspired by "
"Narrator's handling of various UIA events, and because Narrator reads what "
"is told to read, NVDA ships with workarounds for odd UIA implementations to "
"get around some poblems."
msgstr ""

#: ..\python_docs\w10addoninternals.py:153
msgid "### Integrating features from this add-on to NVDA screen reader"
msgstr ""

#: ..\python_docs\w10addoninternals.py:154
msgid ""
"As noted above, some add-on features are being integrated into NVDA. These "
"include search suggestion notification, combo box workaround, live region "
"changed event tracking and announcement and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:155
msgid ""
"Typically, when a feature from an add-on is integrated into NVDA, it goes "
"through a typical issue-review-test-documentation cycle. To illustrate this, "
"let us go through steps involved in getting search suggestions into NVDA:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:156
msgid "1. Issue: an issue regarding search suggestions was filed in 2016."
msgstr ""

#: ..\python_docs\w10addoninternals.py:157
msgid ""
"2. Review: I and NV Access went through a review phase where implementation "
"detials were discussed and test cases written."
msgstr ""

#: ..\python_docs\w10addoninternals.py:158
msgid ""
"3. Test: in 2017, search suggestion feature made its debut in an NVDA next "
"snapshod. This resulted in feedback from users regarding braille support, "
"sounds and others. After several weeks, this feature was made available to "
"master snapshot users, thus ready for NVDA 2017.3."
msgstr ""

#: ..\python_docs\w10addoninternals.py:159
msgid ""
"4. Documentation: the search suggestion feature was documented in the user "
"guide. Discussion of this feature in this article is a special case of "
"documentation step."
msgstr ""

#: ..\python_docs\w10addoninternals.py:160
msgid ""
"In addition, when a feature from an add-on is under consideration for "
"inclusion in NVDA, I modify the add-on source code to make it compliant with "
"NVDA source code guidelines, such as commenting style, copyright header and "
"so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:161
msgid "### Giving feedback to app developers"
msgstr ""

#: ..\python_docs\w10addoninternals.py:162
msgid ""
"Feedback drives Windows 10 and universal apps. one of the reasons for "
"instituting Windows Insider Program, as noted by Microsoft and others, is to "
"gather feedback from millions of users in hopes of making Windows 10 better "
"in the long run. As such, sending feedback regarding Windows 10 and "
"preinstalled universal apps, as well as third-party apps is crucial at the "
"age of feedback-driven development."
msgstr ""

#: ..\python_docs\w10addoninternals.py:163
msgid "Here are some tips regarding sending feedback to app writers:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:164
msgid ""
"1. Embrace: have willingness to embrace (use and test) the app in question."
msgstr ""

#: ..\python_docs\w10addoninternals.py:165
msgid ""
"2. Document: if something happens, document what happened, steps to "
"reproduce, and possible workarounds."
msgstr ""

#: ..\python_docs\w10addoninternals.py:166
msgid ""
"3. Send: send feedback to developers (Feedback Hub, contacting developers of "
"third-party universal apps, screen reader vendors and so on)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:167
msgid ""
"4. Follow-up: follow-up with developers if they have questions for you or "
"you want to know what's going on with your feedback."
msgstr ""

#: ..\python_docs\w10addoninternals.py:168
msgid "### Accessibility best practices for universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:169
msgid ""
"As a Windows Insider, a screen reader contributor and the author of a screen "
"reader add-on for Windows 10 and universal apps, I came across numerous "
"examples where apps were inaccessible at first, or usability was "
"overshadowed by issues when working with controls, navigation and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:170
msgid ""
"Here are some tips in hopes of making universal apps truly universally "
"accessible and usable:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:171
msgid ""
"* Listen to feedback, especially feedback coming from users with "
"disabilities such as screen reader users."
msgstr ""

#: ..\python_docs\w10addoninternals.py:172
msgid ""
"* Do not put accessibility as an afterthought, nor something you want to "
"work in the future (say, version 3). Proactive accessibility and "
"investigations into issues is something app developers should learn as they "
"develop apps."
msgstr ""

#: ..\python_docs\w10addoninternals.py:173
msgid ""
"* Test with screen readers and other assistive technologies: one way to "
"validate accessibility issues raised by users with disabilities is using "
"assistive technologies in real life. Use facilities offered by screen "
"readers such as Python console in NVDA, developer mode in Narator and so on "
"in hopes of locating where the root of the issue lies."
msgstr ""

#: ..\python_docs\w10addoninternals.py:174
msgid ""
"* Try using keyboards and other input methods offered by various assistive "
"technologies: touchscreen isn't the only input method used in universal "
"apps. Many screen reader users use a keyboard to interact with apps, and "
"some use touchscreen gestures offered by screen readers to navigate an app "
"and respond to changes. Try using them to make sure app features are working "
"as advertised when using keyboards and other input methods."
msgstr ""

#: ..\python_docs\w10addoninternals.py:175
msgid ""
"* Use useful labels: in case the control has no label as reported by screen "
"readers, be sure to provide labels. A good historical case is Windows "
"Defender Security Center where there was no label for various buttons in "
"2016, which was fixed in 2017 with Creators Update. Also, avoid generic XAML "
"labels such as someclass.someotherclass.such (especialy lists and list "
"items), as it does not provide an accurate picture as to where one is "
"located. A classic case is Feedback Hub app where generic labels for lists "
"were presnet in older versions, subsequently fixed in recent updates."
msgstr ""

#: ..\python_docs\w10addoninternals.py:176
msgid ""
"* Raise appropriate UIA events: screen readers listen to UIA events to "
"detect what's happening with apps. For example, if there's a need to anounce "
"suggestions, controller for event should be fired. An example is Store where "
"old releases did not raise controller for event when content suggestions "
"appeared, with recent versions raising this event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:177
msgid "## Conclusion"
msgstr ""

#: ..\python_docs\w10addoninternals.py:178
msgid ""
"With the introduction of Windows 10 and Universal Windows Platform, a new "
"way of connecting users and developers has emerged: feedback-driven "
"development. This allows users to send feedback regarding features and bugs, "
"including that of accessibility feedback. Although accessibility of Windows "
"10 and universal apps were spotty at first, this situation is improving, "
"driven by Microsoft's commitment to accessibility, continued feedback, and "
"collaboration between Microsoft and assistive technology vendors."
msgstr ""

#: ..\python_docs\w10addoninternals.py:179
msgid ""
"In terms of NVDA, what made Windows 10 usability possible was not only "
"changes made from within Windows and universal apps, but also proactive "
"investigations into making sure NVDA users have a great time with Windows "
"10. Windows 10 App Essentials add-on is part of that work, as discussed "
"throughout this article when talking about UIA workarounds, improving "
"support for apps and controls and others. But there are limits as to what "
"the add-on can do, as the other puzzle pieces are willingness from "
"developers (especially third-party UWP developers) to embrace accessibility "
"as a pillar in their apps, and willingness from users to send accessibility "
"feedback. Although some add-on features are being integrated into NVDA, "
"there are some areas where the add-on is needed (especially when supporting "
"features introduced in Windows Insider Preview builds), and until the day "
"accessibility is everywhere in Windows 10 ecosystem and universal apps, the "
"add-on will still be here."
msgstr ""

#: ..\python_docs\w10addoninternals.py:180
msgid "## References"
msgstr "## Referencias"

#: ..\python_docs\w10addoninternals.py:181
msgid "* Windows 10 (Wikipedia): https://en.wikipedia.org/wiki/Windows_10"
msgstr "* Windows 10 (Wikipedia): https://en.wikipedia.org/wiki/Windows_10"

#: ..\python_docs\w10addoninternals.py:182
msgid "* Windows Insider Program (Microsoft): https://insider.windows.com/"
msgstr "* Windows Insider Program (Microsoft): https://insider.windows.com/"

#: ..\python_docs\w10addoninternals.py:183
msgid ""
"* Windows as a Service Overview (Microsoft Docs): https://docs.microsoft.com/"
"en-us/windows/deployment/update/waas-overview"
msgstr ""
"* Descripción de Windows como servicio (Microsoft Docs): https://docs."
"microsoft.com/en-us/windows/deployment/update/waas-overview"

#: ..\python_docs\w10addoninternals.py:184
msgid ""
"* What's a Universal Windows Platform (UWP) App (Microsoft UWP App "
"Developer): https://docs.microsoft.com/en-us/windows/uwp/get-started/whats-a-"
"uwp"
msgstr ""
"* Qué es una aplicación de la plataforma de Windows universal (UWP) "
"(desarrollador de aplicaciones Microsoft UWP): https://docs.microsoft.com/en-"
"us/windows/uwp/get-started/whats-a-uwp"

#: ..\python_docs\w10addoninternals.py:185
msgid ""
"* UI Automation Overview (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ee684076(v=vs.85).aspx"
msgstr ""
"* Descripción de UI Automation (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee684076(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:186
msgid ""
"* MSAA overview (MSDN): https://msdn.microsoft.com/en-us/library/windows/"
"desktop/dd373592(v=vs.85).aspx"
msgstr ""
"* Descripción de MSAA (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/dd373592(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:187
msgid ""
"* UI Automation and Active Accessibility (MSDN): https://msdn.microsoft.com/"
"en-us/library/windows/desktop/ee671585(v=vs.85).aspx"
msgstr ""
"* UI Automation y Active Accessibility (MSDN): https://msdn.microsoft.com/en-"
"us/library/windows/desktop/ee671585(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:188
msgid ""
"* Component Object Model Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ms680573(v=vs.85).aspx"
msgstr ""
"* Descripción de Component Object Model (MSDN): https://msdn.microsoft.com/"
"en-us/library/windows/desktop/ms680573(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:189
msgid ""
"* IUIAutomationElement interface (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671425(v=vs.85).aspx"
msgstr ""
"* La interfaz IUIAutomationElement (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671425(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:190
msgid ""
"* cachedAutomationId (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ee671434(v=vs.85).aspx"
msgstr ""
"* cachedAutomationId (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ee671434(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:191
msgid ""
"* UI Automation Properties Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671594(v=vs.85).aspx"
msgstr ""
"* Descripción de las propiedades de UI Automation (MSDN): https://msdn."
"microsoft.com/en-us/library/windows/desktop/ee671594(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:192
msgid ""
"* UI Automation Events Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671221(v=vs.85).aspx"
msgstr ""
"* Descripción de los eventos de UI Automation (MSDN): https://msdn.microsoft."
"com/en-us/library/windows/desktop/ee671221(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:193
msgid ""
"* UI Automation Event Identifiers (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671223(v=vs.85).aspx"
msgstr ""
"* Identificadores de eventos en UI Automation (MSDN): https://msdn.microsoft."
"com/en-us/library/windows/desktop/ee671223(v=vs.85).aspx"

#: ..\python_docs\w10addoninternals.py:194
msgid ""
"* Auto-suggest accessibility, part of Accessible Text Requirements "
"(Microsoft Docs): https://docs.microsoft.com/en-us/windows/uwp/accessibility/"
"accessible-text-requirements"
msgstr ""
"* Accesibilidad de sugerencias automáticas, parte de los requisitos de "
"textos accesibles (Microsoft Docs): https://docs.microsoft.com/en-us/windows/"
"uwp/accessibility/accessible-text-requirements"
