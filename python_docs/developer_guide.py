# -*- coding: utf-8 -*-
documentation = [
_(u"""---"""),
_(u"""generator: 'http://txt2tags.sf.net'"""),
_(u"""title: 'NVDA 2017.4 Developer Guide'"""),
_(u"""---"""),
"",_(u"""NVDA 2017.4 Developer Guide"""),
_(u"""==========================="""),
"",_(u"""[]{#toc}"""),
"",_(u"""Table of Contents"""),
_(u"""-----------------"""),
"",_(u"""-   [1. Introduction](#toc2)"""),
_(u"""    -   [1.1. A Note About Python](#toc3)"""),
_(u"""-   [2. Translation](#toc4)"""),
_(u"""    -   [2.1. Character Descriptions](#toc5)"""),
_(u"""    -   [2.2. Symbol Pronunciation](#toc6)"""),
_(u"""        -   [2.2.1. Defining Complex Symbols](#toc7)"""),
_(u"""        -   [2.2.2. Defining Symbol Information](#toc8)"""),
_(u"""-   [3. Plugins](#toc9)"""),
_(u"""    -   [3.1. Overview](#toc10)"""),
_(u"""    -   [3.2. Types of Plugins](#toc11)"""),
_(u"""    -   [3.3. Basics of an App Module](#toc12)"""),
_(u"""    -   [3.4. Example 1: An App Module that Beeps on Focus Change"""),
_(u"""        Events](#Example1)"""),
_(u"""    -   [3.5. Basics of a Global Plugin](#toc14)"""),
_(u"""    -   [3.6. Example 2: a Global Plugin Providing a Script to Announce"""),
_(u"""        the NVDA Version](#toc15)"""),
_(u"""    -   [3.7. NVDA Objects](#toc16)"""),
_(u"""    -   [3.8. Scripts and Gesture Bindings](#toc17)"""),
_(u"""    -   [3.9. Example 3: A Global Plugin to Find out Window Class and"""),
_(u"""        Control ID](#toc18)"""),
_(u"""    -   [3.10. Events](#toc19)"""),
_(u"""    -   [3.11. the App Module SleepMode variable](#toc20)"""),
_(u"""    -   [3.12. Example 4: A Sleep Mode App Module](#toc21)"""),
_(u"""    -   [3.13. Providing Custom NVDA Object Classes](#toc22)"""),
_(u"""    -   [3.14. Example 5: Command to Retrieve the Length of Text in an"""),
_(u"""        Edit Field Using a Custom NVDA Object](#toc23)"""),
_(u"""    -   [3.15. Making Small Changes to an NVDA Object in App"""),
_(u"""        Modules](#toc24)"""),
_(u"""    -   [3.16. Example 6: Labelling the Notepad Edit Field Using"""),
_(u"""        event\\_NVDAObject\\_init](#toc25)"""),
_(u"""-   [4. Packaging Code as NVDA Add-ons](#toc26)"""),
_(u"""    -   [4.1. Non-ASCII File Names in Zip Archives](#toc27)"""),
_(u"""    -   [4.2. Manifest Files](#toc28)"""),
_(u"""        -   [4.2.1. Available Fields](#toc29)"""),
_(u"""        -   [4.2.2. An Example Manifest File](#toc30)"""),
_(u"""    -   [4.3. Plugins and Drivers](#toc31)"""),
_(u"""    -   [4.4. Optional install / Uninstall code](#toc32)"""),
_(u"""        -   [4.4.1. the onInstall function](#toc33)"""),
_(u"""        -   [4.4.2. The onUninstall Function](#toc34)"""),
_(u"""    -   [4.5. Localizing Add-ons](#toc35)"""),
_(u"""        -   [4.5.1. Locale-specific Manifest Files](#toc36)"""),
_(u"""        -   [4.5.2. Locale-specific Messages](#toc37)"""),
_(u"""    -   [4.6. Add-on Documentation](#AddonDoc)"""),
_(u"""-   [5. NVDA Python Console](#PythonConsole)"""),
_(u"""    -   [5.1. Usage](#toc40)"""),
_(u"""    -   [5.2. Namespace](#PythonConsoleNamespace)"""),
_(u"""        -   [5.2.1. Automatic Imports](#toc42)"""),
_(u"""        -   [5.2.2. Snapshot Variables](#PythonConsoleSnapshotVariables)"""),
_(u"""-   [6. Remote Python Console](#toc44)"""),
_(u"""    -   [6.1. Usage](#toc45)"""),
"",_(u"""[]{#toc2}"""),
"",_(u"""1. Introduction"""),
_(u"""---------------"""),
"",_(u"""This guide provides information concerning NVDA development, including"""),
_(u"""translation and the development of components for NVDA."""),
"",_(u"""[]{#toc3}"""),
"",_(u"""### 1.1. A Note About Python"""),
"",_(u"""NVDA and its components are primarily written in the Python programming"""),
_(u"""language. It is not the goal of this guide to teach you Python, though"""),
_(u"""examples are provided through out this guide which will help to"""),
_(u"""familiarise you with the Python syntax. Documentation and other"""),
_(u"""resources related to the Python language can be found at"""),
_(u"""[www.python.org/](http://www.python.org/)"""),
"",_(u"""[]{#toc4}"""),
"",_(u"""2. Translation"""),
_(u"""--------------"""),
"",_(u"""In order to support multiple languages/locales, NVDA must be translated"""),
_(u"""and data specific to the locale must be provided. This section only"""),
_(u"""includes information on custom NVDA file formats required for"""),
_(u"""translation. Other items need to be translated, such as the NVDA user"""),
_(u"""interface and documentation, but these use standard file formats. For"""),
_(u"""complete documentation about translating NVDA, please see"""),
_(u"""<https://github.com/nvaccess/nvda/wiki/Translating>"""),
"",_(u"""[]{#toc5}"""),
"",_(u"""### 2.1. Character Descriptions"""),
"",_(u"""Sometimes, it can be very difficult or even impossible to distinguish"""),
_(u"""one character from another. For example, two characters might be"""),
_(u"""pronounced the same way, even though they are actually different"""),
_(u"""characters. To help users when this occurs, character descriptions can"""),
_(u"""be provided which describe the character in a unique way."""),
"",_(u"""Character descriptions can be provided for a locale in a file named"""),
_(u"""characterDescriptions.dic in the directory for the locale. This is a"""),
_(u"""UTF-8 encoded text file. Blank lines and lines beginning with a \\\"\\#\\\""""),
_(u"""character are ignored. All other lines should contain a character,"""),
_(u"""followed by a tab, then one or more descriptions separated by tabs."""),
"",_(u"""For example:"""),
"",_(u"""    # This is a comment."""),
_(u"""    a   alpha"""),
_(u"""    b   bravo"""),
"",_(u"""See the file locale\\\\en\\\\characterDescriptions.dic for a full example."""),
"",_(u"""In most cases, the characters in this file should be a single lower case"""),
_(u"""character. It is assumed that characters will have the same description"""),
_(u"""regardless of their case, so upper case characters are converted to"""),
_(u"""lower case before looking up their character descriptions."""),
"",_(u"""[]{#toc6}"""),
"",_(u"""### 2.2. Symbol Pronunciation"""),
"",_(u"""It is often useful to hear punctuation and other symbols pronounced as"""),
_(u"""words when reading text, particularly when moving by character."""),
_(u"""Unfortunately, the pronunciation of symbols is inconsistent between"""),
_(u"""speech synthesisers and many synthesisers do not speak many symbols"""),
_(u"""and/or do not allow control over what symbols are spoken. Therefore,"""),
_(u"""NVDA allows information about symbol pronunciation to be provided."""),
"",_(u"""This is done for a locale by providing a file named symbols.dic in the"""),
_(u"""directory for the locale. This is a UTF-8 encoded text file. Blank lines"""),
_(u"""and lines beginning with a \\\"\\#\\\" character are ignored. All locales"""),
_(u"""implicitly inherit the symbol information for English, though any of"""),
_(u"""this information can be overridden."""),
"",_(u"""The file contains two sections."""),
"",_(u"""[]{#toc7}"""),
"",_(u"""#### 2.2.1. Defining Complex Symbols"""),
"",_(u"""The first section is optional and defines regular expression patterns"""),
_(u"""for complex symbols. Complex symbols are symbols which aren\\'t simply a"""),
_(u"""character or sequence of characters, but instead require a more"""),
_(u"""complicated match. An example is the full stop (.) sentence ending in"""),
_(u"""English. The \\\".\\\" is used for multiple purposes, so a more complicated"""),
_(u"""check is required to determine whether this refers to the end of a"""),
_(u"""sentence."""),
"",_(u"""The complex symbols section begins with the line:"""),
"",_(u"""    complexSymbols:"""),
"",_(u"""Subsequent lines contain a textual identifier used to identify the"""),
_(u"""symbol, a tab and the regular expression pattern for that symbol. For"""),
_(u"""example:"""),
"",_(u"""    . sentence ending   (?<=[^\\s.])\\.(?=[\\\"')\\s]|$)"""),
"",_(u"""Again, the English symbols are inherited by all other locales, so you"""),
_(u"""need not include any complex symbols already defined for English."""),
"",_(u"""[]{#toc8}"""),
"",_(u"""#### 2.2.2. Defining Symbol Information"""),
"",_(u"""The second section provides information about when and how to pronounce"""),
_(u"""all symbols. It begins with the line:"""),
"",_(u"""    symbols:"""),
"",_(u"""Subsequent lines should contain several fields separated by tabs. The"""),
_(u"""only mandatory fields are the identifier and replacement. The default"""),
_(u"""will be used for omitted fields. The fields are as follows:"""),
"",_(u"""-   identifier: The identifier of the symbol. In most cases, this is"""),
_(u"""    just the character or characters of the symbol. However, it can also"""),
_(u"""    be the identifier of a complex symbol. Certain characters cannot be"""),
_(u"""    typed into the file, so the following special sequences can be used:"""),
_(u"""    -   \\\\0: null"""),
_(u"""    -   \\\\t: tab"""),
_(u"""    -   \\\\n: line feed"""),
_(u"""    -   \\\\r: carriage return"""),
_(u"""    -   \\\\f: form feed"""),
_(u"""    -   \\\\\\#: \\# character (needed because \\# at the start of a line"""),
_(u"""        denotes a comment)"""),
_(u"""-   replacement: The text which should be spoken for the symbol."""),
_(u"""-   level: The symbol level at which the symbol should be spoken. The"""),
_(u"""    symbol level is configured by the user and specifies the amount of"""),
_(u"""    symbols that should be spoken. This field should contain one of the"""),
_(u"""    levels \\\"none\\\", \\\"some\\\", \\\"most\\\", \\\"all\\\" or \\\"char\\\", or \\\"-\\\""""),
_(u"""    to use the default. \\\"char\\\" means that the symbol should only be"""),
_(u"""    pronounced when moving by character. The default is to inherit the"""),
_(u"""    value or \\\"all\\\" if there is nothing to inherit."""),
_(u"""-   preserve: Whether the symbol itself should be preserved to"""),
_(u"""    facilitate correct pronunciation by the synthesiser. For example,"""),
_(u"""    symbols which cause pauses or inflection (such as the comma in"""),
_(u"""    English) should be preserved. This field should be one of the"""),
_(u"""    following:"""),
_(u"""    -   never: Never preserve the symbol."""),
_(u"""    -   always: Always preserve the symbol."""),
_(u"""    -   norep: Only preserve the symbol if it is not being replaced;"""),
_(u"""        i.e. the user has set symbol level lower than the level of this"""),
_(u"""        symbol."""),
_(u"""    -   -: Use the default."""),
"",_(u"""    The default is to inherit the value or \\\"never\\\" if there is nothing"""),
_(u"""    to inherit."""),
"",_(u"""Finally, a display name for the symbol can be provided in a comment"""),
_(u"""after a tab at the end of the line. This will be shown to users when"""),
_(u"""editing the symbol information and is especially useful for translators"""),
_(u"""to define translated names for English complex symbols."""),
"",_(u"""Here are some examples:"""),
"",_(u"""    (   left paren  most"""),
"",_(u"""This means that the \\\"(\\\" character should be spoken as \\\"left paren\\\""""),
_(u"""only when the symbol level is set to most or higher; i.e. most or all."""),
"",_(u"""    ,   comma   all always"""),
"",_(u"""This means that the \\\",\\\" character should be spoken as \\\"comma\\\" when"""),
_(u"""the symbol level is set to all and that the character itself should"""),
_(u"""always be preserved so that the synthesiser will pause appropriately."""),
"",_(u"""    . sentence ending   point   # . fin de phrase"""),
"",_(u"""This line appears in the French symbols.dic file. It means that the \\\"."""),
_(u"""sentence ending\\\" complex symbol should be spoken as \\\"point\\\". Level"""),
_(u"""and preserve are not specified, so they will be taken from English. A"""),
_(u"""display name is provided so that French users will know what the symbol"""),
_(u"""represents."""),
"",_(u"""Please see the file locale\\\\en\\\\symbols.dic for the English definitions"""),
_(u"""which are inherited for all locales. This is also a good full example."""),
"",_(u"""[]{#toc9}"""),
"",_(u"""3. Plugins"""),
_(u"""----------"""),
"",_(u"""[]{#toc10}"""),
"",_(u"""### 3.1. Overview"""),
"",_(u"""Plugins allow you to customize the way NVDA behaves overall or within a"""),
_(u"""particular application. They are able to:"""),
"",_(u"""-   Respond to particular events such as focus and object property"""),
_(u"""    changes; e.g. when a control changes its name."""),
_(u"""-   Implement commands which are bound to particular key presses or"""),
_(u"""    other input."""),
_(u"""-   Customise the behaviour of and implement additional functionality"""),
_(u"""    for particular controls."""),
_(u"""-   Customise or add new support for text content and complex documents."""),
"",_(u"""This section provides an introduction to developing plugins. Developers"""),
_(u"""should consult the code documentation for a complete reference."""),
"",_(u"""[]{#toc11}"""),
"",_(u"""### 3.2. Types of Plugins"""),
"",_(u"""There are two types of plugins. These are:"""),
"",_(u"""-   App Modules: code specific to a particular application. The App"""),
_(u"""    Module receives all events for a particular application, even if"""),
_(u"""    that application is not currently active. When the application is"""),
_(u"""    active, any commands that the App Module has bound to key presses or"""),
_(u"""    other input can be executed by the user."""),
_(u"""-   Global Plugins: code global to NVDA; i.e. it is used in all"""),
_(u"""    applications. Global Plugins Receive all events for all controls in"""),
_(u"""    the Operating System. Any commands bound by a Global Plugin can be"""),
_(u"""    executed by the user wherever they are in the operating system,"""),
_(u"""    regardless of application."""),
"",_(u"""If you wish to improve NVDA\\'s access to a particular application, it is"""),
_(u"""most likely you will want to write an App Module. In contrast, if you"""),
_(u"""wish to add some overall functionality to NVDA (e.g. a script that"""),
_(u"""announces current Wireless network strength while in any application),"""),
_(u"""then a Global Plugin is what you want."""),
"",_(u"""Both App Modules and Global Plugins share a common look and feel. They"""),
_(u"""are both Python source files (with a .py extension), they both define a"""),
_(u"""special class containing all events, scripts and bindings, and they both"""),
_(u"""may define custom classes to access controls, text content and complex"""),
_(u"""documents. However, they do differ in some ways."""),
"",_(u"""The following few sections will talk separately about App Modules and"""),
_(u"""Global Plugins. After this point, discussion is again more general."""),
"",_(u"""[]{#toc12}"""),
"",_(u"""### 3.3. Basics of an App Module"""),
"",_(u"""App Module files have a .py extension, and are named the same as the"""),
_(u"""main executable of the application for which you wish them to be used."""),
_(u"""For example, an App Module for notepad would be called notepad.py, as"""),
_(u"""notepad\\'s main executable is called notepad.exe."""),
"",_(u"""App Module files must be placed in the appModules subdirectory of the"""),
_(u"""user\\'s NVDA user configuration directory. For more information on where"""),
_(u"""to find the user configuration directory, please see the NVDA user"""),
_(u"""guide."""),
"",_(u"""App Modules must define a class called AppModule, which inherits from"""),
_(u"""appModuleHandler.AppModule. This class can then define event and script"""),
_(u"""methods, gesture bindings and other code. This will all be covered in"""),
_(u"""depth later."""),
"",_(u"""NVDA loads an App Module for an application as soon as it notices the"""),
_(u"""application is running. The App Module is unloaded once the application"""),
_(u"""is closed or when NVDA is exiting."""),
"",_(u"""[]{#Example1}"""),
"",_(u"""### 3.4. Example 1: An App Module that Beeps on Focus Change Events"""),
"",_(u"""The following example App Module makes NVDA beep each time the focus"""),
_(u"""changes within the notepad application. This example shows you the basic"""),
_(u"""layout of an App Module."""),
"",_(u"""Copy and paste the code between (but not including) the start and end"""),
_(u"""markers into a new text file called notepad.py, which should be saved in"""),
_(u"""the AppModules subdirectory. Be very careful to keep all tabs and spaces"""),
_(u"""intact."""),
"",_(u"""Once saved in the correct location, either restart NVDA or choose Reload"""),
_(u"""Plugins found under Tools in the NVDA menu."""),
"",_(u"""Finally, open Notepad and move the focus around the application; e.g."""),
_(u"""move along the menu bar, open some dialog boxes, etc. You should hear"""),
_(u"""beeps each time the focus changes. Note though that if you move outside"""),
_(u"""of Notepad - for instance, to Windows Explorer - you do not hear beeps."""),
"",_(u"""    --- start ---"""),
_(u"""    # Notepad App Module for NVDA"""),
_(u"""    # Developer guide example 1"""),
"",_(u"""    import appModuleHandler"""),
"",_(u"""    class AppModule(appModuleHandler.AppModule):"""),
"",_(u"""        def event_gainFocus(self, obj, nextHandler):"""),
_(u"""            import tones"""),
_(u"""            tones.beep(550, 50)"""),
_(u"""            nextHandler()"""),
"",_(u"""    --- end ---"""),
"",_(u"""This App Module file starts with two comment lines, which describe what"""),
_(u"""the file is for."""),
"",_(u"""It then imports the appModuleHandler module, so that the App Module then"""),
_(u"""has access to the base AppModule class."""),
"",_(u"""Next, it defines a class called AppModule, which is inherited from"""),
_(u"""appModuleHandler.AppModule."""),
"",_(u"""Inside this class, it defines 1 or more events, scripts or gesture"""),
_(u"""bindings. In this example, it defines one event method for gainFocus"""),
_(u"""events (event\\_gainFocus), which plays a short beep each time it is"""),
_(u"""executed. The implementation of this event is not important for the"""),
_(u"""purposes of this example. The most important part is the class itself."""),
_(u"""Events will be covered in greater detail later."""),
"",_(u"""As with other examples in this guide, remember to delete the created app"""),
_(u"""module when you are finished testing and then restart NVDA or reload"""),
_(u"""plugins, so that original functionality is restored."""),
"",_(u"""[]{#toc14}"""),
"",_(u"""### 3.5. Basics of a Global Plugin"""),
"",_(u"""Global Plugin files have a .py extension, and should have a short unique"""),
_(u"""name which identifies what they do."""),
"",_(u"""Global Plugin files must be placed in the globalPlugins subdirectory of"""),
_(u"""the user\\'s NVDA user configuration directory. For more information on"""),
_(u"""where to find the user configuration directory, please see the NVDA user"""),
_(u"""guide."""),
"",_(u"""Global Plugins must define a class called GlobalPlugin, which inherits"""),
_(u"""from globalPluginHandler.GlobalPlugin. This class can then define event"""),
_(u"""and script methods, gesture bindings and other code. This will all be"""),
_(u"""covered in depth later."""),
"",_(u"""NVDA loads all global plugins as soon as it starts, and unloads them on"""),
_(u"""exit."""),
"",_(u"""[]{#toc15}"""),
"",_(u"""### 3.6. Example 2: a Global Plugin Providing a Script to Announce the NVDA Version"""),
"",_(u"""The following example Global Plugin Allows you to press NVDA+shift+v"""),
_(u"""while anywhere in the Operating System to find out NVDA\\'s version. This"""),
_(u"""example is only to show you the basic layout of a Global Plugin."""),
"",_(u"""Copy and paste the code between (but not including) the start and end"""),
_(u"""markers into a new text file with a name of example2.py, which should be"""),
_(u"""saved in the globalPlugins subdirectory. Be very careful to keep all"""),
_(u"""tabs and spaces intact."""),
"",_(u"""Once saved in the right place, either restart NVDA or choose Reload"""),
_(u"""Plugins found under Tools in the NVDA menu."""),
"",_(u"""From anywhere, you can now press NVDA+shift+v to have NVDA\\'s version"""),
_(u"""spoken and brailled."""),
"",_(u"""    --- start ---"""),
_(u"""    # Version announcement plugin for NVDA"""),
_(u"""    # Developer guide example 2"""),
"",_(u"""    import globalPluginHandler"""),
_(u"""    import ui"""),
_(u"""    import versionInfo"""),
"",_(u"""    class GlobalPlugin(globalPluginHandler.GlobalPlugin):"""),
"",_(u"""        def script_announceNVDAVersion(self, gesture):"""),
_(u"""            ui.message(versionInfo.version)"""),
"",_(u"""        __gestures={"""),
_(u"""            \"kb:NVDA+shift+v\": \"announceNVDAVersion\","""),
_(u"""        }"""),
"",_(u"""    --- end ---"""),
"",_(u"""This Global Plugin file starts with two comment lines, which describe"""),
_(u"""what the file is for."""),
"",_(u"""It then imports the globalPluginHandler module, so that the Global"""),
_(u"""Plugin has access to the base GlobalPlugin class."""),
"",_(u"""It also imports a few other modules, namely ui and versionInfo, which"""),
_(u"""this specific plugin needs in order for it to perform the necessary"""),
_(u"""actions to announce the version."""),
"",_(u"""Next, it defines a class called GlobalPlugin, which is inherited from"""),
_(u"""globalPluginHandler.GlobalPlugin."""),
"",_(u"""Inside this class, it defines 1 or more events, scripts or gesture"""),
_(u"""bindings. In this example, it defines a script method that performs the"""),
_(u"""version announcement, and provides a binding from NVDA+shift+v to this"""),
_(u"""script. However, the details of the script and its binding are not"""),
_(u"""important for the purposes of this example. The most important part is"""),
_(u"""the class itself."""),
"",_(u"""As with other examples in this guide, remember to delete the created"""),
_(u"""Global Plugin when finished testing and then restart NVDA or reload"""),
_(u"""plugins, so that original functionality is restored."""),
"",_(u"""[]{#toc16}"""),
"",_(u"""### 3.7. NVDA Objects"""),
"",_(u"""NVDA represents controls and other GUI elements as NVDA Objects. These"""),
_(u"""NVDA Objects contain standardised properties, such as name, role, value,"""),
_(u"""states and description, which allow other parts of NVDA to query or"""),
_(u"""present information about a control in a generalised way. For example,"""),
_(u"""the OK button in a dialog would be represented as an NVDA Object with a"""),
_(u"""name of \\\"OK\\\" and a role of button. Similarly, a checkbox with a label"""),
_(u"""of \\\"I agree\\\" would have a name of \\\"I agree\\\", a role of checkbox, and"""),
_(u"""if currently checked, a state of checked."""),
"",_(u"""As there are many different GUI Toolkits and platform and accessibility"""),
_(u"""APIs, NVDA Objects abstract these differences into a standard form that"""),
_(u"""NVDA can use, regardless of the toolkit or API a particular control is"""),
_(u"""made with. For example, the Ok button just discussed could be a widget"""),
_(u"""in a Java application, an MSAA object, an IAccessible2 object or a UI"""),
_(u"""Automation element."""),
"",_(u"""NVDA Objects have many properties. Some of the most useful are:"""),
"",_(u"""-   name: the label of the control."""),
_(u"""-   role: one of the ROLE\\_\\* constants from NVDA\\'s controlTypes"""),
_(u"""    module. Button, dialog, editableText, window and checkbox are"""),
_(u"""    examples of roles."""),
_(u"""-   states: a set of 0 or more of the STATE\\_\\* constants from NVDA\\'s"""),
_(u"""    controlTypes module. Focusable, focused, selected, selectable,"""),
_(u"""    expanded, collapsed and checked are some examples of states."""),
_(u"""-   value: the value of the control; e.g. the percentage of a scroll bar"""),
_(u"""    or the current setting of a combo box."""),
_(u"""-   description: a sentence or two describing what the control does"""),
_(u"""    (usually the same as its tooltip)."""),
_(u"""-   location: the object\\'s left, top, width and height positions in"""),
_(u"""    screen coordinates."""),
_(u"""-   parent: this object\\'s parent object. For example, a list item"""),
_(u"""    object\\'s parent would be the list containing it."""),
_(u"""-   next: the object directly after this one on the same level in"""),
_(u"""    logical order. For example, a menu item NVDA Object\\'s next object"""),
_(u"""    is most likely another menu item within the same menu."""),
_(u"""-   previous: like next but in reverse."""),
_(u"""-   firstChild: the first direct child object of this object. For"""),
_(u"""    example, a list\\'s first child would be the first list item."""),
_(u"""-   lastChild: the last direct child of this object."""),
_(u"""-   children: a list of all the direct children of this object; e.g. all"""),
_(u"""    the menu items in a menu."""),
"",_(u"""There are also a few simplified navigation properties such as"""),
_(u"""simpleParent, simpleNext, simpleFirstChild and simpleLastChild. These"""),
_(u"""are like their respective navigation properties described above, but"""),
_(u"""NVDA filters out unuseful objects. These properties are used when"""),
_(u"""NVDA\\'s simple review mode is turned on, which is the default. These"""),
_(u"""simple properties may be easier to use, but the real navigation"""),
_(u"""properties more closely reflect the underlying Operating System"""),
_(u"""structure. Also, these may change in future versions of NVDA as"""),
_(u"""improvements are made to simple review, so they should generally be"""),
_(u"""avoided when programmatically locating specific objects."""),
"",_(u"""When developing plugins, most of the time, it is not important what"""),
_(u"""toolkit or API backs an NVDA Object, as the plugin will usually only"""),
_(u"""access standard properties such as name, role and value. However, as"""),
_(u"""plugins become more advanced, it is certainly possible to delve deeper"""),
_(u"""into NVDA Objects to find out toolkit or API specific information if"""),
_(u"""required."""),
"",_(u"""Plugins make use of NVDA Objects in three particular ways:"""),
"",_(u"""-   Most events that plugins receive take an argument which is the NVDA"""),
_(u"""    Object on which the event occurred. For example, event\\_gainFocus"""),
_(u"""    takes the NVDA Object that represents the control gaining focus."""),
_(u"""-   Scripts, events or other code may fetch objects of interest such as"""),
_(u"""    the NVDA Object with focus, NVDA\\'s current navigator object, or"""),
_(u"""    perhaps the Desktop NVDA Object. The code may then retreave"""),
_(u"""    information from that object or perhaps even retreave another object"""),
_(u"""    related to it (e.g. its parent, first child, etc.)."""),
_(u"""-   the Plugin may define its own custom NVDA Object classes which will"""),
_(u"""    be used to wrap a specific control to give it extra functionality,"""),
_(u"""    mutate its properties, etc."""),
"",_(u"""Just like App Modules and Global Plugins, NVDA Objects can also define"""),
_(u"""events, scripts and gesture bindings."""),
"",_(u"""[]{#toc17}"""),
"",_(u"""### 3.8. Scripts and Gesture Bindings"""),
"",_(u"""App Modules, Global Plugins and NVDA Objects can define special methods"""),
_(u"""which can be bound to a particular piece of input such as a key press."""),
_(u"""NVDA refers to these methods as scripts."""),
"",_(u"""A script is a standard Python instance method with a name starting with"""),
_(u"""\\\"script\\_\\\"; e.g. \\\"script\\_sayDateTime\\\"."""),
"",_(u"""A script method takes two arguments:"""),
"",_(u"""-   self: a reference to the App Module, Global Plugin or NVDA Object"""),
_(u"""    instance the script was called on."""),
_(u"""-   gesture: an Input Gesture object, which represents the input that"""),
_(u"""    caused the script to run."""),
"",_(u"""As well as the actual script method, some form of gesture binding must"""),
_(u"""be defined, so that NVDA knows what input should execute the script."""),
"",_(u"""To bind a gesture to a script, a special \\\"\\_\\_gestures\\\" Python"""),
_(u"""dictionary can be defined as a class variable on the App Module, Global"""),
_(u"""Plugin or NVDA Object. These dictionaries should contain gesture"""),
_(u"""identifier strings pointing to the name of the requested script, without"""),
_(u"""the \\\"script\\_\\\" prefix."""),
"",_(u"""There are more advanced ways of binding gestures in a more dynamic"""),
_(u"""fashion, though the \\_\\_gestures dictionary is the simplest."""),
"",_(u"""A gesture identifier string is a simple string representation of a piece"""),
_(u"""of input. It consists of a two leter character code denoting the source"""),
_(u"""of the input, an optional device in brackets, a colon (:) and one or"""),
_(u"""more names separated by a plus (+) denoting the actual keys or input"""),
_(u"""values."""),
"",_(u"""Some examples of gesture string identifiers are:"""),
"",_(u"""-   \\\"kb:NVDA+shift+v\\\""""),
_(u"""-   \\\"br(freedomScientific):leftWizWheelUp\\\""""),
_(u"""-   \\\"kb(laptop):NVDA+t\\\""""),
"",_(u"""Currently, the input sources in NVDA are:"""),
"",_(u"""-   kb: system keyboard input"""),
_(u"""-   br: braille display controls"""),
_(u"""-   ts: touch screen"""),
_(u"""-   bk: braille keyboard input"""),
"",_(u"""When NVDA receives input, it looks for a matching gesture binding in a"""),
_(u"""particular order. Once a gesture binding is found, the script is"""),
_(u"""executed and no further bindings are used, nore is that particular"""),
_(u"""gesture passed on automatically to the Operating System."""),
"",_(u"""The order for gesture binding lookup is:"""),
"",_(u"""-   Loaded Global Plugins"""),
_(u"""-   App Module of the active application"""),
_(u"""-   Tree Interceptor of the NVDA Object with focus if any; e.g. a"""),
_(u"""    virtualBuffer"""),
_(u"""-   NVDA Object with focus"""),
_(u"""-   Global Commands (built in commands like quitting NVDA, object"""),
_(u"""    navigation commands, etc.)"""),
"",_(u"""You should specify a description of the script in the function\\'s"""),
_(u"""docstring which describes the command for users. For example, this is"""),
_(u"""reported to users when in Input Help mode and shown in the Input"""),
_(u"""Gestures dialog. You specify the docstring by setting a"""),
_(u"""\\\"[doc]{.underline}\\\" attribute on the script function. The script will"""),
_(u"""not appear in the Input Gestures dialog unless this is specified."""),
"",_(u"""You can also specify a category for a script so that it can be grouped"""),
_(u"""with other similar scripts. For example, a script in a global plugin"""),
_(u"""which adds browse mode quick navigation keys may be categorized under"""),
_(u"""the \\\"Browse mode\\\" category. For individual scripts, this is done by"""),
_(u"""setting a \\\"category\\\" attribute on the script function to a string"""),
_(u"""containing the name of the category. You can also set the"""),
_(u"""\\\"scriptCategory\\\" attribute on the plugin class, which will be used for"""),
_(u"""scripts which do not specify a category. There are constants for common"""),
_(u"""categories prefixed with SCRCAT\\_ in the inputCore and globalCommands"""),
_(u"""modules. The script will be listed under the specified category in the"""),
_(u"""Input Gestures dialog. If no category is specified, the script will be"""),
_(u"""categorized under \\\"Miscellaneous\\\"."""),
"",_(u"""[]{#toc18}"""),
"",_(u"""### 3.9. Example 3: A Global Plugin to Find out Window Class and Control ID"""),
"",_(u"""The following Global Plugin allows you to press NVDA+leftArrow to have"""),
_(u"""the window class of the current focus announced, and NVDA+rightArrow to"""),
_(u"""have the window control ID of the current focus announced. This example"""),
_(u"""shows you how to define one or more scripts and gesture bindings on a"""),
_(u"""class such as an App Module, Global Plugin or NVDA Object."""),
"",_(u"""Copy and paste the code between (but not including) the start and end"""),
_(u"""markers into a new text file with a name of example3.py, which should be"""),
_(u"""saved in the globalPlugins subdirectory. Be very careful to keep all"""),
_(u"""tabs and spaces intact."""),
"",_(u"""Once saved in the right place, either restart NVDA or choose Reload"""),
_(u"""Plugins found under Tools in the NVDA menu."""),
"",_(u"""    --- start ---"""),
_(u"""    #Window utility scripts for NVDA"""),
_(u"""    #Developer guide example 3"""),
"",_(u"""    import globalPluginHandler"""),
_(u"""    import ui"""),
_(u"""    import api"""),
"",_(u"""    class GlobalPlugin(globalPluginHandler.GlobalPlugin):"""),
"",_(u"""        def script_announceWindowClassName(self, gesture):"""),
_(u"""            focusObj = api.getFocusObject()"""),
_(u"""            name = focusObj.name"""),
_(u"""            windowClassName = focusObj.windowClassName"""),
_(u"""            ui.message(\"class for %s window: %s\" % (name, windowClassName))"""),
"",_(u"""        def script_announceWindowControlID(self, gesture):"""),
_(u"""            focusObj = api.getFocusObject()"""),
_(u"""            name = focusObj.name"""),
_(u"""            windowControlID = focusObj.windowControlID"""),
_(u"""            ui.message(\"Control ID for %s window: %d\" % (name, windowControlID))"""),
"",_(u"""        __gestures = {"""),
_(u"""            \"kb:NVDA+leftArrow\": \"announceWindowClassName\","""),
_(u"""            \"kb:NVDA+rightArrow\": \"announceWindowControlID\","""),
_(u"""        }"""),
"",_(u"""    --- end ---"""),
"",_(u"""[]{#toc19}"""),
"",_(u"""### 3.10. Events"""),
"",_(u"""When NVDA detects particular toolkit, API or Operating System events, it"""),
_(u"""abstracts these and fires its own internal events on plugins and NVDA"""),
_(u"""Objects."""),
"",_(u"""Although most events are related to a specific NVDA Object (e.g. name"""),
_(u"""change, gain focus, state change, etc.), these events can be handled at"""),
_(u"""various levels. When an event is handled, it is stopped from going"""),
_(u"""further down the chain. However, code inside the event can choose to"""),
_(u"""propagate it further if needed."""),
"",_(u"""The order of levels through which the event passes until an event method"""),
_(u"""is found is:"""),
"",_(u"""-   Loaded Global Plugins"""),
_(u"""-   The App Module associated with the NVDA Object on which the event"""),
_(u"""    was fired"""),
_(u"""-   The Tree Interceptor (if any) associated with the NVDAObject on"""),
_(u"""    which the event was fired"""),
_(u"""-   the NVDAObject itself."""),
"",_(u"""Events are Python instance methods, with a name starting with"""),
_(u"""\\\"event\\_\\\" followed by the actual name of the event (e.g. gainFocus)."""),
"",_(u"""These event methods take slightly different arguments depending at what"""),
_(u"""level they are defined."""),
"",_(u"""If an event for an NVDA Object is defined on an NVDA Object itself, the"""),
_(u"""method only takes one mandatory argument which is the \\'self\\' argument;"""),
_(u"""i.e. the NVDA Object instance). Some events may take extra arguments,"""),
_(u"""though this is quite rare."""),
"",_(u"""If an event for an NVDA Object is defined on a Global Plugin, App Module"""),
_(u"""or Tree Interceptor, the event takes the following arguments:"""),
"",_(u"""-   self: the instance of the Global Plugin, App Module or Tree"""),
_(u"""    Interceptor"""),
_(u"""-   obj: the NVDA Object on which the event was fired"""),
_(u"""-   nextHandler: a function that when called will propagate the event"""),
_(u"""    further down the chain."""),
"",_(u"""Some common NVDA Object events are:"""),
"",_(u"""-   foreground: this NVDA Object has become the new foreground object;"""),
_(u"""    i.e. active top-level object"""),
_(u"""-   gainFocus"""),
_(u"""-   focusEntered: Focus has moved inside this object; i.e. it is an"""),
_(u"""    ancestor of the focus object"""),
_(u"""-   loseFocus"""),
_(u"""-   nameChange"""),
_(u"""-   valueChange"""),
_(u"""-   stateChange"""),
_(u"""-   caret: when the caret (insertion point) within this NVDA Object"""),
_(u"""    moves"""),
_(u"""-   locationChange: physical screen location changes"""),
"",_(u"""There are many other events, though those listed above are usually the"""),
_(u"""most useful."""),
"",_(u"""For an example of an event handled by an App Module, please refer to"""),
_(u"""[example 1](#Example1) (focus beeps in notepad)."""),
"",_(u"""[]{#toc20}"""),
"",_(u"""### 3.11. the App Module SleepMode variable"""),
"",_(u"""App Modules have one very useful property called \\\"sleepMode\\\", which if"""),
_(u"""set to true almost completely disables NVDA within that application."""),
_(u"""Sleep Mode is very useful for self voicing applications that have their"""),
_(u"""own screen reading functionality, or perhaps even some games that need"""),
_(u"""full use of the keyboard."""),
"",_(u"""Although sleep mode can be toggled on and off by the user with the key"""),
_(u"""command NVDA+shift+s, a developer can choose to have sleep mode enabled"""),
_(u"""by default for an application. This is done by providing an App Module"""),
_(u"""for that application which simply sets sleepMode to True in the"""),
_(u"""AppModule class."""),
"",_(u"""[]{#toc21}"""),
"",_(u"""### 3.12. Example 4: A Sleep Mode App Module"""),
"",_(u"""The following code can be copied and pasted in to a text file, then"""),
_(u"""saved in the appModules directory with the name of the application you"""),
_(u"""wish to enable sleep mode for. As always, the file must have a .py"""),
_(u"""extension."""),
"",_(u"""    --- start ---"""),
_(u"""    import appModuleHandler"""),
"",_(u"""    class AppModule(appModuleHandler.AppModule):"""),
"",_(u"""        sleepMode = True"""),
"",_(u"""    --- end ---"""),
"",_(u"""[]{#toc22}"""),
"",_(u"""### 3.13. Providing Custom NVDA Object Classes"""),
"",_(u"""Providing custom NVDA Object classes is probably the most powerful and"""),
_(u"""useful way to improve the experience of an application in an NVDA"""),
_(u"""plugin. This method allows you to place all the needed logic for a"""),
_(u"""particular control altogether in one NVDA Object class for that control,"""),
_(u"""rather than scattering code for many controls across a plugin\\'s events."""),
"",_(u"""There are two steps to providing a custom NVDA Object class:"""),
"",_(u"""-   Define the NVDA Object class and its events, scripts, gesture"""),
_(u"""    bindings and overridden properties."""),
_(u"""-   Tell NVDA to use this NVDA Object class in specific situations by"""),
_(u"""    handling it in the plugin\\'s chooseNVDAObjectOverlayClasses method."""),
"",_(u"""When defining a custom NVDAObject class, you have many NVDAObject base"""),
_(u"""classes to choose from. These base classes contain the base support for"""),
_(u"""the particular accessibility or OS API underlying the control, such as"""),
_(u"""win32, MSAA or Java access Bridge. You should usually inherit your"""),
_(u"""custom NVDAObject class from the highest base class you need in order to"""),
_(u"""choose your class in the first place. For example, if you choose to use"""),
_(u"""your custom NVDAObject class when the window class name is \\\"Edit\\\" and"""),
_(u"""the window control ID is 15, you should probably inherit from"""),
_(u"""NVDAObjects.window.Window, as clearly you are aware that this is a"""),
_(u"""Window object. Similarly, if you match on MSAA\\'s accRole property, you"""),
_(u"""would probably need to inherit from NVDAObjects.IAccessible.IAccessible."""),
_(u"""You should also consider what properties you are going to override on"""),
_(u"""the custom NVDA Object. For instance, if you are going to override an"""),
_(u"""IAccessible specific property, such as shouldAllowIAccessibleFocusEvent,"""),
_(u"""then you need to inherit from NVDAObjects.IAccessible.IAccessible."""),
"",_(u"""the chooseNVDAObjectOverlayClasses method can be implemented on app"""),
_(u"""modules or global plugin classes. It takes 3 arguments:"""),
"",_(u"""1.  self: the app module or global plugin instance."""),
_(u"""2.  obj: the NVDAObject for which classes are being chosen."""),
_(u"""3.  clsList: a Python list of NVDAObject classes that will be used for"""),
_(u"""    obj."""),
"",_(u"""Inside this method, you should decide which custom NVDA Object class(es)"""),
_(u"""(if any) this NVDA Object should use by checking its properties, etc. If"""),
_(u"""a custom class should be used, it must be inserted into the class list,"""),
_(u"""usually at the beginning. You can also remove classes chosen by NVDA"""),
_(u"""from the class list, although this is rarely required."""),
"",_(u"""[]{#toc23}"""),
"",_(u"""### 3.14. Example 5: Command to Retrieve the Length of Text in an Edit Field Using a Custom NVDA Object"""),
"",_(u"""This app module for notepad provides a command to report the number of"""),
_(u"""characters in edit fields. You can activate it using NVDA+l. Notice that"""),
_(u"""the command is specific to edit fields; i.e. it only works while you are"""),
_(u"""focused in an edit field, rather than anywhere in the application."""),
"",_(u"""The following code can be copied and pasted in to a text file, then"""),
_(u"""saved in the appModules directory with the name of notepad.py."""),
"",_(u"""    --- start ---"""),
_(u"""    import appModuleHandler"""),
_(u"""    from NVDAObjects.IAccessible import IAccessible"""),
_(u"""    import controlTypes"""),
_(u"""    import ui"""),
"",_(u"""    class AppModule(appModuleHandler.AppModule):"""),
"",_(u"""        def chooseNVDAObjectOverlayClasses(self, obj, clsList):"""),
_(u"""            if obj.windowClassName == \"Edit\" and obj.role == controlTypes.ROLE_EDITABLETEXT:"""),
_(u"""                clsList.insert(0, EnhancedEditField)"""),
"",_(u"""    class EnhancedEditField(IAccessible):"""),
"",_(u"""        def script_reportLength(self, gesture):"""),
_(u"""            ui.message(\"%d\" % len(self.value))"""),
"",_(u"""        __gestures = {"""),
_(u"""            \"kb:NVDA+l\": \"reportLength\","""),
_(u"""        }"""),
"",_(u"""    --- end ---"""),
"",_(u"""[]{#toc24}"""),
"",_(u"""### 3.15. Making Small Changes to an NVDA Object in App Modules"""),
"",_(u"""Sometimes, you may wish to make only small changes to an NVDA Object in"""),
_(u"""an application, such as overriding its name or role. In these cases, you"""),
_(u"""don\\'t need the full power of a custom NVDA Object class. To do this,"""),
_(u"""you can use the NVDAObject\\_init event available only on App Modules."""),
"",_(u"""The event\\_NVDAObject\\_init method takes two arguments:"""),
"",_(u"""1.  self: the AppModule instance."""),
_(u"""2.  obj: the NVDAObject being initialized."""),
"",_(u"""Inside this method, you can check whether this object is relevant and"""),
_(u"""then override properties accordingly."""),
"",_(u"""[]{#toc25}"""),
"",_(u"""### 3.16. Example 6: Labelling the Notepad Edit Field Using event\\_NVDAObject\\_init"""),
"",_(u"""This app module for notepad makes NVDA report Notepad\\'s main edit field"""),
_(u"""as having a name of \\\"content\\\". That is, when it receives focus, NVDA"""),
_(u"""will say \\\"Content edit\\\"."""),
"",_(u"""The following code can be copied and pasted in to a text file, then"""),
_(u"""saved in the appModules directory with the name of notepad.py."""),
"",_(u"""    --- start ---"""),
_(u"""    import appModuleHandler"""),
_(u"""    from NVDAObjects.window import Window"""),
"",_(u"""    class AppModule(appModuleHandler.AppModule):"""),
"",_(u"""        def event_NVDAObject_init(self, obj):"""),
_(u"""            if isinstance(obj, Window) and obj.windowClassName == \"Edit\" and obj.windowControlID == 15:"""),
_(u"""                obj.name = \"Content\""""),
_(u"""    --- end ---"""),
"",_(u"""[]{#toc26}"""),
"",_(u"""4. Packaging Code as NVDA Add-ons"""),
_(u"""---------------------------------"""),
"",_(u"""To make it easy for users to share and install plugins and drivers, they"""),
_(u"""can be packaged in to a single NVDA add-on package which the user can"""),
_(u"""then install into a copy of NVDA via the Add-ons Manager found under"""),
_(u"""Tools in the NVDA menu. Add-on packages are only supported in NVDA"""),
_(u"""2012.2 and later. An add-on package is simply a standard zip archive"""),
_(u"""with the file extension of nvda-addon which contains a manifest file,"""),
_(u"""optional install/uninstall code and one or more directories containing"""),
_(u"""plugins and/or drivers."""),
"",_(u"""[]{#toc27}"""),
"",_(u"""### 4.1. Non-ASCII File Names in Zip Archives"""),
"",_(u"""If your add-on includes files which contain non-ASCII (non-English)"""),
_(u"""characters, you should create the zip archive such that it uses UTF-8"""),
_(u"""file names. This means that these files can be extracted properly on all"""),
_(u"""systems, regardless of the system\\'s configured language. Unfortunately,"""),
_(u"""many zip archivers do not support this, including Windows Explorer."""),
_(u"""Generally, it has to be explicitly enabled even in archivers that do"""),
_(u"""support it. [http://www.7-zip.org/](7-Zip) supports this, though it must"""),
_(u"""be enabled by specifying the \\\"cu=on\\\" method parameter."""),
"",_(u"""[]{#toc28}"""),
"",_(u"""### 4.2. Manifest Files"""),
"",_(u"""Each add-on package must contain a manifest file named manifest.ini."""),
_(u"""This must be a UTF-8 encoded text file. This manifest file contains key"""),
_(u"""= value pares declaring info such as the add-on\\'s name, version and"""),
_(u"""description."""),
"",_(u"""[]{#toc29}"""),
"",_(u"""#### 4.2.1. Available Fields"""),
"",_(u"""Although it is highly suggested that manifests contain all fields, the"""),
_(u"""fields marked as mandatory must be included. Otherwise, the add-on will"""),
_(u"""not install."""),
"",_(u"""-   name: A short unique name for the add-on. This is used to"""),
_(u"""    differentiate add-ons internally and is not shown to the user."""),
_(u"""    (Mandatory)"""),
_(u"""-   summary: The name of the add-on as shown to the user. (Mandatory)"""),
_(u"""-   version: The version of this add-on; e.g. 2.0. (Mandatory)"""),
_(u"""-   author: The author of this add-on, preferably in the form Full Name"""),
_(u"""    \\<email address\\>; e.g. Michael Curran \\<<mick@kulgan.net>\\>."""),
_(u"""    (Mandatory)"""),
_(u"""-   description: A sentence or two describing what the add-on does."""),
_(u"""-   url: A URL where this add-on, further info and upgrades can be"""),
_(u"""    found."""),
_(u"""-   docFileName: The name of the main documentation file for this"""),
_(u"""    add-on; e.g. readme.html. See the [Add-on Documentation](#AddonDoc)"""),
_(u"""    section for more details."""),
"",_(u"""[]{#toc30}"""),
"",_(u"""#### 4.2.2. An Example Manifest File"""),
"",_(u"""    --- start ---"""),
_(u"""    name = MyTestAddon"""),
_(u"""    summary = Cool Test Add-on"""),
_(u"""    version = 1.0"""),
_(u"""    description = An example add-on showing how to create add-ons!"""),
_(u"""    author = Michael Curran <mick@kulgan.net>"""),
_(u"""    url = http://www.nvda-project.org/wiki/Development"""),
_(u"""    --- end ---"""),
"",_(u"""[]{#toc31}"""),
"",_(u"""### 4.3. Plugins and Drivers"""),
"",_(u"""The following plugins and drivers can be included in an add-on:"""),
"",_(u"""-   App modules: Place them in an appModules directory in the archive."""),
_(u"""-   Braille display drivers: Place them in a brailleDisplayDrivers"""),
_(u"""    directory in the archive."""),
_(u"""-   Global plugins: Place them in a globalPlugins directory in the"""),
_(u"""    archive."""),
_(u"""-   Synthesizer drivers: Place them in a synthDrivers directory in the"""),
_(u"""    archive."""),
"",_(u"""[]{#toc32}"""),
"",_(u"""### 4.4. Optional install / Uninstall code"""),
"",_(u"""If you need to execute code as your add-on is being installed or"""),
_(u"""uninstalled from NVDA (e.g. to validate license information or to copy"""),
_(u"""files to a custom location), you can provide a Python file called"""),
_(u"""installTasks.py in the archive which contains special functions that"""),
_(u"""NVDA will call while installing or uninstalling your add-on. This file"""),
_(u"""should avoid loading any modules that are not absolutely necessary,"""),
_(u"""especially Python C extensions or dlls from your own add-on, as this"""),
_(u"""could cause later removal of the add-on to fail. However, if this does"""),
_(u"""happen, the add-on directory will be renamed and then deleted after the"""),
_(u"""next restart of NVDA. Finally, it should not depend on the existence or"""),
_(u"""state of other add-ons, as they may not be installed, have already been"""),
_(u"""removed or not yet be initialized."""),
"",_(u"""[]{#toc33}"""),
"",_(u"""#### 4.4.1. the onInstall function"""),
"",_(u"""NVDA will look for and execute an onInstall function in installTasks.py"""),
_(u"""after it has finished extracting the add-on into NVDA. Note that"""),
_(u"""although the add-on will have been extracted at this time, its directory"""),
_(u"""will have a .pendingInstall suffix until NVDA is restarted, the"""),
_(u"""directory is renamed and the add-on is really loaded for the first time."""),
_(u"""If this function raises an exception, the installation of the add-on"""),
_(u"""will fail and its directory will be cleaned up."""),
"",_(u"""[]{#toc34}"""),
"",_(u"""#### 4.4.2. The onUninstall Function"""),
"",_(u"""NVDA will look for and execute an onUninstall function in"""),
_(u"""installTasks.py when NVDA is restarted after the user has chosen to"""),
_(u"""remove the add-on. After this function completes, the add-on\\'s"""),
_(u"""directory will automatically be removed. As this happens on NVDA startup"""),
_(u"""before other components are initialized, this function cannot request"""),
_(u"""input from the user."""),
"",_(u"""[]{#toc35}"""),
"",_(u"""### 4.5. Localizing Add-ons"""),
"",_(u"""It is possible to provide locale-specific information and messages for"""),
_(u"""your add-on. Locale information can be stored in a locale directory in"""),
_(u"""the archive. This directory should contain directories for each language"""),
_(u"""it supports, using the same language code format as the rest of NVDA;"""),
_(u"""e.g. en for English, fr\\_CA for French Canadian."""),
"",_(u"""[]{#toc36}"""),
"",_(u"""#### 4.5.1. Locale-specific Manifest Files"""),
"",_(u"""Each of these language directories can contain a locale-specific"""),
_(u"""manifest file called manifest.ini, which can contain a small subset of"""),
_(u"""the manifest fields for translation. These fields are summary and"""),
_(u"""description. All other fields will be ignored."""),
"",_(u"""[]{#toc37}"""),
"",_(u"""#### 4.5.2. Locale-specific Messages"""),
"",_(u"""Each language directory can also contain gettext information, which is"""),
_(u"""the system used to translate the rest of NVDA\\'s user interface and"""),
_(u"""reported messages. As with the rest of NVDA, an nvda.mo compiled gettext"""),
_(u"""database file should be placed in the LC\\_MESSAGES directory within this"""),
_(u"""directory. to allow plugins in your add-on to access gettext message"""),
_(u"""information via calls to \\_(), you must initialize translations at the"""),
_(u"""top of each Python module by calling addonHandler.initTranslation(). For"""),
_(u"""more information about gettext and NVDA translation in general, please"""),
_(u"""read <http://www.nvda-project.org/wiki/TranslatingNVDA>"""),
"",_(u"""[]{#AddonDoc}"""),
"",_(u"""### 4.6. Add-on Documentation"""),
"",_(u"""Documentation for an add-on should be placed in a doc directory in the"""),
_(u"""archive. Similar to the locale directory, this directory should contain"""),
_(u"""directories for each language in which documentation is available."""),
"",_(u"""Users can access documentation for a particular add-on by opening the"""),
_(u"""Add-ons Manager, selecting the add-on and pressing the Add-on help"""),
_(u"""button. This will open the file named in the docFileName parameter of"""),
_(u"""the manifest. NVDA will search for this file in the appropriate language"""),
_(u"""directories. For example, if docFileName is set to readme.html and the"""),
_(u"""user is using English, NVDA will open doc\\\\en\\\\readme.html."""),
"",_(u"""[]{#PythonConsole}"""),
"",_(u"""5. NVDA Python Console"""),
_(u"""----------------------"""),
"",_(u"""The NVDA Python console emulates the interactive Python interpreter from"""),
_(u"""within NVDA. It is a development tool which is useful for debugging,"""),
_(u"""general inspection of NVDA internals or inspection of the accessibility"""),
_(u"""hierarchy of an application."""),
"",_(u"""[]{#toc40}"""),
"",_(u"""### 5.1. Usage"""),
"",_(u"""The console can be activated in two ways:"""),
"",_(u"""-   By pressing NVDA+control+z. If activated in this fashion, a snapshot"""),
_(u"""    of the current state of NVDA at the time the key was pressed will be"""),
_(u"""    taken and saved in certain variables available in the console. See"""),
_(u"""    [Snapshot Variables](#PythonConsoleSnapshotVariables) for more"""),
_(u"""    details."""),
_(u"""-   By selecting Tools -\\> Python console from the NVDA system tray"""),
_(u"""    menu."""),
"",_(u"""The console is similar to the standard interactive Python interpreter."""),
_(u"""Input is accepted one line at a time. The current line is processed when"""),
_(u"""enter is pressed. You can navigate through the history of previously"""),
_(u"""entered lines using the up and down arrow keys."""),
"",_(u"""Output (responses from the interpreter) will be spoken when enter is"""),
_(u"""pressed. The f6 key toggles between the input and output controls."""),
"",_(u"""Closing the console window simply hides it. This allows the user to"""),
_(u"""return to the session as it was left when it was closed, including"""),
_(u"""history and variables."""),
"",_(u"""[]{#PythonConsoleNamespace}"""),
"",_(u"""### 5.2. Namespace"""),
"",_(u"""[]{#toc42}"""),
"",_(u"""#### 5.2.1. Automatic Imports"""),
"",_(u"""For convenience, the following modules and variables are automatically"""),
_(u"""imported in the console: sys, os, wx, log (from logHandler), api,"""),
_(u"""queueHandler, speech, braille"""),
"",_(u"""[]{#PythonConsoleSnapshotVariables}"""),
"",_(u"""#### 5.2.2. Snapshot Variables"""),
"",_(u"""Whenever NVDA+control+z is pressed, certain variables available in the"""),
_(u"""console will be assigned according to the current state of NVDA. These"""),
_(u"""variables are:"""),
"",_(u"""-   focus: The current focus object"""),
_(u"""-   focusAnc: The ancestors of the current focus object"""),
_(u"""-   fdl: Focus difference level; i.e. the level at which the ancestors"""),
_(u"""    for the current and previous focus differ"""),
_(u"""-   fg: The current foreground object"""),
_(u"""-   nav: The current navigator object"""),
_(u"""-   mouse: The current mouse object"""),
_(u"""-   brlRegions: The braille regions from the active braille buffer"""),
"",_(u"""[]{#toc44}"""),
"",_(u"""6. Remote Python Console"""),
_(u"""------------------------"""),
"",_(u"""A remote Python console is available for situations where remote"""),
_(u"""debugging of NVDA is useful. It is similar to the [local Python"""),
_(u"""console](#PythonConsole) discussed above, but is accessed via TCP."""),
"",_(u"""Please be aware that this is a huge security risk. You should only"""),
_(u"""enable it if you are connected to trusted networks."""),
"",_(u"""[]{#toc45}"""),
"",_(u"""### 6.1. Usage"""),
"",_(u"""To enable the remote Python console, use the local Python console to"""),
_(u"""import remotePythonConsole and call remotePythonConsole.initialize()."""),
_(u"""You can then connect to it via TCP port 6832."""),
"",_(u"""History of previously entered lines is not supported."""),
"",_(u"""The namespace is the same as [the namespace in the local Python"""),
_(u"""console](#PythonConsoleNamespace)."""),
"",_(u"""There are some special functions:"""),
"",_(u"""-   snap(): Takes a snapshot of the current state of NVDA and saves it"""),
_(u"""    in the [snapshot variables](#PythonConsoleSnapshotVariables)."""),
_(u"""-   rmSnap(): Removes all snapshot variables."""),
]